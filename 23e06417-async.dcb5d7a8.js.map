{"version":3,"sources":["src/pages/Regex/constants.ts","src/pages/Regex/index.tsx"],"sourcesContent":["export const commonPatterns = [\n  {\n    name: 'Email',\n    pattern: '^[\\\\w.-]+@[\\\\w.-]+\\\\.[A-Za-z]{2,}$',\n    examples: ['example@mail.com', 'user.name@domain.co', 'user@domain'],\n  },\n  {\n    name: 'Phone (VN)',\n    pattern: '^(\\\\+84|0)(\\\\d{9,10})$',\n    examples: ['+84987654321', '0912345678', '12345'],\n  },\n  {\n    name: 'Phone (Global)',\n    pattern: '^\\\\+(?:[0-9] ?){6,14}[0-9]$',\n    examples: ['+1 234 567 890', '+44 7911 123456', '+81 90 1234 5678', '0044 1234567'],\n  },\n  {\n    name: 'No Special Char & No Leading Space',\n    pattern: '^[A-Za-z0-9][A-Za-z0-9 _-]*$',\n    examples: ['Hello World', ' MyName', 'User_Name'],\n  },\n  {\n    name: 'Vietnamese Letters (No Special, No Leading Space)',\n    pattern: '^[\\\\p{L}\\\\p{N}][\\\\p{L}\\\\p{N} _-]*$',\n    examples: ['Nguyen Van A', '123LeThiB', ' Hello'],\n  },\n  {\n    name: 'Password (8+ chars, upper, lower, number, symbol)',\n    pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*]).{8,}$',\n    examples: ['Abc123!@', 'password', 'StrongP@ss1'],\n  },\n  {\n    name: 'URL',\n    pattern: \"https?:\\\\/\\\\/[\\\\w.-]+(?:\\\\.[\\\\w\\\\.-]+)+(?:[\\\\w\\\\-._~:/?#[\\\\]@!$&'()*+,;=]+)?\",\n    examples: [\n      'https://google.com',\n      'http://example.org/test',\n      'https://www.example.co.uk/path?query=1#section',\n      'https://sub.domain.io:8080/api/v2/data',\n      'http://localhost:3000/',\n      'ftp://file',\n      'htp://invalid-url',\n      'https://',\n    ],\n  },\n  {\n    name: 'Domain',\n    pattern: '^(?!-)[A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$',\n    examples: ['example.com', '-invalid.com', 'my.site.net'],\n  },\n  {\n    name: 'URL Path',\n    pattern: \"^\\\\/(?:[A-Za-z0-9\\\\-_~!$&'()*+,;=:@]+\\\\/?)*$\",\n    examples: [\n      '/home',\n      '/api/v1/users',\n      '/blog/posts/2025/10/17',\n      '/user/profile/edit/',\n      '/products/item-123?color=red',\n      'home/',\n      '//double/slash',\n      '/ space',\n    ],\n  },\n  {\n    name: 'IPv4',\n    pattern: '^((25[0-5]|2[0-4]\\\\d|[0-1]?\\\\d?\\\\d)(\\\\.|$)){4}$',\n    examples: [\n      '192.168.0.1',\n      '10.0.0.255',\n      '255.255.255.255',\n      '8.8.8.8',\n      '172.16.254.3',\n      '256.100.100.100',\n      '192.168.1',\n      'abc.def.ghi.jkl',\n    ],\n  },\n  {\n    name: 'IPv6',\n    pattern:\n      '^(?:[A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}$|^(?:[A-Fa-f0-9]{1,4}:){1,7}:$|^:(?::[A-Fa-f0-9]{1,4}){1,7}$',\n    examples: [\n      '2001:0db8:85a3:0000:0000:8a2e:0370:7334',\n      'fe80::1ff:fe23:4567:890a',\n      '::1',\n      'abcd::1234',\n      '2001:db8::8a2e:370:7334',\n      '12345::',\n      'gggg::abcd',\n      '2001:::7334',\n    ],\n  },\n  {\n    name: 'Date (YYYY-MM-DD)',\n    pattern: '^\\\\d{4}-\\\\d{2}-\\\\d{2}$',\n    examples: ['2025-10-17', '2024-02-29', '17/10/2025', '2025-13-01'],\n  },\n  {\n    name: 'Hex Color',\n    pattern: '^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$',\n    examples: ['#fff', '#123ABC', '#00ff00', '12345', '#abcd'],\n  },\n  {\n    name: 'Username',\n    pattern: '^[A-Za-z0-9_]{3,16}$',\n    examples: ['user_123', 'ab', 'user.name', 'ValidUser01', 'ThisUsernameIsTooLong'],\n  },\n  {\n    name: 'Postal Code',\n    pattern: '^\\\\d{5}(-\\\\d{4})?$',\n    examples: ['12345', '12345-6789', 'ABCDE', '12-345', '987654321'],\n  },\n  {\n    name: 'Only Letters',\n    pattern: '^[A-Za-z]+$',\n    examples: ['Hello', 'abcDEF', 'abc123', 'HelloWorld'],\n  },\n  {\n    name: 'Only Numbers',\n    pattern: '^\\\\d+$',\n    examples: ['12345', '123abc', '000', '987654321'],\n  },\n];\n","import { handleCopy } from '@/helpers';\nimport { Alert, Card, Input, Space, Tabs, Tag, Tooltip, Typography } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { commonPatterns } from './constants';\nimport './styles.less';\n\nconst { TextArea, Search } = Input;\nconst { Paragraph } = Typography;\n\nconst explainRegex = (pattern: string): string[] => {\n  const explanations: string[] = [];\n\n  if (!pattern) return ['No regex pattern entered.'];\n\n  try {\n    const tokens = pattern.match(/\\\\.|(\\[\\^?.*?\\])|(\\(\\?:?.*?\\))|([*+?^$|(){}])/g) || [];\n\n    for (const token of tokens) {\n      switch (token) {\n        case '^':\n          explanations.push('^ â†’ Matches the start of a line or string.');\n          break;\n        case '$':\n          explanations.push('$ â†’ Matches the end of a line or string.');\n          break;\n        case '.':\n          explanations.push('. â†’ Matches any character except newline.');\n          break;\n        case '*':\n          explanations.push('* â†’ Matches 0 or more repetitions.');\n          break;\n        case '+':\n          explanations.push('+ â†’ Matches 1 or more repetitions.');\n          break;\n        case '?':\n          explanations.push('? â†’ Makes the previous token optional (0 or 1 times).');\n          break;\n        case '|':\n          explanations.push('| â†’ Acts as OR between patterns.');\n          break;\n        case '\\\\d':\n          explanations.push('\\\\d â†’ Matches any digit (0â€“9).');\n          break;\n        case '\\\\D':\n          explanations.push('\\\\D â†’ Matches any non-digit.');\n          break;\n        case '\\\\w':\n          explanations.push('\\\\w â†’ Matches any word character (letters, digits, underscore).');\n          break;\n        case '\\\\W':\n          explanations.push('\\\\W â†’ Matches any non-word character.');\n          break;\n        case '\\\\s':\n          explanations.push('\\\\s â†’ Matches whitespace (space, tab, newline).');\n          break;\n        case '\\\\S':\n          explanations.push('\\\\S â†’ Matches any non-whitespace character.');\n          break;\n        default:\n          if (token.startsWith('[')) explanations.push(`${token} â†’ Character set or range.`);\n          else if (token.startsWith('('))\n            explanations.push(`${token} â†’ Capturing or non-capturing group.`);\n          else if (token.startsWith('\\\\'))\n            explanations.push(`${token} â†’ Escaped character or special sequence.`);\n          else explanations.push(`${token} â†’ Literal character.`);\n          break;\n      }\n    }\n\n    if (explanations.length === 0)\n      explanations.push('No special tokens found. Probably a literal string.');\n  } catch (e: any) {\n    explanations.push(`Error parsing regex: ${e.message}`);\n  }\n\n  return explanations;\n};\n\nconst RegexTester: React.FC = () => {\n  const [pattern, setPattern] = useState('^\\\\w+$');\n  const [flags, setFlags] = useState('gm');\n  const [text, setText] = useState('asdasd\\n1234\\n@hello');\n  const [error, setError] = useState('');\n  const [highlightedHTML, setHighlightedHTML] = useState('');\n  const [explanation, setExplanation] = useState<string[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const highlightRef = useRef<HTMLDivElement>(null);\n\n  const updateHighlight = (p = pattern, f = flags, t = text) => {\n    try {\n      const re = new RegExp(p, f);\n      setError('');\n      setExplanation(explainRegex(p));\n\n      let highlighted = '';\n      let lastIndex = 0;\n      let match: RegExpExecArray | null;\n\n      while ((match = re.exec(t)) !== null) {\n        const start = match.index;\n        const end = start + match[0].length;\n        highlighted += t.slice(lastIndex, start);\n        highlighted += `<mark>${match[0]}</mark>`;\n        lastIndex = end;\n        if (re.lastIndex === match.index) re.lastIndex++;\n      }\n\n      highlighted += t.slice(lastIndex);\n      setHighlightedHTML(highlighted.replace(/\\n/g, '<br/>'));\n    } catch (e: any) {\n      setError(e.message);\n      setHighlightedHTML(t.replace(/\\n/g, '<br/>'));\n      setExplanation([`Error: ${e.message}`]);\n    }\n  };\n\n  useEffect(() => {\n    updateHighlight(pattern, flags, text);\n  }, [pattern, flags, text]);\n\n  const syncScroll = () => {\n    if (!textAreaRef.current || !highlightRef.current) return;\n    highlightRef.current.scrollTop = textAreaRef.current.scrollTop;\n  };\n\n  const handlePatternClick = (newPattern: string, examples: string[]) => {\n    setPattern(newPattern);\n    handleCopy(newPattern);\n    if (examples?.length) {\n      setText(examples.join('\\n'));\n    }\n  };\n\n  const filteredPatterns = commonPatterns.filter(\n    (item) =>\n      item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      item.pattern.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  return (\n    <Card className=\"regex-card-light\" title=\"ðŸ§© Regex Tester\" variant={'borderless'}>\n      <div className=\"regex-header\">\n        <Input\n          className=\"regex-input-light\"\n          placeholder=\"Enter regex pattern (without / /)\"\n          value={pattern}\n          onChange={(e) => setPattern(e.target.value)}\n        />\n        <Input\n          className=\"regex-flags-light\"\n          placeholder=\"Flags (e.g. gim)\"\n          value={flags}\n          onChange={(e) => setFlags(e.target.value)}\n        />\n      </div>\n\n      <Tabs\n        defaultActiveKey=\"1\"\n        items={[\n          {\n            key: '1',\n            label: 'Text',\n            children: (\n              <div className=\"regex-textarea-wrapper\">\n                <div\n                  ref={highlightRef}\n                  className=\"regex-highlights\"\n                  dangerouslySetInnerHTML={{ __html: highlightedHTML }}\n                />\n                <TextArea\n                  ref={textAreaRef}\n                  value={text}\n                  onScroll={syncScroll}\n                  onChange={(e) => setText(e.target.value)}\n                  rows={8}\n                  className=\"regex-textarea-overlay\"\n                />\n              </div>\n            ),\n          },\n          {\n            key: '2',\n            label: 'Explanation',\n            children: (\n              <div className=\"regex-explanation\">\n                {explanation.map((line, i) => (\n                  <Paragraph key={i} className=\"regex-explain-line\">\n                    {line}\n                  </Paragraph>\n                ))}\n              </div>\n            ),\n          },\n        ]}\n      />\n\n      {error && <Alert message={`Error: ${error}`} type=\"error\" showIcon />}\n\n      {/* ðŸ”¹ Common Patterns Section */}\n      <div className=\"regex-common-section\">\n        <h4>Common Regex Patterns</h4>\n\n        {/* Search bar */}\n        <Search\n          placeholder=\"Search regex patterns...\"\n          allowClear\n          onChange={(e) => setSearchTerm(e.target.value)}\n          style={{ maxWidth: 400, marginBottom: 12 }}\n        />\n\n        {/* Filtered results */}\n        <div>\n          <Space wrap>\n            {filteredPatterns.map((item) => (\n              <Tooltip key={item.name} title={item.pattern}>\n                <Tag\n                  color=\"cyan\"\n                  onClick={() => handlePatternClick(item.pattern, item.examples || [])}\n                  style={{ cursor: 'pointer', fontSize: 13, padding: '4px 8px' }}\n                >\n                  {item.name}\n                </Tag>\n              </Tooltip>\n            ))}\n            {filteredPatterns.length === 0 && <Paragraph>No matching patterns found.</Paragraph>}\n          </Space>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default RegexTester;\n"],"names":[],"mappings":"0jBAAO,IAAM,EAAiB,CAC5B,CACE,KAAM,QACN,QAAS,qCACT,SAAU,CAAC,mBAAoB,sBAAuB,cAAc,AACtE,EACA,CACE,KAAM,aACN,QAAS,yBACT,SAAU,CAAC,eAAgB,aAAc,QAAQ,AACnD,EACA,CACE,KAAM,iBACN,QAAS,8BACT,SAAU,CAAC,iBAAkB,kBAAmB,mBAAoB,eAAe,AACrF,EACA,CACE,KAAM,qCACN,QAAS,+BACT,SAAU,CAAC,cAAe,UAAW,YAAY,AACnD,EACA,CACE,KAAM,oDACN,QAAS,qCACT,SAAU,CAAC,eAAgB,YAAa,SAAS,AACnD,EACA,CACE,KAAM,oDACN,QAAS,yDACT,SAAU,CAAC,WAAY,WAAY,cAAc,AACnD,EACA,CACE,KAAM,MACN,QAAS,+EACT,SAAU,CACR,qBACA,0BACA,iDACA,yCACA,yBACA,aACA,oBACA,WACD,AACH,EACA,CACE,KAAM,SACN,QAAS,2DACT,SAAU,CAAC,cAAe,eAAgB,cAAc,AAC1D,EACA,CACE,KAAM,WACN,QAAS,+CACT,SAAU,CACR,QACA,gBACA,yBACA,sBACA,+BACA,QACA,iBACA,UACD,AACH,EACA,CACE,KAAM,OACN,QAAS,kDACT,SAAU,CACR,cACA,aACA,kBACA,UACA,eACA,kBACA,YACA,kBACD,AACH,EACA,CACE,KAAM,OACN,QACE,yGACF,SAAU,CACR,0CACA,2BACA,MACA,aACA,0BACA,UACA,aACA,cACD,AACH,EACA,CACE,KAAM,oBACN,QAAS,yBACT,SAAU,CAAC,aAAc,aAAc,aAAc,aAAa,AACpE,EACA,CACE,KAAM,YACN,QAAS,sCACT,SAAU,CAAC,OAAQ,UAAW,UAAW,QAAS,QAAQ,AAC5D,EACA,CACE,KAAM,WACN,QAAS,uBACT,SAAU,CAAC,WAAY,KAAM,YAAa,cAAe,wBAAwB,AACnF,EACA,CACE,KAAM,cACN,QAAS,qBACT,SAAU,CAAC,QAAS,aAAc,QAAS,SAAU,YAAY,AACnE,EACA,CACE,KAAM,eACN,QAAS,cACT,SAAU,CAAC,QAAS,SAAU,SAAU,aAAa,AACvD,EACA,CACE,KA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"}