{"version":3,"sources":["src/pages/Password/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Card, InputNumber, Checkbox, Button, Input, Space, Typography } from 'antd';\r\nimport { PageContainer } from '@ant-design/pro-components';\r\n\r\nfunction generatePassword(\r\n  length: number,\r\n  opts: { lower: boolean; upper: boolean; number: boolean; special: boolean },\r\n) {\r\n  const lower = 'abcdefghijklmnopqrstuvwxyz';\r\n  const upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n  const numbers = '0123456789';\r\n  const special = '!@#$%^&*()_+-=[]{}|;:,./<>?';\r\n  let pool = '';\r\n  if (opts.lower) pool += lower;\r\n  if (opts.upper) pool += upper;\r\n  if (opts.number) pool += numbers;\r\n  if (opts.special) pool += special;\r\n  if (!pool) return '';\r\n  let pw = '';\r\n  for (let i = 0; i < length; i++) pw += pool[Math.floor(Math.random() * pool.length)];\r\n  return pw;\r\n}\r\n\r\nconst PasswordPage: React.FC = () => {\r\n  const [length, setLength] = useState(12);\r\n  const [opts, setOpts] = useState({ lower: true, upper: true, number: true, special: true });\r\n  const [value, setValue] = useState('');\r\n\r\n  const regenerate = () => {\r\n    setValue(generatePassword(length, opts));\r\n  };\r\n\r\n  return (\r\n    <Card title=\"Password Generator\">\r\n      <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n        <InputNumber\r\n          min={4}\r\n          max={64}\r\n          value={length}\r\n          onChange={(v) => setLength(Number(v))}\r\n          addonBefore=\"Length\"\r\n        />\r\n        <Checkbox\r\n          checked={opts.lower}\r\n          onChange={(e) => setOpts({ ...opts, lower: e.target.checked })}\r\n        >\r\n          Lowercase\r\n        </Checkbox>\r\n        <Checkbox\r\n          checked={opts.upper}\r\n          onChange={(e) => setOpts({ ...opts, upper: e.target.checked })}\r\n        >\r\n          Uppercase\r\n        </Checkbox>\r\n        <Checkbox\r\n          checked={opts.number}\r\n          onChange={(e) => setOpts({ ...opts, number: e.target.checked })}\r\n        >\r\n          Numbers\r\n        </Checkbox>\r\n        <Checkbox\r\n          checked={opts.special}\r\n          onChange={(e) => setOpts({ ...opts, special: e.target.checked })}\r\n        >\r\n          Special\r\n        </Checkbox>\r\n        <Button type=\"primary\" onClick={regenerate}>\r\n          Generate\r\n        </Button>\r\n        <Input value={value} readOnly placeholder=\"Generated password\" />\r\n        {value && <Typography.Text copyable>{value}</Typography.Text>}\r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PasswordPage;\r\n"],"names":[],"mappings":"iQA4EA,+CAAA,8CA5EgC,+JA4EhC,EArD+B,KAC7B,GAAM,CAAC,EAAQ,EAAU,CAAG,GAAA,UAAQ,EAAC,IAC/B,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAC,CAAE,MAAO,CAAA,EAAM,MAAO,CAAA,EAAM,OAAQ,CAAA,EAAM,QAAS,CAAA,CAAK,GACnF,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAC,IAMnC,MACE,UAAC,SAAI,EAAC,MAAM,8BACV,WAAC,SAAK,EAAC,UAAU,WAAW,MAAO,CAAE,MAAO,MAAO,YACjD,UAAC,SAAW,EACV,IAAK,EACL,IAAK,GACL,MAAO,EACP,SAAU,AAAC,GAAM,EAAU,OAAO,IAClC,YAAY,WAEd,UAAC,SAAQ,EACP,QAAS,EAAK,KAAK,CACnB,SAAU,AAAC,GAAM,EAAQ,CAAE,GAAG,CAAI,CAAE,MAAO,EAAE,MAAM,CAAC,OAAO,AAAC,YAC7D,cAGD,UAAC,SAAQ,EACP,QAAS,EAAK,KAAK,CACnB,SAAU,AAAC,GAAM,EAAQ,CAAE,GAAG,CAAI,CAAE,MAAO,EAAE,MAAM,CAAC,OAAO,AAAC,YAC7D,cAGD,UAAC,SAAQ,EACP,QAAS,EAAK,MAAM,CACpB,SAAU,AAAC,GAAM,EAAQ,CAAE,GAAG,CAAI,CAAE,OAAQ,EAAE,MAAM,CAAC,OAAO,AAAC,YAC9D,YAGD,UAAC,SAAQ,EACP,QAAS,EAAK,OAAO,CACrB,SAAU,AAAC,GAAM,EAAQ,CAAE,GAAG,CAAI,CAAE,QAAS,EAAE,MAAM,CAAC,OAAO,AAAC,YAC/D,YAGD,UAAC,SAAM,EAAC,KAAK,UAAU,QAtCV,KACjB,EAAS,AAzBb,SACE,CAAc,CACd,CAA2E,EAM3E,IAAI,EAAO,GAKX,GAJI,EAAK,KAAK,EAAE,CAAA,GALF,4BAKc,EACxB,EAAK,KAAK,EAAE,CAAA,GALF,4BAKc,EACxB,EAAK,MAAM,EAAE,CAAA,GALD,YAKe,EAC3B,EAAK,OAAO,EAAE,CAAA,GALF,6BAKgB,EAC5B,CAAC,EAAM,MAAO,GAClB,IAAI,EAAK,GACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAAK,GAAM,CAAI,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAK,MAAM,EAAE,CACpF,OAAO,EACT,EAQ8B,EAAQ,IACpC,WAoCkD,aAG5C,UAAC,SAAK,EAAC,MAAO,EAAO,QAAQ,IAAC,YAAY,uBACzC,GAAS,UAAC,SAAU,CAAC,IAAI,EAAC,QAAQ,aAAE,SAI7C"}