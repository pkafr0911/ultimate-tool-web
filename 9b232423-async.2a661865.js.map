{"version":3,"sources":["src/pages/JWT/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Input, Button, Card, Typography, Space, message } from 'antd';\nimport jwt from 'jsonwebtoken';\nimport { PageContainer } from '@ant-design/pro-components';\n\nconst { TextArea } = Input;\nconst { Title, Text } = Typography;\n\nconst JWTTool: React.FC = () => {\n  const [secret, setSecret] = useState('');\n  const [payload, setPayload] = useState('');\n  const [token, setToken] = useState('');\n  const [decoded, setDecoded] = useState('');\n\n  const handleEncrypt = () => {\n    try {\n      const obj = JSON.parse(payload);\n      const signed = jwt.sign(obj, secret, { algorithm: 'HS256' });\n      setToken(signed);\n      message.success('JWT token created successfully!');\n    } catch (err) {\n      message.error('Invalid JSON payload.');\n    }\n  };\n\n  const handleDecrypt = () => {\n    try {\n      const decodedData = jwt.verify(token, secret);\n      setDecoded(JSON.stringify(decodedData, null, 2));\n      message.success('Token decoded successfully!');\n    } catch (err: any) {\n      message.error(`Invalid token: ${err.message}`);\n    }\n  };\n\n  return (\n    <Card title=\"🔐 JWT Encrypt / Decrypt Tool\" bordered={false}>\n      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n        <Input.Password\n          placeholder=\"Enter Secret Key\"\n          value={secret}\n          onChange={(e) => setSecret(e.target.value)}\n        />\n\n        <TextArea\n          rows={4}\n          placeholder=\"Enter Payload JSON (e.g. { 'user': 'admin' })\"\n          value={payload}\n          onChange={(e) => setPayload(e.target.value)}\n        />\n\n        <Button type=\"primary\" onClick={handleEncrypt}>\n          Encrypt (Sign JWT)\n        </Button>\n\n        <TextArea\n          rows={4}\n          placeholder=\"Generated or Existing JWT Token\"\n          value={token}\n          onChange={(e) => setToken(e.target.value)}\n        />\n\n        <Button onClick={handleDecrypt}>Decrypt (Verify JWT)</Button>\n\n        {decoded && (\n          <>\n            <Title level={5}>Decoded Payload:</Title>\n            <pre style={{ background: '#f7f7f7', padding: 12, borderRadius: 6 }}>{decoded}</pre>\n          </>\n        )}\n      </Space>\n    </Card>\n  );\n};\n\nexport default JWTTool;\n"],"names":[],"mappings":"iQA2EA,+CAAA,8CA3EgC,kJAEhB,aAGhB,GAAM,CAAE,SAAA,CAAQ,CAAE,CAAG,SAAK,CACpB,CAAE,MAAA,CAAK,CAAE,KAAA,CAAI,CAAE,CAAG,SAAU,KAqElC,EAnE0B,KACxB,GAAM,CAAC,EAAQ,EAAU,CAAG,GAAA,UAAQ,EAAC,IAC/B,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAC,IACjC,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAC,IAC7B,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAC,IAuBvC,MACE,UAAC,SAAI,EAAC,MAAM,uCAAgC,SAAU,CAAA,WACpD,WAAC,SAAK,EAAC,UAAU,WAAW,MAAO,CAAE,MAAO,MAAO,EAAG,KAAK,kBACzD,UAAC,SAAK,CAAC,QAAQ,EACb,YAAY,mBACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAU,EAAE,MAAM,CAAC,KAAK,IAG3C,UAAC,GACC,KAAM,EACN,YAAY,gDACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAW,EAAE,MAAM,CAAC,KAAK,IAG5C,UAAC,SAAM,EAAC,KAAK,UAAU,QArCP,KACpB,GAAI,CACF,IAAM,EAAM,KAAK,KAAK,CAAC,GACjB,EAAS,SAAG,CAAC,IAAI,CAAC,EAAK,EAAQ,CAAE,UAAW,OAAQ,GAC1D,EAAS,GACT,SAAO,CAAC,OAAO,CAAC,mCAClB,CAAE,MAAO,EAAK,CACZ,SAAO,CAAC,KAAK,CAAC,yBAChB,CACF,WA4BqD,uBAI/C,UAAC,GACC,KAAM,EACN,YAAY,kCACZ,MAAO,EACP,SAAU,AAAC,GAAM,EAAS,EAAE,MAAM,CAAC,KAAK,IAG1C,UAAC,SAAM,EAAC,QArCQ,KACpB,GAAI,CACF,IAAM,EAAc,SAAG,CAAC,MAAM,CAAC,EAAO,GACtC,EAAW,KAAK,SAAS,CAAC,EAAa,KAAM,IAC7C,SAAO,CAAC,OAAO,CAAC,+BAClB,CAAE,MAAO,EAAU,CACjB,SAAO,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,EAAI,OAAO,CAAC,CAAC,EAC/C,CACF,WA6BsC,yBAE/B,GACC,iCACE,UAAC,GAAM,MAAO,WAAG,qBACjB,UAAC,OAAI,MAAO,CAAE,WAAY,UAAW,QAAS,GAAI,aAAc,CAAE,WAAI,YAMlF"}