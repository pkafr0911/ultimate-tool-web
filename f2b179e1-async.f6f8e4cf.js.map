{"version":3,"sources":["src/pages/SnakeXenzia/index.tsx"],"sourcesContent":["import { Button, Card, InputNumber, Space, Switch, Typography, message } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport './styles.less';\n\nconst { Title, Text } = Typography;\n\n// --- Define basic types ---\ntype Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\ntype Cell = { x: number; y: number };\n\nconst SnakeXenziaPage: React.FC = () => {\n  // --- Game configuration states ---\n  const [gridSize, setGridSize] = useState<number>(20); // Board size (number of rows/columns)\n  const [speed, setSpeed] = useState<number>(75); // Snake speed in milliseconds per move\n  const [snake, setSnake] = useState<Cell[]>([{ x: 10, y: 10 }]); // Array of cells (snake body)\n  const [direction, setDirection] = useState<Direction>('RIGHT'); // Snake‚Äôs current direction\n  const [food, setFood] = useState<Cell>({ x: 5, y: 5 }); // Position of the food\n  const [started, setStarted] = useState<boolean>(false); // Whether the game has started\n  const [gameOver, setGameOver] = useState<boolean>(false); // Whether the player lost\n  const [score, setScore] = useState<number>(0); // Player‚Äôs score\n  const [showConfetti, setShowConfetti] = useState<boolean>(false); // Confetti animation toggle\n  const [wallsEnabled, setWallsEnabled] = useState<boolean>(true); // Whether hitting walls ends the game\n\n  // A ref to hold the movement interval ID (so we can clear it later)\n  const moveRef = useRef<any>(null);\n\n  // --- Refs for swipe gesture tracking ---\n  const touchStartX = useRef<number>(0);\n  const touchStartY = useRef<number>(0);\n  const touchEndX = useRef<number>(0);\n  const touchEndY = useRef<number>(0);\n\n  // --- Generate a random food position within grid ---\n  const randomFood = (): Cell => ({\n    x: Math.floor(Math.random() * gridSize),\n    y: Math.floor(Math.random() * gridSize),\n  });\n\n  // --- Start or restart the game ---\n  const startGame = () => {\n    if (gridSize < 10) {\n      message.error('Grid size must be at least 10!');\n      return;\n    }\n\n    // Reset all gameplay-related states\n    setSnake([{ x: Math.floor(gridSize / 2), y: Math.floor(gridSize / 2) }]); // Start from center\n    setFood(randomFood()); // Place food randomly\n    setScore(0);\n    setGameOver(false);\n    setStarted(true);\n    setShowConfetti(false);\n    setDirection('RIGHT');\n  };\n\n  // --- Core snake movement logic ---\n  const moveSnake = () => {\n    setSnake((prevSnake) => {\n      const newSnake = [...prevSnake];\n      const head = { ...newSnake[0] }; // Copy the snake‚Äôs head\n\n      // Move head in the current direction\n      switch (direction) {\n        case 'UP':\n          head.y -= 1;\n          break;\n        case 'DOWN':\n          head.y += 1;\n          break;\n        case 'LEFT':\n          head.x -= 1;\n          break;\n        case 'RIGHT':\n          head.x += 1;\n          break;\n      }\n\n      // --- Wall collision or wrap-around logic ---\n      if (wallsEnabled) {\n        // If walls are active, hitting the edge ends the game\n        if (head.x < 0 || head.y < 0 || head.x >= gridSize || head.y >= gridSize) {\n          setGameOver(true);\n          return prevSnake;\n        }\n      } else {\n        // Otherwise, snake wraps around edges\n        if (head.x < 0) head.x = gridSize - 1;\n        if (head.x >= gridSize) head.x = 0;\n        if (head.y < 0) head.y = gridSize - 1;\n        if (head.y >= gridSize) head.y = 0;\n      }\n\n      // --- Check self-collision ---\n      if (newSnake.some((seg) => seg.x === head.x && seg.y === head.y)) {\n        setGameOver(true);\n        return prevSnake;\n      }\n\n      // Move head to front of snake array\n      newSnake.unshift(head);\n\n      // --- Check if snake eats food ---\n      if (head.x === food.x && head.y === food.y) {\n        setScore((s) => s + 10); // Add score\n        setFood(randomFood()); // Generate new food\n      } else {\n        newSnake.pop(); // Otherwise remove tail segment\n      }\n\n      return newSnake;\n    });\n  };\n\n  // --- Keyboard input for movement (desktop controls) ---\n  const handleKeyDown = (e: KeyboardEvent) => {\n    if (!started || gameOver) return;\n    const key = e.key.toLowerCase();\n\n    switch (key) {\n      case 'arrowup':\n      case 'w':\n        if (direction !== 'DOWN') setDirection('UP');\n        break;\n      case 'arrowdown':\n      case 's':\n        if (direction !== 'UP') setDirection('DOWN');\n        break;\n      case 'arrowleft':\n      case 'a':\n        if (direction !== 'RIGHT') setDirection('LEFT');\n        break;\n      case 'arrowright':\n      case 'd':\n        if (direction !== 'LEFT') setDirection('RIGHT');\n        break;\n    }\n  };\n\n  // --- Touch event handlers for mobile swipe control ---\n  const handleTouchStart = (e: React.TouchEvent) => {\n    touchStartX.current = e.touches[0].clientX;\n    touchStartY.current = e.touches[0].clientY;\n  };\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    touchEndX.current = e.touches[0].clientX;\n    touchEndY.current = e.touches[0].clientY;\n  };\n\n  const handleTouchEnd = () => {\n    if (!started || gameOver) return;\n\n    const dx = touchEndX.current - touchStartX.current;\n    const dy = touchEndY.current - touchStartY.current;\n\n    if (Math.abs(dx) > Math.abs(dy)) {\n      // Horizontal swipe\n      if (dx > 30 && direction !== 'LEFT') setDirection('RIGHT');\n      else if (dx < -30 && direction !== 'RIGHT') setDirection('LEFT');\n    } else {\n      // Vertical swipe\n      if (dy > 30 && direction !== 'UP') setDirection('DOWN');\n      else if (dy < -30 && direction !== 'DOWN') setDirection('UP');\n    }\n  };\n\n  // --- Disable scrolling and page swiping on mobile while playing ---\n  useEffect(() => {\n    const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n    const preventScroll = (e: TouchEvent) => e.preventDefault();\n\n    if (isMobile && started && !gameOver) {\n      // Fully block scroll gestures\n      document.body.style.overflow = 'hidden';\n      document.body.style.position = 'fixed'; // Prevent bounce on iOS\n      document.body.style.width = '100%';\n      document.body.style.touchAction = 'none';\n\n      // Attach early (non-passive) listener to cancel all scrolling\n      window.addEventListener('touchmove', preventScroll, { passive: false });\n    } else {\n      // Restore normal\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n      document.body.style.touchAction = '';\n      window.removeEventListener('touchmove', preventScroll);\n    }\n\n    return () => {\n      document.body.style.overflow = '';\n      document.body.style.position = '';\n      document.body.style.width = '';\n      document.body.style.touchAction = '';\n      window.removeEventListener('touchmove', preventScroll);\n    };\n  }, [started, gameOver]);\n\n  // --- Manual directional button control (optional UI buttons) ---\n  const handleManualMove = (dir: Direction) => {\n    if (!started || gameOver) return;\n    if (\n      (dir === 'UP' && direction !== 'DOWN') ||\n      (dir === 'DOWN' && direction !== 'UP') ||\n      (dir === 'LEFT' && direction !== 'RIGHT') ||\n      (dir === 'RIGHT' && direction !== 'LEFT')\n    ) {\n      setDirection(dir);\n    }\n  };\n\n  // --- Main game loop: move the snake at set intervals ---\n  useEffect(() => {\n    if (started && !gameOver) {\n      moveRef.current = setInterval(moveSnake, speed);\n    }\n    return () => clearInterval(moveRef.current);\n  }, [started, speed, direction, gameOver]);\n\n  // --- Attach keyboard event listener ---\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [started, direction, gameOver]);\n\n  // --- Game over visual effects ---\n  useEffect(() => {\n    if (gameOver) {\n      clearInterval(moveRef.current);\n      message.error('üíÄ Game Over!');\n      setShowConfetti(true);\n    }\n  }, [gameOver]);\n\n  // --- Reset entire setup (return to setup screen) ---\n  const resetGame = () => {\n    setStarted(false);\n    setSnake([]);\n    setScore(0);\n    setGameOver(false);\n    setShowConfetti(false);\n  };\n\n  // --- UI Render Section ---\n  return (\n    <div className=\"tic-container\">\n      {/* Show confetti when player loses */}\n      {showConfetti && gameOver && <Confetti />}\n\n      <Card className=\"tic-card\" variant={'borderless'}>\n        <Title level={3}>üêç Snake Xenzia</Title>\n\n        {/* --- Setup UI (before starting) --- */}\n        {!started ? (\n          <Space direction=\"vertical\" size=\"large\" style={{ marginTop: 24 }}>\n            {/* Grid size setup */}\n            <div>\n              <Text strong>Grid Size:</Text>\n              <InputNumber\n                min={10}\n                max={50}\n                value={gridSize}\n                onChange={(val) => setGridSize(val || 20)}\n                style={{ marginLeft: 10 }}\n              />\n            </div>\n\n            {/* Speed setup */}\n            <div>\n              <Text strong>Speed (ms):</Text>\n              <InputNumber\n                min={10}\n                max={500}\n                step={10}\n                value={speed}\n                onChange={(val) => setSpeed(val || 150)}\n                style={{ marginLeft: 10 }}\n              />\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\n                (Lower = faster)\n              </Text>\n            </div>\n\n            {/* Wall mode setup */}\n            <div>\n              <Text strong>Walls Enabled:</Text>\n              <Switch\n                checked={wallsEnabled}\n                onChange={setWallsEnabled}\n                style={{ marginLeft: 10 }}\n              />\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\n                {wallsEnabled ? 'Hit wall = Game over' : 'Wrap around mode'}\n              </Text>\n            </div>\n\n            <Button type=\"primary\" size=\"large\" onClick={startGame}>\n              Start Game\n            </Button>\n          </Space>\n        ) : (\n          <>\n            {/* --- Main Game Board --- */}\n            <div\n              className=\"snake-board\"\n              style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(${gridSize}, 20px)`,\n                gap: 2,\n                marginTop: 20,\n                justifyContent: 'center',\n              }}\n              onTouchStart={handleTouchStart}\n              onTouchMove={handleTouchMove}\n              onTouchEnd={handleTouchEnd}\n            >\n              {/* Render grid cells */}\n              {Array.from({ length: gridSize }).map((_, rowIdx) =>\n                Array.from({ length: gridSize }).map((_, colIdx) => {\n                  const isSnake = snake.some((s) => s.x === colIdx && s.y === rowIdx);\n                  const isHead = snake.length && snake[0].x === colIdx && snake[0].y === rowIdx;\n                  const isFood = food.x === colIdx && food.y === rowIdx;\n\n                  return (\n                    <div\n                      key={`${rowIdx}-${colIdx}`}\n                      className=\"snake-cell\"\n                      style={{\n                        width: 20,\n                        height: 20,\n                        backgroundColor: isHead\n                          ? '#52c41a' // Head color\n                          : isSnake\n                          ? '#73d13d' // Body color\n                          : isFood\n                          ? '#ff7875' // Food color\n                          : '#f0f0f0', // Empty cell color\n                        borderRadius: isFood ? '50%' : 2,\n                      }}\n                    />\n                  );\n                }),\n              )}\n            </div>\n\n            {/* --- Score Display --- */}\n            <div style={{ marginTop: 20 }}>\n              {!gameOver ? (\n                <Title level={4}>Score: {score}</Title>\n              ) : (\n                <Title level={4} style={{ color: '#ff4d4f' }}>\n                  Game Over! Final Score: {score}\n                </Title>\n              )}\n            </div>\n\n            {/* --- Optional manual direction buttons (useful for testing) --- */}\n            <div className=\"manual-controls\">\n              <div className=\"control-row\">\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('UP')}>\n                  ‚¨ÜÔ∏è / W\n                </Button>\n              </div>\n              <div className=\"control-row\">\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('LEFT')}>\n                  ‚¨ÖÔ∏è / A\n                </Button>\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('DOWN')}>\n                  ‚¨áÔ∏è / S\n                </Button>\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('RIGHT')}>\n                  ‚û°Ô∏è / D\n                </Button>\n              </div>\n            </div>\n\n            {/* --- Game control buttons --- */}\n            <Space style={{ marginTop: 16 }}>\n              <Button onClick={startGame}>Restart</Button>\n              <Button danger onClick={resetGame}>\n                New Setup\n              </Button>\n            </Space>\n          </>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default SnakeXenziaPage;\n"],"names":[],"mappings":"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"}