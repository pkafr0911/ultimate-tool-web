{"version":3,"sources":["src/pages/SnakeXenzia/index.tsx"],"sourcesContent":["import { Button, Card, InputNumber, Space, Switch, Typography, message } from 'antd';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Confetti from 'react-confetti';\r\nimport './styles.less';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\n// --- Define Types ---\r\ntype Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\r\ntype Cell = { x: number; y: number };\r\n\r\nconst SnakeXenziaPage: React.FC = () => {\r\n  // --- Game States ---\r\n  const [gridSize, setGridSize] = useState<number>(20); // The board width/height (square grid)\r\n  const [speed, setSpeed] = useState<number>(75); // How fast the snake moves (ms per move)\r\n  const [snake, setSnake] = useState<Cell[]>([{ x: 10, y: 10 }]); // Array of snake segments\r\n  const [direction, setDirection] = useState<Direction>('RIGHT'); // Current movement direction\r\n  const [food, setFood] = useState<Cell>({ x: 5, y: 5 }); // Position of the food\r\n  const [started, setStarted] = useState<boolean>(false); // Whether the game has started\r\n  const [gameOver, setGameOver] = useState<boolean>(false); // Whether the game is over\r\n  const [score, setScore] = useState<number>(0); // Player‚Äôs c urrent score\r\n  const [showConfetti, setShowConfetti] = useState<boolean>(false); // Show confetti on Game Over\r\n  const [wallsEnabled, setWallsEnabled] = useState<boolean>(true); // Wall mode toggle (wrap-around)\r\n\r\n  const moveRef = useRef<any>(null);\r\n\r\n  // --- Generate random food position ---\r\n  const randomFood = (): Cell => ({\r\n    x: Math.floor(Math.random() * gridSize),\r\n    y: Math.floor(Math.random() * gridSize),\r\n  });\r\n\r\n  // --- Start or Restart the Game ---\r\n  const startGame = () => {\r\n    if (gridSize < 10) {\r\n      message.error('Grid size must be at least 10!');\r\n      return;\r\n    }\r\n\r\n    setSnake([{ x: Math.floor(gridSize / 2), y: Math.floor(gridSize / 2) }]);\r\n    setFood(randomFood());\r\n    setScore(0);\r\n    setGameOver(false);\r\n    setStarted(true);\r\n    setShowConfetti(false);\r\n    setDirection('RIGHT');\r\n  };\r\n\r\n  // --- Move Snake Each Frame ---\r\n  const moveSnake = () => {\r\n    setSnake((prevSnake) => {\r\n      const newSnake = [...prevSnake];\r\n      const head = { ...newSnake[0] };\r\n\r\n      // Move head based on direction\r\n      switch (direction) {\r\n        case 'UP':\r\n          head.y -= 1;\r\n          break;\r\n        case 'DOWN':\r\n          head.y += 1;\r\n          break;\r\n        case 'LEFT':\r\n          head.x -= 1;\r\n          break;\r\n        case 'RIGHT':\r\n          head.x += 1;\r\n          break;\r\n      }\r\n\r\n      // Handle walls or wrap-around\r\n      if (wallsEnabled) {\r\n        if (head.x < 0 || head.y < 0 || head.x >= gridSize || head.y >= gridSize) {\r\n          setGameOver(true);\r\n          return prevSnake;\r\n        }\r\n      } else {\r\n        if (head.x < 0) head.x = gridSize - 1;\r\n        if (head.x >= gridSize) head.x = 0;\r\n        if (head.y < 0) head.y = gridSize - 1;\r\n        if (head.y >= gridSize) head.y = 0;\r\n      }\r\n\r\n      // Check self-collision\r\n      if (newSnake.some((seg) => seg.x === head.x && seg.y === head.y)) {\r\n        setGameOver(true);\r\n        return prevSnake;\r\n      }\r\n\r\n      newSnake.unshift(head);\r\n\r\n      // Check food\r\n      if (head.x === food.x && head.y === food.y) {\r\n        setScore((s) => s + 10);\r\n        setFood(randomFood());\r\n      } else {\r\n        newSnake.pop();\r\n      }\r\n\r\n      return newSnake;\r\n    });\r\n  };\r\n\r\n  // --- Handle Keyboard Input ---\r\n  const handleKeyDown = (e: KeyboardEvent) => {\r\n    if (!started || gameOver) return;\r\n\r\n    const key = e.key.toLowerCase();\r\n    switch (key) {\r\n      case 'arrowup':\r\n      case 'w':\r\n        if (direction !== 'DOWN') setDirection('UP');\r\n        break;\r\n      case 'arrowdown':\r\n      case 's':\r\n        if (direction !== 'UP') setDirection('DOWN');\r\n        break;\r\n      case 'arrowleft':\r\n      case 'a':\r\n        if (direction !== 'RIGHT') setDirection('LEFT');\r\n        break;\r\n      case 'arrowright':\r\n      case 'd':\r\n        if (direction !== 'LEFT') setDirection('RIGHT');\r\n        break;\r\n    }\r\n  };\r\n\r\n  // --- Manual Direction Change ---\r\n  const handleManualMove = (dir: Direction) => {\r\n    if (!started || gameOver) return;\r\n    if (\r\n      (dir === 'UP' && direction !== 'DOWN') ||\r\n      (dir === 'DOWN' && direction !== 'UP') ||\r\n      (dir === 'LEFT' && direction !== 'RIGHT') ||\r\n      (dir === 'RIGHT' && direction !== 'LEFT')\r\n    ) {\r\n      setDirection(dir);\r\n    }\r\n  };\r\n\r\n  // --- Main Game Loop ---\r\n  useEffect(() => {\r\n    if (started && !gameOver) {\r\n      moveRef.current = setInterval(moveSnake, speed);\r\n    }\r\n    return () => clearInterval(moveRef.current);\r\n  }, [started, speed, direction, gameOver]);\r\n\r\n  // --- Keyboard Event Listener ---\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => window.removeEventListener('keydown', handleKeyDown);\r\n  }, [started, direction, gameOver]);\r\n\r\n  // --- Game Over Effect ---\r\n  useEffect(() => {\r\n    if (gameOver) {\r\n      clearInterval(moveRef.current);\r\n      message.error('üíÄ Game Over!');\r\n      setShowConfetti(true);\r\n    }\r\n  }, [gameOver]);\r\n\r\n  // --- Reset Setup ---\r\n  const resetGame = () => {\r\n    setStarted(false);\r\n    setSnake([]);\r\n    setScore(0);\r\n    setGameOver(false);\r\n    setShowConfetti(false);\r\n  };\r\n\r\n  // --- Render UI ---\r\n  return (\r\n    <div className=\"tic-container\">\r\n      {showConfetti && gameOver && <Confetti />}\r\n      <Card className=\"tic-card\" variant={'borderless'}>\r\n        <Title level={3}>üêç Snake Xenzia</Title>\r\n\r\n        {!started ? (\r\n          <Space direction=\"vertical\" size=\"large\" style={{ marginTop: 24 }}>\r\n            {/* Grid size setup */}\r\n            <div>\r\n              <Text strong>Grid Size:</Text>\r\n              <InputNumber\r\n                min={10}\r\n                max={50}\r\n                value={gridSize}\r\n                onChange={(val) => setGridSize(val || 20)}\r\n                style={{ marginLeft: 10 }}\r\n              />\r\n            </div>\r\n\r\n            {/* Speed setup */}\r\n            <div>\r\n              <Text strong>Speed (ms):</Text>\r\n              <InputNumber\r\n                min={10}\r\n                max={500}\r\n                step={10}\r\n                value={speed}\r\n                onChange={(val) => setSpeed(val || 150)}\r\n                style={{ marginLeft: 10 }}\r\n              />\r\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\r\n                (Lower = faster)\r\n              </Text>\r\n            </div>\r\n\r\n            {/* Wall mode */}\r\n            <div>\r\n              <Text strong>Walls Enabled:</Text>\r\n              <Switch\r\n                checked={wallsEnabled}\r\n                onChange={setWallsEnabled}\r\n                style={{ marginLeft: 10 }}\r\n              />\r\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\r\n                {wallsEnabled ? 'Hit wall = Game over' : 'Wrap around mode'}\r\n              </Text>\r\n            </div>\r\n\r\n            <Button type=\"primary\" size=\"large\" onClick={startGame}>\r\n              Start Game\r\n            </Button>\r\n          </Space>\r\n        ) : (\r\n          <>\r\n            {/* Game Board */}\r\n            <div\r\n              className=\"snake-board\"\r\n              style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: `repeat(${gridSize}, 20px)`,\r\n                gap: 2,\r\n                marginTop: 20,\r\n                justifyContent: 'center',\r\n              }}\r\n            >\r\n              {Array.from({ length: gridSize }).map((_, rowIdx) =>\r\n                Array.from({ length: gridSize }).map((_, colIdx) => {\r\n                  const isSnake = snake.some((s) => s.x === colIdx && s.y === rowIdx);\r\n                  const isHead = snake.length && snake[0].x === colIdx && snake[0].y === rowIdx;\r\n                  const isFood = food.x === colIdx && food.y === rowIdx;\r\n\r\n                  return (\r\n                    <div\r\n                      key={`${rowIdx}-${colIdx}`}\r\n                      className=\"snake-cell\"\r\n                      style={{\r\n                        width: 20,\r\n                        height: 20,\r\n                        backgroundColor: isHead\r\n                          ? '#52c41a'\r\n                          : isSnake\r\n                          ? '#73d13d'\r\n                          : isFood\r\n                          ? '#ff7875'\r\n                          : '#f0f0f0',\r\n                        borderRadius: isFood ? '50%' : 2,\r\n                      }}\r\n                    />\r\n                  );\r\n                }),\r\n              )}\r\n            </div>\r\n\r\n            {/* Score */}\r\n            <div style={{ marginTop: 20 }}>\r\n              {!gameOver ? (\r\n                <Title level={4}>Score: {score}</Title>\r\n              ) : (\r\n                <Title level={4} style={{ color: '#ff4d4f' }}>\r\n                  Game Over! Final Score: {score}\r\n                </Title>\r\n              )}\r\n            </div>\r\n\r\n            {/* Directional Buttons */}\r\n            <div className=\"manual-controls\">\r\n              <div className=\"control-row\">\r\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('UP')}>\r\n                  ‚¨ÜÔ∏è / W\r\n                </Button>\r\n              </div>\r\n              <div className=\"control-row\">\r\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('LEFT')}>\r\n                  ‚¨ÖÔ∏è / A\r\n                </Button>\r\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('DOWN')}>\r\n                  ‚¨áÔ∏è / S\r\n                </Button>\r\n                <Button disabled={!started || gameOver} onClick={() => handleManualMove('RIGHT')}>\r\n                  ‚û°Ô∏è / D\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Control Buttons */}\r\n            <Space style={{ marginTop: 16 }}>\r\n              <Button onClick={startGame}>Restart</Button>\r\n              <Button danger onClick={resetGame}>\r\n                New Setup\r\n              </Button>\r\n            </Space>\r\n          </>\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnakeXenziaPage;\r\n"],"names":[],"mappings":"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"}