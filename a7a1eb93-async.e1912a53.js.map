{"version":3,"sources":["src/pages/Chess/index.tsx"],"sourcesContent":["// ChessGame.tsx\n// Single-file React + TypeScript chess component\n// - No external chess engine/library required (lightweight move generator)\n// - Features: two-player local play, move highlighting, move history, undo/redo, restart, auto-promotion to queen\n// - Limitations: simplified rules (no en-passant, no castling prioritised in this initial version). Check detection implemented; basic checkmate/stalemate detection included.\nimport { Button, Card, List, Typography } from 'antd';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport './styles.less';\n\nconst { Title, Text } = Typography;\n\n// --------------------------\n// Types\n// --------------------------\n\ntype Color = 'w' | 'b';\n\ntype PieceType = 'K' | 'Q' | 'R' | 'B' | 'N' | 'P';\n\ntype Piece = {\n  type: PieceType;\n  color: Color;\n  id: string; // unique id for React keys\n};\n\ntype Square = Piece | null;\n\ntype Coord = { r: number; c: number };\n\ntype Move = {\n  from: Coord;\n  to: Coord;\n  piece: Piece;\n  captured?: Piece | null;\n  promotion?: PieceType | null;\n};\n\n// --------------------------\n// Helpers\n// --------------------------\n\nconst cloneBoard = (board: Square[][]) => board.map((row) => row.map((p) => (p ? { ...p } : null)));\n\nconst inside = (r: number, c: number) => r >= 0 && r < 8 && c >= 0 && c < 8;\n\nconst opposite = (color: Color) => (color === 'w' ? 'b' : 'w');\n\nconst newId = (() => {\n  let i = 0;\n  return () => `p_${++i}`;\n})();\n\n// create initial standard chess starting position\nconst initialBoard = (): Square[][] => {\n  const empty: Square[][] = Array.from({ length: 8 }, () => Array(8).fill(null));\n  const backRank: PieceType[] = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'];\n  for (let c = 0; c < 8; c++) {\n    empty[0][c] = { type: backRank[c], color: 'b', id: newId() };\n    empty[1][c] = { type: 'P', color: 'b', id: newId() };\n    empty[6][c] = { type: 'P', color: 'w', id: newId() };\n    empty[7][c] = { type: backRank[c], color: 'w', id: newId() };\n  }\n  return empty;\n};\n\n// find king coordinate for color\nconst findKing = (board: Square[][], color: Color): Coord | null => {\n  for (let r = 0; r < 8; r++)\n    for (let c = 0; c < 8; c++)\n      if (board[r][c]?.type === 'K' && board[r][c]!.color === color) return { r, c };\n  return null;\n};\n\n// generate pseudo-legal moves for a piece at r,c (not considering self-check)\nconst generatePieceMoves = (board: Square[][], r: number, c: number): Coord[] => {\n  const p = board[r][c];\n  if (!p) return [];\n  const moves: Coord[] = [];\n  const color = p.color;\n\n  const addIf = (rr: number, cc: number) => {\n    if (!inside(rr, cc)) return;\n    const target = board[rr][cc];\n    if (!target || target.color !== color) moves.push({ r: rr, c: cc });\n  };\n\n  if (p.type === 'P') {\n    const dir = color === 'w' ? -1 : 1;\n    const startRow = color === 'w' ? 6 : 1;\n    // one forward\n    if (inside(r + dir, c) && !board[r + dir][c]) moves.push({ r: r + dir, c });\n    // two forward from start\n    if (r === startRow && !board[r + dir][c] && !board[r + 2 * dir][c])\n      moves.push({ r: r + 2 * dir, c });\n    // captures\n    for (const dc of [-1, 1]) {\n      const rr = r + dir;\n      const cc = c + dc;\n      if (inside(rr, cc) && board[rr][cc] && board[rr][cc]!.color !== color)\n        moves.push({ r: rr, c: cc });\n    }\n    // NOTE: en-passant omitted in this simplified implementation\n  }\n\n  if (p.type === 'N') {\n    const deltas = [\n      [2, 1],\n      [2, -1],\n      [-2, 1],\n      [-2, -1],\n      [1, 2],\n      [1, -2],\n      [-1, 2],\n      [-1, -2],\n    ];\n    for (const [dr, dc] of deltas) addIf(r + dr, c + dc);\n  }\n\n  if (p.type === 'B' || p.type === 'R' || p.type === 'Q') {\n    const dirs: number[][] = [];\n    if (p.type === 'B' || p.type === 'Q') dirs.push([1, 1], [1, -1], [-1, 1], [-1, -1]);\n    if (p.type === 'R' || p.type === 'Q') dirs.push([1, 0], [-1, 0], [0, 1], [0, -1]);\n    for (const [dr, dc] of dirs) {\n      let rr = r + dr;\n      let cc = c + dc;\n      while (inside(rr, cc)) {\n        if (!board[rr][cc]) moves.push({ r: rr, c: cc });\n        else {\n          if (board[rr][cc]!.color !== color) moves.push({ r: rr, c: cc });\n          break;\n        }\n        rr += dr;\n        cc += dc;\n      }\n    }\n  }\n\n  if (p.type === 'K') {\n    for (let dr = -1; dr <= 1; dr++)\n      for (let dc = -1; dc <= 1; dc++) if (dr !== 0 || dc !== 0) addIf(r + dr, c + dc);\n    // NOTE: castling omitted for simplicity\n  }\n\n  return moves;\n};\n\n// check if a square is attacked by color\nconst isSquareAttacked = (board: Square[][], sq: Coord, byColor: Color): boolean => {\n  // iterate all squares of byColor and see if any pseudo-move targets sq\n  for (let r = 0; r < 8; r++)\n    for (let c = 0; c < 8; c++) {\n      const p = board[r][c];\n      if (!p || p.color !== byColor) continue;\n      const moves = generatePieceMoves(board, r, c);\n      if (moves.some((m) => m.r === sq.r && m.c === sq.c)) return true;\n    }\n  return false;\n};\n\n// generate all legal moves for a color (filtering moves that leave king in check)\nconst generateAllLegalMoves = (board: Square[][], color: Color): Move[] => {\n  const out: Move[] = [];\n  for (let r = 0; r < 8; r++)\n    for (let c = 0; c < 8; c++) {\n      const p = board[r][c];\n      if (!p || p.color !== color) continue;\n      const targets = generatePieceMoves(board, r, c);\n      for (const t of targets) {\n        const newB = cloneBoard(board);\n        const moving = newB[r][c]!;\n        const captured = newB[t.r][t.c];\n        newB[t.r][t.c] = moving;\n        newB[r][c] = null;\n        // promotion auto-queen when pawn reaches last rank\n        let promotion: PieceType | null = null;\n        if (moving.type === 'P' && (t.r === 0 || t.r === 7)) {\n          newB[t.r][t.c] = { type: 'Q', color: moving.color, id: newId() };\n          promotion = 'Q';\n        }\n        // find king pos for color after move\n        const kingPos = findKing(newB, color);\n        const inCheck = kingPos ? isSquareAttacked(newB, kingPos, opposite(color)) : true;\n        if (!inCheck)\n          out.push({ from: { r, c }, to: t, piece: p, captured: captured ?? null, promotion });\n      }\n    }\n  return out;\n};\n\n// apply move to board and return new board\nconst applyMove = (board: Square[][], mv: Move) => {\n  const b = cloneBoard(board);\n  const p = b[mv.from.r][mv.from.c]!;\n  // handle promotion if specified\n  if (mv.promotion) b[mv.to.r][mv.to.c] = { type: mv.promotion, color: p.color, id: newId() };\n  else b[mv.to.r][mv.to.c] = { ...p };\n  b[mv.from.r][mv.from.c] = null;\n  return b;\n};\n\n// pretty algebraic for coordinates\nconst coordToAlg = (c: Coord) => `${'abcdefgh'[c.c]}${8 - c.r}`;\n\n// --------------------------\n// React component\n// --------------------------\n\nexport default function ChessGame(): JSX.Element {\n  const [board, setBoard] = useState<Square[][]>(() => initialBoard());\n  const [turn, setTurn] = useState<Color>('w');\n  const [selected, setSelected] = useState<Coord | null>(null);\n  const [legalMoves, setLegalMoves] = useState<Coord[]>([]);\n  const [history, setHistory] = useState<Move[]>([]);\n  const historyRef = useRef<Move[]>([]);\n  const futureRef = useRef<Move[]>([]);\n  const [orientation, setOrientation] = useState<'white' | 'black'>('white');\n\n  // generate legal moves for the selected piece\n  useEffect(() => {\n    if (!selected) return setLegalMoves([]);\n    const p = board[selected.r][selected.c];\n    if (!p || p.color !== turn) return setLegalMoves([]);\n    const moves = generateAllLegalMoves(board, turn).filter(\n      (m) => m.from.r === selected.r && m.from.c === selected.c,\n    );\n    setLegalMoves(moves.map((m) => m.to));\n  }, [selected, board, turn]);\n\n  // move by clicking destination\n  const handleSquareClick = (r: number, c: number) => {\n    const sq = board[r][c];\n    // if selecting own piece\n    if (sq && sq.color === turn) {\n      setSelected({ r, c });\n      return;\n    }\n\n    // if a destination is legal\n    const matched = legalMoves.some((m) => m.r === r && m.c === c);\n    if (selected && matched) {\n      const moves = generateAllLegalMoves(board, turn);\n      const mv = moves.find(\n        (m) => m.from.r === selected.r && m.from.c === selected.c && m.to.r === r && m.to.c === c,\n      );\n      if (!mv) return;\n      // apply\n      const newBoard = applyMove(board, mv);\n      setBoard(newBoard);\n      setTurn(opposite(turn));\n      setSelected(null);\n      // push history\n      historyRef.current.push(mv);\n      setHistory([...historyRef.current]);\n      futureRef.current = [];\n      setLegalMoves([]);\n    } else {\n      // clicking empty/other that is not legal deselects\n      setSelected(null);\n      setLegalMoves([]);\n    }\n  };\n\n  const undo = () => {\n    const h = historyRef.current;\n    if (!h.length) return;\n    const last = h.pop()!;\n    // revert by reconstructing board from history (simple approach)\n    // we'll replay moves from initialBoard up to remaining history\n    const b = initialBoard();\n    for (const m of h) {\n      const applied = applyMove(b, m);\n      // copy back\n      for (let r = 0; r < 8; r++) for (let c = 0; c < 8; c++) b[r][c] = applied[r][c];\n    }\n    futureRef.current.push(last);\n    setBoard(cloneBoard(b));\n    setHistory([...h]);\n    setTurn((t) => opposite(t));\n    setSelected(null);\n  };\n\n  const redo = () => {\n    const f = futureRef.current;\n    if (!f.length) return;\n    const next = f.pop()!;\n    historyRef.current.push(next);\n    // apply next on current board\n    const nb = applyMove(board, next);\n    setBoard(nb);\n    setHistory([...historyRef.current]);\n    setTurn((t) => opposite(t));\n    setSelected(null);\n  };\n\n  const restart = () => {\n    setBoard(initialBoard());\n    setTurn('w');\n    setSelected(null);\n    historyRef.current = [];\n    futureRef.current = [];\n    setHistory([]);\n  };\n\n  // compute game state: check, checkmate, stalemate\n  const gameState = useMemo(() => {\n    const kingPos = findKing(board, turn);\n    const inCheck = kingPos ? isSquareAttacked(board, kingPos, opposite(turn)) : false;\n    const legal = generateAllLegalMoves(board, turn);\n    if (inCheck && legal.length === 0) return { status: 'checkmate' as const, inCheck };\n    if (!inCheck && legal.length === 0) return { status: 'stalemate' as const, inCheck };\n    return { status: 'playing' as const, inCheck };\n  }, [board, turn]);\n\n  // helpers for UI: piece symbol\n  const pieceSymbol = (p: Piece) => {\n    const map: Record<PieceType, string> = { K: '♔', Q: '♕', R: '♖', B: '♗', N: '♘', P: '♙' };\n    const s = map[p.type];\n    return p.color === 'w'\n      ? s\n      : s\n          .replace('♔', '♚')\n          .replace('♕', '♛')\n          .replace('♖', '♜')\n          .replace('♗', '♝')\n          .replace('♘', '♞')\n          .replace('♙', '♟');\n  };\n\n  // quick hint: returns a legal move for current player (first available)\n  const hint = () => {\n    const legal = generateAllLegalMoves(board, turn);\n    if (!legal.length) return alert('No legal moves');\n    const m = legal[0];\n    alert(`Try: ${coordToAlg(m.from)} → ${coordToAlg(m.to)}`);\n  };\n\n  return (\n    <div className=\"chess-page\">\n      <div className=\"chess-header\">\n        <Title level={4}>Chess</Title>\n        <div className=\"chess-controls\">\n          <Text className=\"chess-turn\">\n            Turn: <strong>{turn === 'w' ? 'White' : 'Black'}</strong>\n            {gameState.inCheck && (\n              <Text type=\"danger\" className=\"ml-8\">\n                (Check)\n              </Text>\n            )}\n          </Text>\n          <Button\n            size=\"small\"\n            onClick={() => setOrientation((o) => (o === 'white' ? 'black' : 'white'))}\n          >\n            Flip\n          </Button>\n          <Button size=\"small\" onClick={restart}>\n            Restart\n          </Button>\n          <Button size=\"small\" onClick={undo}>\n            Undo\n          </Button>\n          <Button size=\"small\" onClick={redo}>\n            Redo\n          </Button>\n          <Button size=\"small\" onClick={hint}>\n            Hint\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"chess-content\">\n        <div className=\"chess-board-wrapper\">\n          <div className=\"chess-coordinates top\">\n            {['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map((f) => (\n              <div key={f} className=\"coord\">\n                {f}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"chess-row-with-coords\">\n            <div className=\"chess-coordinates side\">\n              {[8, 7, 6, 5, 4, 3, 2, 1].map((r) => (\n                <div key={r} className=\"coord\">\n                  {r}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"chess-board\">\n              {Array.from({ length: 8 }).map((_, rr) => {\n                const r = orientation === 'white' ? rr : 7 - rr;\n                return (\n                  <div key={r} className=\"chess-row\">\n                    {Array.from({ length: 8 }).map((_, cc) => {\n                      const c = orientation === 'white' ? cc : 7 - cc;\n                      const sq = board[r][c];\n                      const isSelected = selected && selected.r === r && selected.c === c;\n                      const isLegal = legalMoves.some((m) => m.r === r && m.c === c);\n                      const dark = (r + c) % 2 === 1;\n                      return (\n                        <div\n                          key={`${r}-${c}`}\n                          className={`chess-square ${dark ? 'dark' : 'light'} ${\n                            isSelected ? 'selected' : ''\n                          }`}\n                          onClick={() => handleSquareClick(r, c)}\n                        >\n                          {sq && <span className=\"chess-piece\">{pieceSymbol(sq)}</span>}\n                          {isLegal && <div className=\"move-dot\" />}\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <div className=\"chess-coordinates bottom\">\n            {['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].map((f) => (\n              <div key={f} className=\"coord\">\n                {f}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Card className=\"move-history\" title=\"Move History\" size=\"small\">\n          {history.length === 0 ? (\n            <Text type=\"secondary\">No moves yet</Text>\n          ) : (\n            <List\n              size=\"small\"\n              bordered\n              dataSource={history}\n              renderItem={(m) => (\n                <List.Item>\n                  {coordToAlg(m.from)} → {coordToAlg(m.to)}\n                  {m.captured ? ` × ${m.captured.type}` : ''}\n                  {m.promotion ? ` (=${m.promotion})` : ''}\n                </List.Item>\n              )}\n            />\n          )}\n          <div className=\"move-status\">\n            <Text>\n              Status: <strong>{gameState.status}</strong>\n            </Text>\n          </div>\n        </Card>\n      </div>\n\n      <Card size=\"small\" className=\"chess-notes\">\n        <Text strong>Notes:</Text>\n        <ul>\n          <li>Local two-player game (alternate turns).</li>\n          <li>Auto-promotion to Queen when pawn reaches last rank.</li>\n          <li>Castling and en-passant are not supported in this version.</li>\n          <li>If you'd like AI opponent, castling, or en-passant, tell me and I’ll add them.</li>\n        </ul>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":"gOAgDM,uCA+JN,+CAAwB,kIAzM6B,YAGrD,GAAM,CAAE,MAAA,CAAK,CAAE,KAAA,CAAI,CAAE,CAAG,SAAU,CAgC5B,EAAa,AAAC,GAAsB,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAO,EAAI,CAAE,GAAG,CAAC,AAAC,EAAI,OAEtF,EAAS,CAAC,EAAW,IAAc,GAAK,GAAK,EAAI,GAAK,GAAK,GAAK,EAAI,EAEpE,EAAW,AAAC,GAAkB,AAAU,MAAV,EAAgB,IAAM,IAEpD,GACA,EAAI,EACD,IAAM,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAInB,EAAe,KACnB,IAAM,EAAoB,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,IAAM,MAAM,GAAG,IAAI,CAAC,OAClE,EAAwB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CACtE,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,KAAM,CAAQ,CAAC,EAAE,CAAE,MAAO,IAAK,GAAI,GAAQ,EAC3D,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,KAAM,IAAK,MAAO,IAAK,GAAI,GAAQ,EACnD,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,KAAM,IAAK,MAAO,IAAK,GAAI,GAAQ,EACnD,CAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAE,KAAM,CAAQ,CAAC,EAAE,CAAE,MAAO,IAAK,GAAI,GAAQ,EAE7D,OAAO,EACT,EAGM,EAAW,CAAC,EAAmB,SAG3B,EAFR,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAI,SAAA,EAAA,CAAK,CAAC,EAAE,CAAC,EAAE,YAAX,SAAA,EAAa,IAAI,IAAK,KAAO,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,KAAK,GAAK,EAAO,MAAO,CAAE,EAAA,EAAG,EAAA,CAAE,EACjF,OAAO,KACT,EAGM,EAAqB,CAAC,EAAmB,EAAW,KACxD,IAAM,EAAI,CAAK,CAAC,EAAE,CAAC,EAAE,CACrB,GAAI,CAAC,EAAG,MAAO,EAAE,CACjB,IAAM,EAAiB,EAAE,CACnB,EAAQ,EAAE,KAAK,CAEf,EAAQ,CAAC,EAAY,KACzB,GAAI,CAAC,EAAO,EAAI,GAAK,OACrB,IAAM,EAAS,CAAK,CAAC,EAAG,CAAC,EAAG,CACvB,GAAU,EAAO,KAAK,GAAK,GAAO,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAG,CAAG,GACnE,EAEA,GAAI,AAAW,MAAX,EAAE,IAAI,CAAU,CAClB,IAAM,EAAM,AAAU,MAAV,EAAgB,GAAK,EAQjC,IAAK,IAAM,KALP,EAAO,EAAI,EAAK,IAAM,CAAC,CAAK,CAAC,EAAI,EAAI,CAAC,EAAE,EAAE,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAK,EAAA,CAAE,GAErE,IAJa,CAAA,AAAU,MAAV,EAAgB,EAAI,CAAA,GAId,CAAK,CAAC,EAAI,EAAI,CAAC,EAAE,EAAK,CAAK,CAAC,EAAI,EAAI,EAAI,CAAC,EAAE,EAChE,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAI,EAAK,EAAA,CAAE,GAEhB,CAAC,GAAI,EAAE,EAAE,CACxB,IAAM,EAAK,EAAI,EACT,EAAK,EAAI,EACX,EAAO,EAAI,IAAO,CAAK,CAAC,EAAG,CAAC,EAAG,EAAI,CAAK,CAAC,EAAG,CAAC,EAAG,CAAE,KAAK,GAAK,GAC9D,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAG,CAAG,GAC9B,CAEF,CAEA,GAAI,AAAW,MAAX,EAAE,IAAI,CAWR,IAAK,GAAM,CAAC,EAAI,EAAG,EAVJ,CACb,CAAC,EAAG,EAAE,CACN,CAAC,EAAG,GAAG,CACP,CAAC,GAAI,EAAE,CACP,CAAC,GAAI,GAAG,CACR,CAAC,EAAG,EAAE,CACN,CAAC,EAAG,GAAG,CACP,CAAC,GAAI,EAAE,CACP,CAAC,GAAI,GAAG,CACT,CAC8B,EAAM,EAAI,EAAI,EAAI,GAGnD,GAAI,AAAW,MAAX,EAAE,IAAI,EAAY,AAAW,MAAX,EAAE,IAAI,EAAY,AAAW,MAAX,EAAE,IAAI,CAAU,CACtD,IAAM,EAAmB,EAAE,CAG3B,IAAK,GAAM,CAAC,EAAI,EAAG,GAFf,CAAA,AAAW,MAAX,EAAE,IAAI,EAAY,AAAW,MAAX,EAAE,IAAI,AAAO,GAAG,EAAK,IAAI,CAAC,CAAC,EAAG,EAAE,CAAE,CAAC,EAAG,GAAG,CAAE,CAAC,GAAI,EAAE,CAAE,CAAC,GAAI,GAAG,EAC9E,CAAA,AAAW,MAAX,EAAE,IAAI,EAAY,AAAW,MAAX,EAAE,IAAI,AAAO,GAAG,EAAK,IAAI,CAAC,CAAC,EAAG,EAAE,CAAE,CAAC,GAAI,EAAE,CAAE,CAAC,EAAG,EAAE,CAAE,CAAC,EAAG,GAAG,EACzD,GAAM,CAC3B,IAAI,EAAK,EAAI,EACT,EAAK,EAAI,EACb,KAAO,EAAO,EAAI,IAAK,CACrB,GAAK,CAAK,CAAC,EAAG,CAAC,EAAG,CACb,CACC,CAAK,CAAC,EAAG,CAAC,EAAG,CAAE,KAAK,GAAK,GAAO,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAG,CAAG,GAC9D,MACF,CAJoB,EAAM,IAAI,CAAC,CAAE,EAAG,EAAI,EAAG,CAAG,GAK9C,GAAM,EACN,GAAM,EACR,CACF,CACF,CAEA,GAAI,AAAW,MAAX,EAAE,IAAI,CACR,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IACzB,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IAAU,CAAA,AAAO,IAAP,GAAY,AAAO,IAAP,CAAO,GAAG,EAAM,EAAI,EAAI,EAAI,GAIjF,OAAO,EACT,EAGM,EAAmB,CAAC,EAAmB,EAAW,KAEtD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAI,CAAK,CAAC,EAAE,CAAC,EAAE,CACrB,GAAI,AAAC,GAAK,EAAE,KAAK,GAAK,GAElB,AADU,EAAmB,EAAO,EAAG,GACjC,IAAI,CAAC,AAAC,GAAM,EAAE,CAAC,GAAK,EAAG,CAAC,EAAI,EAAE,CAAC,GAAK,EAAG,CAAC,EAAG,MAAO,CAAA,EAC9D,CACF,MAAO,CAAA,EACT,EAGM,EAAwB,CAAC,EAAmB,KAChD,IAAM,EAAc,EAAE,CACtB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAI,CAAK,CAAC,EAAE,CAAC,EAAE,CACrB,GAAI,AAAC,GAAK,EAAE,KAAK,GAAK,EAEtB,IAAK,IAAM,KADK,EAAmB,EAAO,EAAG,GACpB,CACvB,IAAM,EAAO,EAAW,GAClB,EAAS,CAAI,CAAC,EAAE,CAAC,EAAE,CACnB,EAAW,CAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAC/B,CAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAG,EACjB,CAAI,CAAC,EAAE,CAAC,EAAE,CAAG,KAEb,IAAI,EAA8B,KACd,MAAhB,EAAO,IAAI,EAAa,CAAA,AAAQ,IAAR,EAAE,CAAC,EAAU,AAAQ,IAAR,EAAE,CAAC,AAAK,IAC/C,CAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAG,CAAE,KAAM,IAAK,MAAO,EAAO,KAAK,CAAE,GAAI,GAAQ,EAC/D,EAAY,KAGd,IAAM,EAAU,EAAS,EAAM,IACf,GAAU,EAAiB,EAAM,EAAS,EAAS,KAEjE,EAAI,IAAI,CAAC,CAAE,KAAM,CAAE,EAAA,EAAG,EAAA,CAAE,EAAG,GAAI,EAAG,MAAO,EAAG,SAAU,GAAY,KAAM,UAAA,CAAU,GACtF,CACF,CACF,OAAO,EACT,EAGM,EAAY,CAAC,EAAmB,KACpC,IAAM,EAAI,EAAW,GACf,EAAI,CAAC,CAAC,EAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAG,IAAI,CAAC,CAAC,CAAC,CAKjC,OAHI,EAAG,SAAS,CAAE,CAAC,CAAC,EAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAG,EAAE,CAAC,CAAC,CAAC,CAAG,CAAE,KAAM,EAAG,SAAS,CAAE,MAAO,EAAE,KAAK,CAAE,GAAI,GAAQ,EACrF,CAAC,CAAC,EAAG,EAAE,CAAC,CAAC,CAAC,CAAC,EAAG,EAAE,CAAC,CAAC,CAAC,CAAG,CAAE,GAAG,CAAC,AAAC,EAClC,CAAC,CAAC,EAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAG,IAAI,CAAC,CAAC,CAAC,CAAG,KACnB,EACT,EAGM,EAAa,AAAC,GAAa,CAAC,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAI,EAAE,CAAC,CAAC,CAAC,CAMhD,SAAS,IACtB,GAAM,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAa,IAAM,KAC/C,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAQ,KAClC,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAe,MACjD,CAAC,EAAY,EAAc,CAAG,GAAA,UAAQ,EAAU,EAAE,EAClD,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAS,EAAE,EAC3C,EAAa,GAAA,QAAM,EAAS,EAAE,EAC9B,EAAY,GAAA,QAAM,EAAS,EAAE,EAC7B,CAAC,EAAa,EAAe,CAAG,GAAA,UAAQ,EAAoB,SAGlE,GAAA,WAAS,EAAC,KACR,GAAI,CAAC,EAAU,OAAO,EAAc,EAAE,EACtC,IAAM,EAAI,CAAK,CAAC,EAAS,CAAC,CAAC,CAAC,EAAS,CAAC,CAAC,CACvC,GAAI,CAAC,GAAK,EAAE,KAAK,GAAK,EAAM,OAAO,EAAc,EAAE,EAInD,EAAc,AAHA,EAAsB,EAAO,GAAM,MAAM,CACrD,AAAC,GAAM,EAAE,IAAI,CAAC,CAAC,GAAK,EAAS,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAK,EAAS,CAAC,EAEvC,GAAG,CAAC,AAAC,GAAM,EAAE,EAAE,GACrC,EAAG,CAAC,EAAU,EAAO,EAAK,EAG1B,IAAM,EAAoB,CAAC,EAAW,KACpC,IAAM,EAAK,CAAK,CAAC,EAAE,CAAC,EAAE,CAEtB,GAAI,GAAM,EAAG,KAAK,GAAK,EAAM,CAC3B,EAAY,CAAE,EAAA,EAAG,CAAE,GACnB,OACF,CAGA,IAAM,EAAU,EAAW,IAAI,CAAC,AAAC,GAAM,EAAE,CAAC,GAAK,GAAK,EAAE,CAAC,GAAK,GAC5D,GAAI,GAAY,EAAS,CAEvB,IAAM,EAAK,AADG,EAAsB,EAAO,GAC1B,IAAI,CACnB,AAAC,GAAM,EAAE,IAAI,CAAC,CAAC,GAAK,EAAS,CAAC,EAAI,EAAE,IAAI,CAAC,CAAC,GAAK,EAAS,CAAC,EAAI,EAAE,EAAE,CAAC,CAAC,GAAK,GAAK,EAAE,EAAE,CAAC,CAAC,GAAK,GAE1F,GAAI,CAAC,EAAI,OAGT,EADiB,EAAU,EAAO,IAElC,EAAQ,EAAS,IACjB,EAAY,MAEZ,EAAW,OAAO,CAAC,IAAI,CAAC,GACxB,EAAW,IAAI,EAAW,OAAO,CAAC,EAClC,EAAU,OAAO,CAAG,EAAE,CACtB,EAAc,EAAE,EAClB,MAEE,EAAY,MACZ,EAAc,EAAE,EAEpB,EA4CM,EAAY,GAAA,SAAO,EAAC,KACxB,IAAM,EAAU,EAAS,EAAO,GAC1B,EAAU,EAAA,GAAU,EAAiB,EAAO,EAAS,EAAS,IAC9D,EAAQ,EAAsB,EAAO,UAC3C,AAAI,GAAW,AAAiB,IAAjB,EAAM,MAAM,CAAe,CAAE,OAAQ,YAAsB,QAAA,CAAQ,EAC9E,AAAC,GAAW,AAAiB,IAAjB,EAAM,MAAM,CACrB,CAAE,OAAQ,UAAoB,QAAA,CAAQ,EADF,CAAE,OAAQ,YAAsB,QAAA,CAAQ,EAErF,EAAG,CAAC,EAAO,EAAK,EAGV,EAAc,AAAC,IAEnB,IAAM,EAAI,AAD6B,CAAE,EAAG,SAAK,EAAG,SAAK,EAAG,SAAK,EAAG,SAAK,EAAG,SAAK,EAAG,QAAI,CAC3E,CAAC,EAAE,IAAI,CAAC,CACrB,MAAO,AAAY,MAAZ,EAAE,KAAK,CACV,EACA,EACG,OAAO,CAAC,SAAK,UACb,OAAO,CAAC,SAAK,UACb,OAAO,CAAC,SAAK,UACb,OAAO,CAAC,SAAK,UACb,OAAO,CAAC,SAAK,UACb,OAAO,CAAC,SAAK,UACtB,EAUA,MACE,WAAC,OAAI,UAAU,uBACb,WAAC,OAAI,UAAU,yBACb,UAAC,GAAM,MAAO,WAAG,UACjB,WAAC,OAAI,UAAU,2BACb,WAAC,GAAK,UAAU,uBAAa,SACrB,UAAC,mBAAQ,AAAS,MAAT,EAAe,QAAU,UACvC,EAAU,OAAO,EAChB,UAAC,GAAK,KAAK,SAAS,UAAU,gBAAO,eAKzC,UAAC,SAAM,EACL,KAAK,QACL,QAAS,IAAM,EAAe,AAAC,GAAO,AAAM,UAAN,EAAgB,QAAU,kBACjE,SAGD,UAAC,SAAM,EAAC,KAAK,QAAQ,QA7Db,KACd,EAAS,KACT,EAAQ,KACR,EAAY,MACZ,EAAW,OAAO,CAAG,EAAE,CACvB,EAAU,OAAO,CAAG,EAAE,CACtB,EAAW,EAAE,EACf,WAsD+C,YAGvC,UAAC,SAAM,EAAC,KAAK,QAAQ,QAhGhB,KACX,IAAM,EAAI,EAAW,OAAO,CAC5B,GAAI,CAAC,EAAE,MAAM,CAAE,OACf,IAAM,EAAO,EAAE,GAAG,GAGZ,EAAI,IACV,IAAK,IAAM,KAAK,EAAG,CACjB,IAAM,EAAU,EAAU,EAAG,GAE7B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAO,CAAC,EAAE,CAAC,EAAE,CACjF,CACA,EAAU,OAAO,CAAC,IAAI,CAAC,GACvB,EAAS,EAAW,IACpB,EAAW,IAAI,EAAE,EACjB,EAAQ,AAAC,GAAM,EAAS,IACxB,EAAY,MACd,WA+E4C,SAGpC,UAAC,SAAM,EAAC,KAAK,QAAQ,QAhFhB,KACX,IAAM,EAAI,EAAU,OAAO,CAC3B,GAAI,CAAC,EAAE,MAAM,CAAE,OACf,IAAM,EAAO,EAAE,GAAG,GAClB,EAAW,OAAO,CAAC,IAAI,CAAC,GAGxB,EADW,EAAU,EAAO,IAE5B,EAAW,IAAI,EAAW,OAAO,CAAC,EAClC,EAAQ,AAAC,GAAM,EAAS,IACxB,EAAY,MACd,WAqE4C,SAGpC,UAAC,SAAM,EAAC,KAAK,QAAQ,QAnChB,KACX,IAAM,EAAQ,EAAsB,EAAO,GAC3C,GAAI,CAAC,EAAM,MAAM,CAAE,OAAO,MAAM,kBAChC,IAAM,EAAI,CAAK,CAAC,EAAE,CAClB,MAAM,CAAC,KAAK,EAAE,EAAW,EAAE,IAAI,EAAE,UAAG,EAAE,EAAW,EAAE,EAAE,EAAE,CAAC,EAC1D,WA8B4C,eAMxC,WAAC,OAAI,UAAU,0BACb,WAAC,OAAI,UAAU,gCACb,UAAC,OAAI,UAAU,iCACZ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CAAC,GAAG,CAAC,AAAC,GAC7C,UAAC,OAAY,UAAU,iBACpB,GADO,MAMd,WAAC,OAAI,UAAU,kCACb,UAAC,OAAI,UAAU,kCACZ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,CAAC,GAAG,CAAC,AAAC,GAC7B,UAAC,OAAY,UAAU,iBACpB,GADO,MAMd,UAAC,OAAI,UAAU,uBACZ,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,GAAG,GAAG,CAAC,CAAC,EAAG,KACjC,IAAM,EAAI,AAAgB,UAAhB,EAA0B,EAAK,EAAI,EAC7C,MACE,UAAC,OAAY,UAAU,qBACpB,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,GAAG,GAAG,CAAC,CAAC,EAAG,KACjC,IAAM,EAAI,AAAgB,UAAhB,EAA0B,EAAK,EAAI,EACvC,EAAK,CAAK,CAAC,EAAE,CAAC,EAAE,CAChB,EAAa,GAAY,EAAS,CAAC,GAAK,GAAK,EAAS,CAAC,GAAK,EAC5D,EAAU,EAAW,IAAI,CAAC,AAAC,GAAM,EAAE,CAAC,GAAK,GAAK,EAAE,CAAC,GAAK,GACtD,EAAO,AAAC,CAAA,EAAI,CAAA,EAAK,GAAM,EAC7B,MACE,WAAC,OAEC,UAAW,CAAC,aAAa,EAAE,EAAO,OAAS,QAAQ,CAAC,EAClD,EAAa,WAAa,GAC3B,CAAC,CACF,QAAS,IAAM,EAAkB,EAAG,aAEnC,GAAM,UAAC,QAAK,UAAU,uBAAe,EAAY,KACjD,GAAW,UAAC,OAAI,UAAU,eAPtB,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAUtB,IAnBQ,GAsBd,QAIJ,UAAC,OAAI,UAAU,oCACZ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CAAC,GAAG,CAAC,AAAC,GAC7C,UAAC,OAAY,UAAU,iBACpB,GADO,SAOhB,WAAC,SAAI,EAAC,UAAU,eAAe,MAAM,eAAe,KAAK,kBACtD,AAAmB,IAAnB,EAAQ,MAAM,CACb,UAAC,GAAK,KAAK,qBAAY,iBAEvB,UAAC,SAAI,EACH,KAAK,QACL,QAAQ,IACR,WAAY,EACZ,WAAY,AAAC,GACX,WAAC,SAAI,CAAC,IAAI,YACP,EAAW,EAAE,IAAI,EAAE,WAAI,EAAW,EAAE,EAAE,EACtC,EAAE,QAAQ,CAAG,CAAC,MAAG,EAAE,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAG,GACvC,EAAE,SAAS,CAAG,CAAC,GAAG,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAG,QAK9C,UAAC,OAAI,UAAU,uBACb,WAAC,aAAK,WACI,UAAC,mBAAQ,EAAU,MAAM,cAMzC,WAAC,SAAI,EAAC,KAAK,QAAQ,UAAU,wBAC3B,UAAC,GAAK,MAAM,aAAC,WACb,WAAC,gBACC,UAAC,eAAG,6CACJ,UAAC,eAAG,yDACJ,UAAC,eAAG,+DACJ,UAAC,eAAG,iGAKd"}