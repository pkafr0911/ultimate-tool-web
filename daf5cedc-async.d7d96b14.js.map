{"version":3,"sources":["node_modules/@ant-design/icons/es/icons/ReloadOutlined.js","src/pages/Minesweeper/index.tsx"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ReloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/ReloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar ReloadOutlined = function ReloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: ReloadOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(ReloadOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'ReloadOutlined';\n}\nexport default RefIcon;","// --- Import React, Ant Design components, and icons ---\nimport { ReloadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Card,\n  Col,\n  InputNumber,\n  Row,\n  Select,\n  Space,\n  Switch,\n  Typography,\n  message,\n} from 'antd';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport './styles.less'; // custom stylesheet for Minesweeper\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\n// ========================================================\n// üß© Types & Constants\n// ========================================================\n\n// Each cell on the board\ntype Cell = {\n  r: number; // row index\n  c: number; // column index\n  mined: boolean; // whether it contains a mine\n  revealed: boolean; // whether the cell has been revealed\n  flagged: boolean; // whether the cell has been flagged\n  adjacent: number; // number of surrounding mines\n};\n\n// Difficulty options\ntype Difficulty = 'beginner' | 'intermediate' | 'advanced' | 'custom';\n\n// Predefined board sizes for each difficulty\nconst PRESETS: Record<string, { rows: number; cols: number; mines: number }> = {\n  beginner: { rows: 9, cols: 9, mines: 10 },\n  intermediate: { rows: 16, cols: 16, mines: 40 },\n  advanced: { rows: 16, cols: 30, mines: 99 },\n};\n\n// Helper: limit value between two bounds\nconst clamp = (v: number, a: number, b: number) => Math.max(a, Math.min(b, v));\n\nconst MinesweeperPage: React.FC = () => {\n  // ========================================================\n  // ‚öôÔ∏è Settings (user-configurable)\n  // ========================================================\n  const [difficulty, setDifficulty] = useState<Difficulty>('beginner');\n  const [rows, setRows] = useState<number>(9);\n  const [cols, setCols] = useState<number>(9);\n  const [mines, setMines] = useState<number>(10);\n  const [showTips, setShowTips] = useState<boolean>(true);\n  const [tapMode, setTapMode] = useState<'reveal' | 'flag'>('reveal'); // toggle mode for mobile taps\n\n  // ========================================================\n  // üéÆ Game State\n  // ========================================================\n  const [board, setBoard] = useState<Cell[][]>([]); // 2D grid of cells\n  const [started, setStarted] = useState<boolean>(false);\n  const [gameOver, setGameOver] = useState<boolean>(false);\n  const [won, setWon] = useState<boolean>(false);\n  const [flagsLeft, setFlagsLeft] = useState<number>(0);\n  const [timeSec, setTimeSec] = useState<number>(0);\n\n  // Refs for timer and first-click detection\n  const timerRef = useRef<number | null>(null);\n  const firstClickRef = useRef<boolean>(true);\n\n  // Check in using Mobile\n  const [isMobile, setIsMobile] = useState(false);\n\n  useEffect(() => {\n    const handleResize = () => setIsMobile(window.innerWidth <= 768);\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  // ========================================================\n  // üì± Responsive cell size calculation\n  // ========================================================\n  const cellSize = useMemo(() => {\n    if (isMobile) {\n      if (cols <= 9) return 32;\n      if (cols <= 16) return 24;\n      if (cols <= 24) return 18;\n      return 16;\n    } else {\n      if (cols <= 9) return 40;\n      if (cols <= 16) return 32;\n      if (cols <= 24) return 24;\n      return 18;\n    }\n  }, [cols, isMobile]);\n\n  // ========================================================\n  // üß≠ Sync preset difficulty values\n  // ========================================================\n  useEffect(() => {\n    if (difficulty === 'custom') return;\n    const p = PRESETS[difficulty];\n    if (!p) return;\n    setRows(p.rows);\n    setCols(p.cols);\n    setMines(p.mines);\n  }, [difficulty]);\n\n  // Clamp custom values to valid ranges\n  useEffect(() => {\n    setRows((r) => clamp(r, 9, 30));\n    setCols((c) => clamp(c, 9, 30));\n    const maxMines = Math.max(10, Math.min(668, rows * cols - 1));\n    setMines((m) => clamp(m, 10, maxMines));\n  }, [rows, cols]);\n\n  // ========================================================\n  // üß± Helper: create an empty board\n  // ========================================================\n  const createEmptyBoard = (R: number, C: number): Cell[][] =>\n    Array.from({ length: R }, (_, r) =>\n      Array.from({ length: C }, (_, c) => ({\n        r,\n        c,\n        mined: false,\n        revealed: false,\n        flagged: false,\n        adjacent: 0,\n      })),\n    );\n\n  // ========================================================\n  // üí£ Place mines (after first click)\n  // Ensures first click and its neighbors are always safe.\n  // ========================================================\n  const placeMines = (b: Cell[][], safeR: number, safeC: number, minesToPlace: number) => {\n    const R = b.length;\n    const C = b[0].length;\n    const coords: [number, number][] = [];\n\n    // Exclude safe cell and neighbors\n    for (let r = 0; r < R; r++) {\n      for (let c = 0; c < C; c++) {\n        if (Math.abs(r - safeR) <= 1 && Math.abs(c - safeC) <= 1) continue;\n        coords.push([r, c]);\n      }\n    }\n\n    // Shuffle coordinates\n    for (let i = coords.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [coords[i], coords[j]] = [coords[j], coords[i]];\n    }\n\n    // Place mines in first N shuffled cells\n    const chosen = coords.slice(0, minesToPlace);\n    chosen.forEach(([r, c]) => (b[r][c].mined = true));\n\n    // Compute numbers (adjacent mine count)\n    const dirs = [-1, 0, 1];\n    for (let r = 0; r < R; r++) {\n      for (let c = 0; c < C; c++) {\n        if (b[r][c].mined) {\n          b[r][c].adjacent = -1;\n          continue;\n        }\n        let count = 0;\n        for (let dr of dirs)\n          for (let dc of dirs) {\n            if (dr === 0 && dc === 0) continue;\n            const nr = r + dr;\n            const nc = c + dc;\n            if (nr >= 0 && nr < R && nc >= 0 && nc < C && b[nr][nc].mined) count++;\n          }\n        b[r][c].adjacent = count;\n      }\n    }\n  };\n\n  // ========================================================\n  // ‚ñ∂Ô∏è Start or restart game\n  // ========================================================\n  const startGame = () => {\n    const R = clamp(rows, 9, 30);\n    const C = clamp(cols, 9, 30);\n    const maxMines = Math.max(10, Math.min(668, R * C - 1));\n    const M = clamp(mines, 10, maxMines);\n\n    // Apply validated values\n    setRows(R);\n    setCols(C);\n    setMines(M);\n\n    // Reset all runtime states\n    clearTimer();\n    firstClickRef.current = true;\n    setStarted(true);\n    setGameOver(false);\n    setWon(false);\n    setFlagsLeft(M);\n    setTimeSec(0);\n    setBoard(createEmptyBoard(R, C));\n    message.success('New game ready ‚Äî click a cell to start (first click is safe).');\n  };\n\n  // ========================================================\n  // ‚è± Timer controls\n  // ========================================================\n  const clearTimer = () => {\n    if (timerRef.current) {\n      window.clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  };\n\n  const startTimer = () => {\n    if (timerRef.current) return;\n    timerRef.current = window.setInterval(() => setTimeSec((s) => s + 1), 1000);\n  };\n\n  // ========================================================\n  // üîç Reveal logic (with flood fill for empty zones)\n  // ========================================================\n  const revealCell = (r: number, c: number, bIn?: Cell[][]) => {\n    if (gameOver) return;\n    const b = bIn ? bIn : board.map((row) => row.map((cell) => ({ ...cell })));\n    const cell = b[r][c];\n    if (!cell || cell.revealed || cell.flagged) return b;\n\n    cell.revealed = true;\n\n    // üí• Mine hit\n    if (cell.mined) {\n      for (let rr = 0; rr < b.length; rr++)\n        for (let cc = 0; cc < b[0].length; cc++) if (b[rr][cc].mined) b[rr][cc].revealed = true;\n      setBoard(b);\n      setGameOver(true);\n      setWon(false);\n      clearTimer();\n      message.error('üí• Boom! You hit a mine.');\n      return b;\n    }\n\n    // üåä Flood fill empty area\n    if (cell.adjacent === 0) {\n      const R = b.length;\n      const C = b[0].length;\n      const stack: [number, number][] = [[r, c]];\n      const dirs = [-1, 0, 1];\n      while (stack.length) {\n        const [cr, cc] = stack.pop()!;\n        for (let dr of dirs)\n          for (let dc of dirs) {\n            const nr = cr + dr;\n            const nc = cc + dc;\n            if (nr < 0 || nc < 0 || nr >= R || nc >= C) continue;\n            const neigh = b[nr][nc];\n            if (!neigh || neigh.revealed || neigh.flagged) continue;\n            neigh.revealed = true;\n            if (neigh.adjacent === 0 && !neigh.mined) stack.push([nr, nc]);\n          }\n      }\n    }\n\n    setBoard(b);\n    return b;\n  };\n\n  // ========================================================\n  // üèÜ Check win condition\n  // ========================================================\n  const checkWinCondition = (b: Cell[][]) =>\n    b.every((row) => row.every((cell) => cell.mined || cell.revealed));\n\n  // ========================================================\n  // üëÜ Left click: reveal cell\n  // ========================================================\n  const onLeftClick = (r: number, c: number) => {\n    if (gameOver || won) return;\n\n    // On first click ‚Üí place mines safely\n    let b = board;\n    if (firstClickRef.current) {\n      b = board.map((row) => row.map((cell) => ({ ...cell })));\n      placeMines(b, r, c, mines);\n      firstClickRef.current = false;\n      startTimer();\n    }\n\n    const after = revealCell(r, c, b);\n    if (!after) return;\n\n    if (!gameOver && checkWinCondition(after)) {\n      setWon(true);\n      setGameOver(true);\n      clearTimer();\n      setFlagsLeft((f) => Math.max(0, f));\n      message.success('üéâ You cleared the board ‚Äî you win!');\n    }\n  };\n\n  // ========================================================\n  // üè¥ Right click: toggle flag\n  // ========================================================\n  const onRightClick = (e: React.MouseEvent, r: number, c: number) => {\n    e.preventDefault();\n    if (!started || gameOver || won) return;\n    const b = board.map((row) => row.map((cell) => ({ ...cell })));\n    const cell = b[r][c];\n    if (cell.revealed) return;\n\n    // toggle flag\n    if (cell.flagged) {\n      cell.flagged = false;\n      setFlagsLeft((f) => f + 1);\n    } else {\n      if (flagsLeft <= 0) return message.warning('No flags left');\n      cell.flagged = true;\n      setFlagsLeft((f) => f - 1);\n    }\n    setBoard(b);\n\n    // check for win after flagging\n    if (checkWinCondition(b)) {\n      setWon(true);\n      setGameOver(true);\n      clearTimer();\n      message.success('üéâ You cleared the board ‚Äî you win!');\n    }\n  };\n\n  // ========================================================\n  // ‚õèÔ∏è Chording: reveal neighbors if adjacent flags match number\n  // ========================================================\n  const onChord = (r: number, c: number) => {\n    if (gameOver || won) return;\n    const cell = board[r][c];\n    if (!cell || !cell.revealed || cell.adjacent <= 0) return;\n\n    // count flagged neighbors\n    const R = board.length;\n    const C = board[0].length;\n    let flagged = 0;\n    const neighs: [number, number][] = [];\n\n    for (let dr = -1; dr <= 1; dr++)\n      for (let dc = -1; dc <= 1; dc++) {\n        if (dr === 0 && dc === 0) continue;\n        const nr = r + dr;\n        const nc = c + dc;\n        if (nr < 0 || nc < 0 || nr >= R || nc >= C) continue;\n        neighs.push([nr, nc]);\n        if (board[nr][nc].flagged) flagged++;\n      }\n\n    if (flagged !== cell.adjacent) return;\n\n    // reveal unflagged neighbors\n    let b = board.map((row) => row.map((cell) => ({ ...cell })));\n    for (const [nr, nc] of neighs) {\n      if (!b[nr][nc].flagged && !b[nr][nc].revealed) {\n        const res = revealCell(nr, nc, b);\n        b = res || b;\n        if (gameOver) break;\n      }\n    }\n\n    setBoard(b);\n    if (!gameOver && checkWinCondition(b)) {\n      setWon(true);\n      setGameOver(true);\n      clearTimer();\n      message.success('üéâ You cleared the board ‚Äî you win!');\n    }\n  };\n\n  // ========================================================\n  // üßπ Reset helper\n  // ========================================================\n  const resetAll = () => {\n    clearTimer();\n    setStarted(false);\n    setBoard([]);\n    setGameOver(false);\n    setWon(false);\n    setFlagsLeft(0);\n    setTimeSec(0);\n    firstClickRef.current = true;\n    message.info('Game reset. Choose settings and start.');\n  };\n\n  // Clear timer on unmount\n  useEffect(() => () => clearTimer(), []);\n\n  // ========================================================\n  // üé® Render: Cell component\n  // ========================================================\n  const CellView: React.FC<{ cell: Cell }> = ({ cell }) => {\n    const cls = ['ms-cell'];\n    if (cell.revealed) cls.push('ms-revealed');\n    if (cell.flagged) cls.push('ms-flagged');\n    if (cell.mined && cell.revealed) cls.push('ms-mine');\n\n    const onClick = (e: React.MouseEvent) => {\n      e.preventDefault();\n      if (tapMode === 'reveal') onLeftClick(cell.r, cell.c);\n      else onRightClick(e, cell.r, cell.c);\n    };\n\n    return (\n      <div\n        className={cls.join(' ')}\n        style={{\n          width: cellSize,\n          height: cellSize,\n          lineHeight: `${cellSize}px`,\n          fontSize: Math.floor(cellSize * 0.55),\n        }}\n        onClick={onClick}\n        onContextMenu={(e) => onRightClick(e, cell.r, cell.c)}\n        onDoubleClick={() => onChord(cell.r, cell.c)}\n      >\n        {/* Display content: mine, number, or flag */}\n        {cell.revealed ? (\n          cell.mined ? (\n            'üí£'\n          ) : cell.adjacent > 0 ? (\n            <span className={`ms-num ms-num-${cell.adjacent}`}>{cell.adjacent}</span>\n          ) : (\n            ''\n          )\n        ) : cell.flagged ? (\n          'üö©'\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  };\n\n  // ========================================================\n  // üß© Main Page Layout\n  // ========================================================\n  return (\n    <div className=\"ms-page\">\n      <Card className=\"ms-card\" bordered={false}>\n        <Title level={3}>üí£ Minesweeper</Title>\n\n        {/* ----- Settings Controls ----- */}\n        <Row gutter={[12, 12]} align=\"middle\">\n          <Col xs={24} sm={12} md={10} lg={8}>\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n              {/* Difficulty + buttons */}\n              <div style={{ display: 'flex', gap: 8, alignItems: 'center', flexWrap: 'wrap' }}>\n                <Text strong>Difficulty:</Text>\n                <Select\n                  value={difficulty}\n                  onChange={(v: Difficulty) => setDifficulty(v)}\n                  style={{ minWidth: 160 }}\n                >\n                  <Option value=\"beginner\">Beginner (9√ó9, 10 mines)</Option>\n                  <Option value=\"intermediate\">Intermediate (16√ó16, 40 mines)</Option>\n                  <Option value=\"advanced\">Advanced (16√ó30, 99 mines)</Option>\n                  <Option value=\"custom\">Custom</Option>\n                </Select>\n\n                <Button icon={<ReloadOutlined />} onClick={startGame} type=\"primary\">\n                  Start / Restart\n                </Button>\n                <Button onClick={resetAll} danger>\n                  New Setup\n                </Button>\n              </div>\n\n              {/* Custom input fields */}\n              {difficulty === 'custom' ? (\n                <div style={{ display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>\n                  <Text>Rows:</Text>\n                  <InputNumber\n                    min={9}\n                    max={30}\n                    value={rows}\n                    onChange={(v) => setRows(v || 9)}\n                    disabled={difficulty !== 'custom'}\n                  />\n                  <Text>Cols:</Text>\n                  <InputNumber\n                    min={9}\n                    max={30}\n                    value={cols}\n                    onChange={(v) => setCols(v || 9)}\n                    disabled={difficulty !== 'custom'}\n                  />\n                  <Text>Mines:</Text>\n                  <InputNumber\n                    min={10}\n                    max={Math.max(10, Math.min(668, rows * cols - 1))}\n                    value={mines}\n                    onChange={(v) => setMines(v || 10)}\n                    disabled={difficulty !== 'custom'}\n                  />\n                </div>\n              ) : null}\n\n              {/* Toggles */}\n              <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>\n                <Text>Show Tips:</Text>\n                <Switch checked={showTips} onChange={setShowTips} />\n              </div>\n\n              <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>\n                <Text>Tap Mode:</Text>\n                <Select\n                  value={tapMode}\n                  onChange={(v) => setTapMode(v)}\n                  style={{ width: 140 }}\n                  options={[\n                    { label: 'üí£ Reveal (default)', value: 'reveal' },\n                    { label: 'üö© Flag', value: 'flag' },\n                  ]}\n                />\n              </div>\n            </Space>\n          </Col>\n\n          {/* ----- Game Info ----- */}\n          <Col xs={24} sm={12} md={14} lg={16}>\n            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\n              <div>\n                <Text strong>Mines:</Text>\n                <div>{flagsLeft}</div>\n              </div>\n              <div>\n                <Text strong>Time:</Text>\n                <div>{timeSec}s</div>\n              </div>\n              <div>\n                <Text strong>Status:</Text>\n                <div>{gameOver ? (won ? 'Won ‚úÖ' : 'Lost ‚ùå') : started ? 'Playing' : 'Idle'}</div>\n              </div>\n            </div>\n          </Col>\n        </Row>\n\n        {/* ----- Game Board ----- */}\n        <div className=\"ms-board-wrap\">\n          <div\n            className=\"ms-board\"\n            style={{\n              gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\n              gap: 6,\n            }}\n          >\n            {board.length > 0\n              ? board.map((row) =>\n                  row.map((cell) => <CellView key={`${cell.r}-${cell.c}`} cell={cell} />),\n                )\n              : Array.from({ length: rows * cols }).map((_, i) => (\n                  <div\n                    key={i}\n                    className=\"ms-cell\"\n                    style={{\n                      width: cellSize,\n                      height: cellSize,\n                      lineHeight: `${cellSize}px`,\n                      fontSize: Math.floor(cellSize * 0.55),\n                      background: '#fafafa',\n                    }}\n                  />\n                ))}\n          </div>\n        </div>\n\n        {/* ----- Tips Section ----- */}\n        {showTips && (\n          <div className=\"ms-tips\">\n            <Title level={5}>Quick Tips</Title>\n            <ul>\n              <li>First click never hits a mine ‚Äî mines are placed after your first click.</li>\n              <li>Right-click (or long press) to place a flag.</li>\n              <li>Double-click a number to chord if flags match.</li>\n              <li>Use custom mode for full control of board size.</li>\n            </ul>\n          </div>\n        )}\n\n        <div style={{ marginTop: 12, textAlign: 'center' }}>\n          <Text type=\"secondary\">Made with ‚ù§Ô∏è ‚Äî responsive and mobile friendly.</Text>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default MinesweeperPage;\n"],"names":[],"mappings":"6aAYI,EAAuB,EAAM,UAAU,CANtB,SAAwB,CAAK,CAAE,CAAG,EACrD,OAAoB,EAAM,aAAa,CAAC,SAAQ,CAAE,GAAA,SAAa,EAAC,GAAA,SAAa,EAAC,CAAC,EAAG,GAAQ,CAAC,EAAG,CAC5F,IAAK,EACL,KAAM,SAAiB,AACzB,IACF,6PCMA,GAAM,CAAE,MAAA,CAAK,CAAE,KAAA,CAAI,CAAE,CAAG,SAAU,CAC5B,CAAE,OAAA,CAAM,CAAE,CAAG,SAAM,CAoBnB,EAAyE,CAC7E,SAAU,CAAE,KAAM,EAAG,KAAM,EAAG,MAAO,EAAG,EACxC,aAAc,CAAE,KAAM,GAAI,KAAM,GAAI,MAAO,EAAG,EAC9C,SAAU,CAAE,KAAM,GAAI,KAAM,GAAI,MAAO,EAAG,CAC5C,EAGM,EAAQ,CAAC,EAAW,EAAW,IAAc,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAG,IAErE,EAA4B,KAIhC,GAAM,CAAC,EAAY,EAAc,CAAG,GAAA,UAAQ,EAAa,YACnD,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAS,GACnC,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAS,GACnC,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAS,IACrC,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC5C,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAoB,UAKpD,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAW,EAAE,EACzC,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC1C,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC5C,CAAC,EAAK,EAAO,CAAG,GAAA,UAAQ,EAAU,CAAA,GAClC,CAAC,EAAW,EAAa,CAAG,GAAA,UAAQ,EAAS,GAC7C,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAS,GAGzC,EAAW,GAAA,QAAM,EAAgB,MACjC,EAAgB,GAAA,QAAM,EAAU,CAAA,GAGhC,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAC,CAAA,GAEzC,GAAA,WAAS,EAAC,KACR,IAAM,EAAe,IAAM,EAAY,OAAO,UAAU,EAAI,KAG5D,OAFA,IACA,OAAO,gBAAgB,CAAC,SAAU,GAC3B,IAAM,OAAO,mBAAmB,CAAC,SAAU,GACpD,EAAG,EAAE,EAKL,IAAM,EAAW,GAAA,SAAO,EAAC,IACvB,AAAI,EACF,AAAI,GAAQ,EAAU,GAClB,GAAQ,GAAW,GACnB,GAAQ,GAAW,GAChB,GAEP,AAAI,GAAQ,EAAU,GAClB,GAAQ,GAAW,GACnB,GAAQ,GAAW,GAChB,GAER,CAAC,EAAM,EAAS,EAKnB,GAAA,WAAS,EAAC,KACR,GAAI,AAAe,WAAf,EAAyB,OAC7B,IAAM,EAAI,CAAO,CAAC,EAAW,CACxB,IACL,EAAQ,EAAE,IAAI,EACd,EAAQ,EAAE,IAAI,EACd,EAAS,EAAE,KAAK,GAClB,EAAG,CAAC,EAAW,EAGf,GAAA,WAAS,EAAC,KACR,EAAQ,AAAC,GAAM,EAAM,EAAG,EAAG,KAC3B,EAAQ,AAAC,GAAM,EAAM,EAAG,EAAG,KAC3B,IAAM,EAAW,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAO,EAAO,IAC1D,EAAS,AAAC,GAAM,EAAM,EAAG,GAAI,IAC/B,EAAG,CAAC,EAAM,EAAK,EAKf,IAAM,EAAmB,CAAC,EAAW,IACnC,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,CAAC,EAAG,IAC5B,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,CAAC,EAAG,IAAO,CAAA,CACnC,EAAA,EACA,EAAA,EACA,MAAO,CAAA,EACP,SAAU,CAAA,EACV,QAAS,CAAA,EACT,SAAU,CACZ,CAAA,IAOE,EAAa,CAAC,EAAa,EAAe,EAAe,KAC7D,IAAM,EAAI,EAAE,MAAM,CACZ,EAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CACf,EAA6B,EAAE,CAGrC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACM,GAAvB,KAAK,GAAG,CAAC,EAAI,IAAe,AAAuB,GAAvB,KAAK,GAAG,CAAC,EAAI,IAC7C,EAAO,IAAI,CAAC,CAAC,EAAG,EAAE,EAKtB,IAAK,IAAI,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IAAK,CAC1C,IAAM,EAAI,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAI,CAAA,GAC1C,CAAC,CAAM,CAAC,EAAE,CAAE,CAAM,CAAC,EAAE,CAAC,CAAG,CAAC,CAAM,CAAC,EAAE,CAAE,CAAM,CAAC,EAAE,CAAC,CACjD,CAIA,AADe,EAAO,KAAK,CAAC,EAAG,GACxB,OAAO,CAAC,CAAC,CAAC,EAAG,EAAE,GAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAG,CAAA,GAG5C,IAAM,EAAO,CAAC,GAAI,EAAG,EAAE,CACvB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAE,CACjB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAG,GACnB,SACF,CACA,IAAI,EAAQ,EACZ,IAAK,IAAI,KAAM,EACb,IAAK,IAAI,KAAM,EAAM,CACnB,GAAI,AAAO,IAAP,GAAY,AAAO,IAAP,EAAU,SAC1B,IAAM,EAAK,EAAI,EACT,EAAK,EAAI,EACX,GAAM,GAAK,EAAK,GAAK,GAAM,GAAK,EAAK,GAAK,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,KAAK,EAAE,IACjE,CACF,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAG,EACrB,CAEJ,EA+BM,EAAa,KACb,EAAS,OAAO,GAClB,OAAO,aAAa,CAAC,EAAS,OAAO,EACrC,EAAS,OAAO,CAAG,MAEvB,EAEM,EAAa,KACb,EAAS,OAAO,EACpB,CAAA,EAAS,OAAO,CAAG,OAAO,WAAW,CAAC,IAAM,EAAW,AAAC,GAAM,EAAI,GAAI,IAAI,EAC5E,EAKM,EAAa,CAAC,EAAW,EAAW,KACxC,GAAI,EAAU,OACd,IAAM,EAAI,GAAY,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IAChE,EAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CACpB,GAAI,CAAC,GAAQ,EAAK,QAAQ,EAAI,EAAK,OAAO,CAAE,OAAO,EAKnD,GAHA,EAAK,QAAQ,CAAG,CAAA,EAGZ,EAAK,KAAK,CAAE,CACd,IAAK,IAAI,EAAK,EAAG,EAAK,EAAE,MAAM,CAAE,IAC9B,IAAK,IAAI,EAAK,EAAG,EAAK,CAAC,CAAC,EAAE,CAAC,MAAM,CAAE,IAAU,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,QAAQ,CAAG,CAAA,CAAG,EAMxF,OALA,EAAS,GACT,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,IACA,SAAO,CAAC,KAAK,CAAC,mCACP,EACT,CAGA,GAAI,AAAkB,IAAlB,EAAK,QAAQ,CAAQ,CACvB,IAAM,EAAI,EAAE,MAAM,CACZ,EAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CACf,EAA4B,CAAC,CAAC,EAAG,EAAE,CAAC,CACpC,EAAO,CAAC,GAAI,EAAG,EAAE,CACvB,KAAO,EAAM,MAAM,EAAE,CACnB,GAAM,CAAC,EAAI,EAAG,CAAG,EAAM,GAAG,GAC1B,IAAK,IAAI,KAAM,EACb,IAAK,IAAI,KAAM,EAAM,CACnB,IAAM,EAAK,EAAK,EACV,EAAK,EAAK,EAChB,GAAI,EAAK,GAAK,EAAK,GAAK,GAAM,GAAK,GAAM,EAAG,SAC5C,IAAM,EAAQ,CAAC,CAAC,EAAG,CAAC,EAAG,EAClB,GAAS,EAAM,QAAQ,EAAI,EAAM,OAAO,GAC7C,EAAM,QAAQ,CAAG,CAAA,EACM,IAAnB,EAAM,QAAQ,EAAW,EAAM,KAAK,EAAE,EAAM,IAAI,CAAC,CAAC,EAAI,EAAG,GAC/D,CACJ,CACF,CAGA,OADA,EAAS,GACF,EACT,EAKM,EAAoB,AAAC,GACzB,EAAE,KAAK,CAAC,AAAC,GAAQ,EAAI,KAAK,CAAC,AAAC,GAAS,EAAK,KAAK,EAAI,EAAK,QAAQ,GAK5D,EAAc,CAAC,EAAW,KAC9B,GAAI,GAAY,EAAK,OAGrB,IAAI,EAAI,EACJ,EAAc,OAAO,GAEvB,EADA,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACtC,EAAG,EAAG,GACpB,EAAc,OAAO,CAAG,CAAA,EACxB,KAGF,IAAM,EAAQ,EAAW,EAAG,EAAG,GAC1B,GAED,CAAC,GAAY,EAAkB,KACjC,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,EAAa,AAAC,GAAM,KAAK,GAAG,CAAC,EAAG,IAChC,SAAO,CAAC,OAAO,CAAC,oDAEpB,EAKM,EAAe,CAAC,EAAqB,EAAW,KAEpD,GADA,EAAE,cAAc,GACZ,CAAC,GAAW,GAAY,EAAK,OACjC,IAAM,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACpD,EAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CACpB,IAAI,EAAK,QAAQ,EAGjB,GAAI,EAAK,OAAO,CACd,EAAK,OAAO,CAAG,CAAA,EACf,EAAa,AAAC,GAAM,EAAI,OACnB,CACL,GAAI,GAAa,EAAG,OAAO,SAAO,CAAC,OAAO,CAAC,iBAC3C,EAAK,OAAO,CAAG,CAAA,EACf,EAAa,AAAC,GAAM,EAAI,GAC1B,CACA,EAAS,GAGL,EAAkB,KACpB,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,SAAO,CAAC,OAAO,CAAC,qDAEpB,EAKM,GAAU,CAAC,EAAW,KAC1B,GAAI,GAAY,EAAK,OACrB,IAAM,EAAO,CAAK,CAAC,EAAE,CAAC,EAAE,CACxB,GAAI,CAAC,GAAQ,CAAC,EAAK,QAAQ,EAAI,EAAK,QAAQ,EAAI,EAAG,OAGnD,IAAM,EAAI,EAAM,MAAM,CAChB,EAAI,CAAK,CAAC,EAAE,CAAC,MAAM,CACrB,EAAU,EACR,EAA6B,EAAE,CAErC,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IACzB,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IAAM,CAC/B,GAAI,AAAO,IAAP,GAAY,AAAO,IAAP,EAAU,SAC1B,IAAM,EAAK,EAAI,EACT,EAAK,EAAI,GACX,CAAA,EAAK,CAAA,IAAK,CAAA,EAAK,CAAA,IAAK,CAAA,GAAM,CAAA,IAAK,CAAA,GAAM,CAAA,IACzC,EAAO,IAAI,CAAC,CAAC,EAAI,EAAG,EAChB,CAAK,CAAC,EAAG,CAAC,EAAG,CAAC,OAAO,EAAE,KAC7B,CAEF,GAAI,IAAY,EAAK,QAAQ,CAAE,OAG/B,IAAI,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACxD,IAAK,GAAM,CAAC,EAAI,EAAG,GAAI,EACrB,GAAI,CAAC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,OAAO,EAAI,CAAC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,QAAQ,GAE3C,EAAI,AADQ,EAAW,EAAI,EAAI,IACpB,EACP,GAAU,MAIlB,EAAS,GACL,CAAC,GAAY,EAAkB,KACjC,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,SAAO,CAAC,OAAO,CAAC,oDAEpB,EAkBA,GAAA,WAAS,EAAC,IAAM,IAAM,IAAc,EAAE,EAKtC,IAAM,GAAqC,CAAC,CAAE,KAAA,CAAI,CAAE,IAClD,IAAM,EAAM,CAAC,UAAU,QACnB,EAAK,QAAQ,EAAE,EAAI,IAAI,CAAC,eACxB,EAAK,OAAO,EAAE,EAAI,IAAI,CAAC,cACvB,EAAK,KAAK,EAAI,EAAK,QAAQ,EAAE,EAAI,IAAI,CAAC,WASxC,UAAC,OACC,UAAW,EAAI,IAAI,CAAC,KACpB,MAAO,CACL,MAAO,EACP,OAAQ,EACR,WAAY,CAAC,EAAE,EAAS,EAAE,CAAC,CAC3B,SAAU,KAAK,KAAK,CAAC,AAAW,IAAX,EACvB,EACA,QAfY,AAAC,IACf,EAAE,cAAc,GACZ,AAAY,WAAZ,EAAsB,EAAY,EAAK,CAAC,CAAE,EAAK,CAAC,EAC/C,EAAa,EAAG,EAAK,CAAC,CAAE,EAAK,CAAC,EACrC,EAYI,cAAe,AAAC,GAAM,EAAa,EAAG,EAAK,CAAC,CAAE,EAAK,CAAC,EACpD,cAAe,IAAM,GAAQ,EAAK,CAAC,CAAE,EAAK,CAAC,WAG1C,EAAK,QAAQ,CACZ,EAAK,KAAK,CACR,YACE,EAAK,QAAQ,CAAG,EAClB,UAAC,QAAK,UAAW,CAAC,cAAc,EAAE,EAAK,QAAQ,CAAC,CAAC,UAAG,EAAK,QAAQ,GAEjE,GAEA,EAAK,OAAO,CACd,YAEA,KAIR,EAKA,MACE,UAAC,OAAI,UAAU,mBACb,WAAC,SAAI,EAAC,UAAU,UAAU,SAAU,CAAA,YAClC,UAAC,GAAM,MAAO,WAAG,0BAGjB,WAAC,SAAG,EAAC,OAAQ,CAAC,GAAI,GAAG,CAAE,MAAM,mBAC3B,UAAC,SAAG,EAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,WAC/B,WAAC,SAAK,EAAC,UAAU,WAAW,KAAK,QAAQ,MAAO,CAAE,MAAO,MAAO,YAE9D,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,EAAG,WAAY,SAAU,SAAU,MAAO,YAC5E,UAAC,GAAK,MAAM,aAAC,gBACb,WAAC,SAAM,EACL,MAAO,EACP,SAAU,AAAC,GAAkB,EAAc,GAC3C,MAAO,CAAE,SAAU,GAAI,YAEvB,UAAC,GAAO,MAAM,oBAAW,gCACzB,UAAC,GAAO,MAAM,wBAAe,sCAC7B,UAAC,GAAO,MAAM,oBAAW,kCACzB,UAAC,GAAO,MAAM,kBAAS,cAGzB,UAAC,SAAM,EAAC,KAAM,UAAC,MAAmB,QA5R9B,KAChB,IAAM,EAAI,EAAM,EAAM,EAAG,IACnB,EAAI,EAAM,EAAM,EAAG,IAEnB,EAAI,EAAM,EAAO,GADN,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAI,EAAI,KAIpD,EAAQ,GACR,EAAQ,GACR,EAAS,GAGT,IACA,EAAc,OAAO,CAAG,CAAA,EACxB,EAAW,CAAA,GACX,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,EAAa,GACb,EAAW,GACX,EAAS,EAAiB,EAAG,IAC7B,SAAO,CAAC,OAAO,CAAC,sEAClB,EAuQoE,KAAK,mBAAU,oBAGrE,UAAC,SAAM,EAAC,QA1FL,KACf,IACA,EAAW,CAAA,GACX,EAAS,EAAE,EACX,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,EAAa,GACb,EAAW,GACX,EAAc,OAAO,CAAG,CAAA,EACxB,SAAO,CAAC,IAAI,CAAC,0CACf,EAgFyC,MAAM,aAAC,iBAMnC,AAAe,WAAf,EACC,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,SAAU,SAAU,MAAO,YAC7E,UAAC,YAAK,UACN,UAAC,SAAW,EACV,IAAK,EACL,IAAK,GACL,MAAO,EACP,SAAU,AAAC,GAAM,EAAQ,GAAK,GAC9B,SAAU,AAAe,WAAf,IAEZ,UAAC,YAAK,UACN,UAAC,SAAW,EACV,IAAK,EACL,IAAK,GACL,MAAO,EACP,SAAU,AAAC,GAAM,EAAQ,GAAK,GAC9B,SAAU,AAAe,WAAf,IAEZ,UAAC,YAAK,WACN,UAAC,SAAW,EACV,IAAK,GACL,IAAK,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAO,EAAO,IAC9C,MAAO,EACP,SAAU,AAAC,GAAM,EAAS,GAAK,IAC/B,SAAU,AAAe,WAAf,OAGZ,KAGJ,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,QAAS,YAC3D,UAAC,YAAK,eACN,UAAC,SAAM,EAAC,QAAS,EAAU,SAAU,OAGvC,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,QAAS,YAC3D,UAAC,YAAK,cACN,UAAC,SAAM,EACL,MAAO,EACP,SAAU,AAAC,GAAM,EAAW,GAC5B,MAAO,CAAE,MAAO,GAAI,EACpB,QAAS,CACP,CAAE,MAAO,6BAAuB,MAAO,QAAS,EAChD,CAAE,MAAO,iBAAW,MAAO,MAAO,EACnC,WAOT,UAAC,SAAG,EAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,YAC/B,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,eAAgB,WAAY,IAAK,EAAG,YACjE,WAAC,iBACC,UAAC,GAAK,MAAM,aAAC,WACb,UAAC,gBAAK,OAER,WAAC,iBACC,UAAC,GAAK,MAAM,aAAC,UACb,WAAC,iBAAK,EAAQ,UAEhB,WAAC,iBACC,UAAC,GAAK,MAAM,aAAC,YACb,UAAC,gBAAK,EAAY,EAAM,aAAU,cAAY,EAAU,UAAY,oBAO5E,UAAC,OAAI,UAAU,yBACb,UAAC,OACC,UAAU,WACV,MAAO,CACL,oBAAqB,CAAC,OAAO,EAAE,EAAK,EAAE,EAAE,EAAS,GAAG,CAAC,CACrD,IAAK,CACP,WAEC,EAAM,MAAM,CAAG,EACZ,EAAM,GAAG,CAAC,AAAC,GACT,EAAI,GAAG,CAAC,AAAC,GAAS,UAAC,IAAqC,KAAM,GAA7B,CAAC,EAAE,EAAK,CAAC,CAAC,CAAC,EAAE,EAAK,CAAC,CAAC,CAAC,IAExD,MAAM,IAAI,CAAC,CAAE,OAAQ,EAAO,CAAK,GAAG,GAAG,CAAC,CAAC,EAAG,IAC1C,UAAC,OAEC,UAAU,UACV,MAAO,CACL,MAAO,EACP,OAAQ,EACR,WAAY,CAAC,EAAE,EAAS,EAAE,CAAC,CAC3B,SAAU,KAAK,KAAK,CAAC,AAAW,IAAX,GACrB,WAAY,SACd,GARK,QAehB,GACC,WAAC,OAAI,UAAU,oBACb,UAAC,GAAM,MAAO,WAAG,eACjB,WAAC,gBACC,UAAC,eAAG,kFACJ,UAAC,eAAG,iDACJ,UAAC,eAAG,mDACJ,UAAC,eAAG,0DAKV,UAAC,OAAI,MAAO,CAAE,UAAW,GAAI,UAAW,QAAS,WAC/C,UAAC,GAAK,KAAK,qBAAY,yEAKjC"}