{"version":3,"sources":["src/hooks/useIsTouchDevice.tsx","node_modules/antd/es/flex/utils.js","node_modules/antd/es/flex/style/index.js","node_modules/antd/es/flex/index.js","src/pages/Minesweeper/components/SetupModal.tsx","src/pages/Minesweeper/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport const useIsTouchDevice = () => {\r\n  const [isTouch, setIsTouch] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;\r\n    setIsTouch(hasTouch);\r\n  }, []);\r\n\r\n  return isTouch;\r\n};\r\n","import classNames from 'classnames';\nexport const flexWrapValues = ['wrap', 'nowrap', 'wrap-reverse'];\nexport const justifyContentValues = ['flex-start', 'flex-end', 'start', 'end', 'center', 'space-between', 'space-around', 'space-evenly', 'stretch', 'normal', 'left', 'right'];\nexport const alignItemsValues = ['center', 'start', 'end', 'flex-start', 'flex-end', 'self-start', 'self-end', 'baseline', 'normal', 'stretch'];\nconst genClsWrap = (prefixCls, props) => {\n  const wrap = props.wrap === true ? 'wrap' : props.wrap;\n  return {\n    [`${prefixCls}-wrap-${wrap}`]: wrap && flexWrapValues.includes(wrap)\n  };\n};\nconst genClsAlign = (prefixCls, props) => {\n  const alignCls = {};\n  alignItemsValues.forEach(cssKey => {\n    alignCls[`${prefixCls}-align-${cssKey}`] = props.align === cssKey;\n  });\n  alignCls[`${prefixCls}-align-stretch`] = !props.align && !!props.vertical;\n  return alignCls;\n};\nconst genClsJustify = (prefixCls, props) => {\n  const justifyCls = {};\n  justifyContentValues.forEach(cssKey => {\n    justifyCls[`${prefixCls}-justify-${cssKey}`] = props.justify === cssKey;\n  });\n  return justifyCls;\n};\nfunction createFlexClassNames(prefixCls, props) {\n  return classNames(Object.assign(Object.assign(Object.assign({}, genClsWrap(prefixCls, props)), genClsAlign(prefixCls, props)), genClsJustify(prefixCls, props)));\n}\nexport default createFlexClassNames;","import { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { alignItemsValues, flexWrapValues, justifyContentValues } from '../utils';\nconst genFlexStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [componentCls]: {\n      display: 'flex',\n      margin: 0,\n      padding: 0,\n      '&-vertical': {\n        flexDirection: 'column'\n      },\n      '&-rtl': {\n        direction: 'rtl'\n      },\n      '&:empty': {\n        display: 'none'\n      }\n    }\n  };\n};\nconst genFlexGapStyle = token => {\n  const {\n    componentCls\n  } = token;\n  return {\n    [componentCls]: {\n      '&-gap-small': {\n        gap: token.flexGapSM\n      },\n      '&-gap-middle': {\n        gap: token.flexGap\n      },\n      '&-gap-large': {\n        gap: token.flexGapLG\n      }\n    }\n  };\n};\nconst genFlexWrapStyle = token => {\n  const {\n    componentCls\n  } = token;\n  const wrapStyle = {};\n  flexWrapValues.forEach(value => {\n    wrapStyle[`${componentCls}-wrap-${value}`] = {\n      flexWrap: value\n    };\n  });\n  return wrapStyle;\n};\nconst genAlignItemsStyle = token => {\n  const {\n    componentCls\n  } = token;\n  const alignStyle = {};\n  alignItemsValues.forEach(value => {\n    alignStyle[`${componentCls}-align-${value}`] = {\n      alignItems: value\n    };\n  });\n  return alignStyle;\n};\nconst genJustifyContentStyle = token => {\n  const {\n    componentCls\n  } = token;\n  const justifyStyle = {};\n  justifyContentValues.forEach(value => {\n    justifyStyle[`${componentCls}-justify-${value}`] = {\n      justifyContent: value\n    };\n  });\n  return justifyStyle;\n};\nexport const prepareComponentToken = () => ({});\nexport default genStyleHooks('Flex', token => {\n  const {\n    paddingXS,\n    padding,\n    paddingLG\n  } = token;\n  const flexToken = mergeToken(token, {\n    flexGapSM: paddingXS,\n    flexGap: padding,\n    flexGapLG: paddingLG\n  });\n  return [genFlexStyle(flexToken), genFlexGapStyle(flexToken), genFlexWrapStyle(flexToken), genAlignItemsStyle(flexToken), genJustifyContentStyle(flexToken)];\n}, prepareComponentToken, {\n  // Flex component don't apply extra font style\n  // https://github.com/ant-design/ant-design/issues/46403\n  resetStyle: false\n});","\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { isPresetSize } from '../_util/gapSize';\nimport { ConfigContext } from '../config-provider';\nimport useStyle from './style';\nimport createFlexClassNames from './utils';\nconst Flex = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n      prefixCls: customizePrefixCls,\n      rootClassName,\n      className,\n      style,\n      flex,\n      gap,\n      children,\n      vertical = false,\n      component: Component = 'div'\n    } = props,\n    othersProps = __rest(props, [\"prefixCls\", \"rootClassName\", \"className\", \"style\", \"flex\", \"gap\", \"children\", \"vertical\", \"component\"]);\n  const {\n    flex: ctxFlex,\n    direction: ctxDirection,\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('flex', customizePrefixCls);\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const mergedVertical = vertical !== null && vertical !== void 0 ? vertical : ctxFlex === null || ctxFlex === void 0 ? void 0 : ctxFlex.vertical;\n  const mergedCls = classNames(className, rootClassName, ctxFlex === null || ctxFlex === void 0 ? void 0 : ctxFlex.className, prefixCls, hashId, cssVarCls, createFlexClassNames(prefixCls, props), {\n    [`${prefixCls}-rtl`]: ctxDirection === 'rtl',\n    [`${prefixCls}-gap-${gap}`]: isPresetSize(gap),\n    [`${prefixCls}-vertical`]: mergedVertical\n  });\n  const mergedStyle = Object.assign(Object.assign({}, ctxFlex === null || ctxFlex === void 0 ? void 0 : ctxFlex.style), style);\n  if (flex) {\n    mergedStyle.flex = flex;\n  }\n  if (gap && !isPresetSize(gap)) {\n    mergedStyle.gap = gap;\n  }\n  return wrapCSSVar(/*#__PURE__*/React.createElement(Component, Object.assign({\n    ref: ref,\n    className: mergedCls,\n    style: mergedStyle\n  }, omit(othersProps, ['justify', 'wrap', 'align'])), children));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Flex.displayName = 'Flex';\n}\nexport default Flex;","import { Button, InputNumber, Modal, Radio, Space, Switch, Typography, message } from 'antd';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst { Text } = Typography;\r\n\r\ntype Difficulty = 'beginner' | 'intermediate' | 'advanced' | 'custom';\r\n\r\ninterface SetupModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  difficulty: Difficulty;\r\n  setDifficulty: (v: Difficulty) => void;\r\n  rows: number;\r\n  setRows: (v: number) => void;\r\n  cols: number;\r\n  setCols: (v: number) => void;\r\n  mines: number;\r\n  setMines: (v: number) => void;\r\n  showTips: boolean;\r\n  setShowTips: (v: boolean) => void;\r\n  started: boolean;\r\n  startGame: () => void;\r\n  resetAll: () => void;\r\n}\r\n\r\nconst SetupModal: React.FC<SetupModalProps> = ({\r\n  visible,\r\n  onClose,\r\n  difficulty,\r\n  setDifficulty,\r\n  rows,\r\n  setRows,\r\n  cols,\r\n  setCols,\r\n  mines,\r\n  setMines,\r\n  showTips,\r\n  setShowTips,\r\n  started,\r\n  startGame,\r\n  resetAll,\r\n}) => {\r\n  // Local (temporary) states before confirming\r\n  const [tempDifficulty, setTempDifficulty] = useState<Difficulty>(difficulty);\r\n  const [tempRows, setTempRows] = useState(rows);\r\n  const [tempCols, setTempCols] = useState(cols);\r\n  const [tempMines, setTempMines] = useState(mines);\r\n  const [tempShowTips, setTempShowTips] = useState(showTips);\r\n\r\n  // Sync current values when modal opens\r\n  useEffect(() => {\r\n    if (visible) {\r\n      setTempDifficulty(difficulty);\r\n      setTempRows(rows);\r\n      setTempCols(cols);\r\n      setTempMines(mines);\r\n      setTempShowTips(showTips);\r\n    }\r\n  }, [visible]);\r\n\r\n  // Confirm and apply changes\r\n  const handleConfirm = () => {\r\n    const applyChanges = () => {\r\n      setDifficulty(tempDifficulty);\r\n      setRows(tempRows);\r\n      setCols(tempCols);\r\n      setMines(tempMines);\r\n      setShowTips(tempShowTips);\r\n      resetAll();\r\n      onClose();\r\n      message.success('Game setup updated!');\r\n    };\r\n\r\n    // Warn user if game already started\r\n    if (started) {\r\n      Modal.confirm({\r\n        title: 'Restart Game?',\r\n        content:\r\n          'Changing settings will restart your current game and clear your progress. Continue?',\r\n        okText: 'Yes, restart',\r\n        cancelText: 'No, keep playing',\r\n        centered: true,\r\n        onOk: applyChanges,\r\n      });\r\n    } else {\r\n      applyChanges();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      open={visible}\r\n      onCancel={onClose}\r\n      footer={null}\r\n      maskClosable={false}\r\n      centered\r\n      title=\"Game Setup\"\r\n    >\r\n      <div style={{ display: 'flex', flexDirection: 'column', gap: 16 }}>\r\n        {/* Difficulty */}\r\n        <div>\r\n          <Text strong>Difficulty:</Text>\r\n          <Radio.Group\r\n            value={tempDifficulty}\r\n            onChange={(e) => setTempDifficulty(e.target.value)}\r\n            style={{ display: 'flex', flexDirection: 'column', marginTop: 8, gap: 4 }}\r\n          >\r\n            <Radio value=\"beginner\">Beginner (9×9, 10 mines)</Radio>\r\n            <Radio value=\"intermediate\">Intermediate (16×16, 40 mines)</Radio>\r\n            <Radio value=\"advanced\">Advanced (16×30, 99 mines)</Radio>\r\n            <Radio value=\"custom\">Custom</Radio>\r\n          </Radio.Group>\r\n        </div>\r\n\r\n        {/* Custom fields */}\r\n        {tempDifficulty === 'custom' && (\r\n          <div style={{ display: 'flex', gap: 12, alignItems: 'center', flexWrap: 'wrap' }}>\r\n            <Text>Rows:</Text>\r\n            <InputNumber min={9} max={30} value={tempRows} onChange={(v) => setTempRows(v || 9)} />\r\n            <Text>Cols:</Text>\r\n            <InputNumber min={9} max={30} value={tempCols} onChange={(v) => setTempCols(v || 9)} />\r\n            <Text>Mines:</Text>\r\n            <InputNumber\r\n              min={10}\r\n              max={Math.max(10, Math.min(668, tempRows * tempCols - 1))}\r\n              value={tempMines}\r\n              onChange={(v) => setTempMines(v || 10)}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Toggles */}\r\n        <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>\r\n          <Text>Show Tips:</Text>\r\n          <Switch checked={tempShowTips} onChange={setTempShowTips} />\r\n        </div>\r\n\r\n        {/* Action buttons */}\r\n        <Space style={{ justifyContent: 'flex-end', display: 'flex', marginTop: 8 }}>\r\n          <Button onClick={onClose} danger>\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"primary\" onClick={handleConfirm}>\r\n            Confirm\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SetupModal;\r\n","// --- Import React, Ant Design components, and icons ---\r\nimport { useIsMobile } from '@/hooks/useIsMobile';\r\nimport { useIsTouchDevice } from '@/hooks/useIsTouchDevice';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\nimport { Button, Card, Col, Flex, Radio, Row, Select, Space, Typography, message } from 'antd';\r\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport Confetti from 'react-confetti';\r\nimport SetupModal from './components/SetupModal';\r\nimport './styles.less'; // custom stylesheet for Minesweeper\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\n// ========================================================\r\n// 🧩 Types & Constants\r\n// ========================================================\r\n\r\n// Each cell on the board\r\ntype Cell = {\r\n  r: number; // row index\r\n  c: number; // column index\r\n  mined: boolean; // whether it contains a mine\r\n  revealed: boolean; // whether the cell has been revealed\r\n  flagged: boolean; // whether the cell has been flagged\r\n  adjacent: number; // number of surrounding mines\r\n};\r\n\r\n// Difficulty options\r\ntype Difficulty = 'beginner' | 'intermediate' | 'advanced' | 'custom';\r\n\r\n// Predefined board sizes for each difficulty\r\nconst PRESETS: Record<string, { rows: number; cols: number; mines: number }> = {\r\n  beginner: { rows: 9, cols: 9, mines: 10 },\r\n  intermediate: { rows: 16, cols: 16, mines: 40 },\r\n  advanced: { rows: 16, cols: 30, mines: 99 },\r\n};\r\n\r\n// Helper: limit value between two bounds\r\nconst clamp = (v: number, a: number, b: number) => Math.max(a, Math.min(b, v));\r\n\r\nconst MinesweeperPage: React.FC = () => {\r\n  // ========================================================\r\n  // ⚙️ Settings (user-configurable)\r\n  // ========================================================\r\n  const [difficulty, setDifficulty] = useState<Difficulty>('beginner');\r\n  const [rows, setRows] = useState<number>(9);\r\n  const [cols, setCols] = useState<number>(9);\r\n  const [mines, setMines] = useState<number>(10);\r\n  const [showTips, setShowTips] = useState<boolean>(true);\r\n  const [tapMode, setTapMode] = useState<'reveal' | 'flag'>('reveal'); // toggle mode for mobile taps\r\n\r\n  // ========================================================\r\n  // 🎮 Game State\r\n  // ========================================================\r\n  const [board, setBoard] = useState<Cell[][]>([]); // 2D grid of cells\r\n  const [started, setStarted] = useState<boolean>(false);\r\n  const [gameOver, setGameOver] = useState<boolean>(false);\r\n  const [won, setWon] = useState<boolean>(false);\r\n  const [flagsLeft, setFlagsLeft] = useState<number>(0);\r\n  const [timeSec, setTimeSec] = useState<number>(0);\r\n  const [isSetupOpen, setIsSetupOpen] = useState(true);\r\n\r\n  // Refs for timer and first-click detection\r\n  const timerRef = useRef<number | null>(null);\r\n  const firstClickRef = useRef<boolean>(true);\r\n\r\n  const isMobile = useIsMobile(); // Check in using Mobile\r\n  const isTouch = useIsTouchDevice(); //check  is using touch screen (mobile or tablet)\r\n\r\n  const CELL_GAP = useMemo(() => (isMobile ? 4 : 6), [isMobile]);\r\n\r\n  // ========================================================\r\n  // 📱 Responsive cell size calculation\r\n  // ========================================================\r\n  const cellSize = useMemo(() => {\r\n    if (isMobile) {\r\n      if (cols <= 9) return 32;\r\n      if (cols <= 16) return 24;\r\n      if (cols <= 24) return 18;\r\n      return 16;\r\n    } else {\r\n      if (cols <= 9) return 40;\r\n      if (cols <= 16) return 32;\r\n      if (cols <= 24) return 28;\r\n      return 22;\r\n    }\r\n  }, [cols, isMobile]);\r\n\r\n  // ========================================================\r\n  // 📱 Board justify content  calculation\r\n  // ========================================================\r\n\r\n  const boardJustifyContent = useMemo(() => {\r\n    const innerWidth = window.innerWidth;\r\n    const allPadding = 40 + 16 + 24;\r\n    const boardSize = (cellSize + CELL_GAP * 2) * cols;\r\n    const cardSize = isMobile ? innerWidth : innerWidth - allPadding * 2;\r\n    return boardSize > cardSize ? 'flex-start' : 'center';\r\n  }, [cellSize, cols, isMobile]);\r\n\r\n  // ========================================================\r\n  // 🧭 Sync preset difficulty values\r\n  // ========================================================\r\n  useEffect(() => {\r\n    if (difficulty === 'custom') return;\r\n    const p = PRESETS[difficulty];\r\n    if (!p) return;\r\n    setRows(p.rows);\r\n    setCols(p.cols);\r\n    setMines(p.mines);\r\n  }, [difficulty]);\r\n\r\n  // Clamp custom values to valid ranges\r\n  useEffect(() => {\r\n    setRows((r) => clamp(r, 9, 30));\r\n    setCols((c) => clamp(c, 9, 30));\r\n    const maxMines = Math.max(10, Math.min(668, rows * cols - 1));\r\n    setMines((m) => clamp(m, 10, maxMines));\r\n  }, [rows, cols]);\r\n\r\n  // ========================================================\r\n  // 🧱 Helper: create an empty board\r\n  // ========================================================\r\n  const createEmptyBoard = (R: number, C: number): Cell[][] =>\r\n    Array.from({ length: R }, (_, r) =>\r\n      Array.from({ length: C }, (_, c) => ({\r\n        r,\r\n        c,\r\n        mined: false,\r\n        revealed: false,\r\n        flagged: false,\r\n        adjacent: 0,\r\n      })),\r\n    );\r\n\r\n  // ========================================================\r\n  // 💣 Place mines (after first click)\r\n  // Ensures first click and its neighbors are always safe.\r\n  // ========================================================\r\n  const placeMines = (b: Cell[][], safeR: number, safeC: number, minesToPlace: number) => {\r\n    const R = b.length;\r\n    const C = b[0].length;\r\n    const coords: [number, number][] = [];\r\n\r\n    // Exclude safe cell and neighbors\r\n    for (let r = 0; r < R; r++) {\r\n      for (let c = 0; c < C; c++) {\r\n        if (Math.abs(r - safeR) <= 1 && Math.abs(c - safeC) <= 1) continue;\r\n        coords.push([r, c]);\r\n      }\r\n    }\r\n\r\n    // Shuffle coordinates\r\n    for (let i = coords.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [coords[i], coords[j]] = [coords[j], coords[i]];\r\n    }\r\n\r\n    // Place mines in first N shuffled cells\r\n    const chosen = coords.slice(0, minesToPlace);\r\n    chosen.forEach(([r, c]) => (b[r][c].mined = true));\r\n\r\n    // Compute numbers (adjacent mine count)\r\n    const dirs = [-1, 0, 1];\r\n    for (let r = 0; r < R; r++) {\r\n      for (let c = 0; c < C; c++) {\r\n        if (b[r][c].mined) {\r\n          b[r][c].adjacent = -1;\r\n          continue;\r\n        }\r\n        let count = 0;\r\n        for (let dr of dirs)\r\n          for (let dc of dirs) {\r\n            if (dr === 0 && dc === 0) continue;\r\n            const nr = r + dr;\r\n            const nc = c + dc;\r\n            if (nr >= 0 && nr < R && nc >= 0 && nc < C && b[nr][nc].mined) count++;\r\n          }\r\n        b[r][c].adjacent = count;\r\n      }\r\n    }\r\n  };\r\n\r\n  // ========================================================\r\n  // ▶️ Start or restart game\r\n  // ========================================================\r\n  const startGame = () => {\r\n    const R = clamp(rows, 9, 30);\r\n    const C = clamp(cols, 9, 30);\r\n    const maxMines = Math.max(10, Math.min(668, R * C - 1));\r\n    const M = clamp(mines, 10, maxMines);\r\n\r\n    // Apply validated values\r\n    setRows(R);\r\n    setCols(C);\r\n    setMines(M);\r\n\r\n    // Reset all runtime states\r\n    clearTimer();\r\n    firstClickRef.current = true;\r\n    setStarted(true);\r\n    setGameOver(false);\r\n    setWon(false);\r\n    setFlagsLeft(M);\r\n    setTimeSec(0);\r\n    setBoard(createEmptyBoard(R, C));\r\n    message.success('New game ready — click a cell to start (first click is safe).');\r\n  };\r\n\r\n  // ========================================================\r\n  // ⏱ Timer controls\r\n  // ========================================================\r\n  const clearTimer = () => {\r\n    if (timerRef.current) {\r\n      window.clearInterval(timerRef.current);\r\n      timerRef.current = null;\r\n    }\r\n  };\r\n\r\n  const startTimer = () => {\r\n    if (timerRef.current) return;\r\n    timerRef.current = window.setInterval(() => setTimeSec((s) => s + 1), 1000);\r\n  };\r\n\r\n  // ========================================================\r\n  // 🔍 Reveal logic (with flood fill for empty zones)\r\n  // ========================================================\r\n  const revealCell = (r: number, c: number, bIn?: Cell[][]) => {\r\n    if (gameOver) return;\r\n    const b = bIn ? bIn : board.map((row) => row.map((cell) => ({ ...cell })));\r\n    const cell = b[r][c];\r\n    if (!cell || cell.revealed || cell.flagged) return b;\r\n\r\n    cell.revealed = true;\r\n\r\n    // 💥 Mine hit\r\n    if (cell.mined) {\r\n      for (let rr = 0; rr < b.length; rr++)\r\n        for (let cc = 0; cc < b[0].length; cc++) if (b[rr][cc].mined) b[rr][cc].revealed = true;\r\n      setBoard(b);\r\n      setGameOver(true);\r\n      setWon(false);\r\n      clearTimer();\r\n      message.error('💥 Boom! You hit a mine.');\r\n      return b;\r\n    }\r\n\r\n    // 🌊 Flood fill empty area\r\n    // If the clicked cell has 0 adjacent mines → start flood fill\r\n    if (cell.adjacent === 0) {\r\n      const R = b.length; // total rows\r\n      const C = b[0].length; // total columns\r\n\r\n      // We'll use this stack to iteratively reveal neighboring cells.\r\n      const stack: [number, number][] = [[r, c]];\r\n\r\n      // Directions we can move: up, down, left, right, and diagonals\r\n      // By combining all pairs of (-1, 0, 1), we cover the 8 surrounding cells.\r\n      const dirs = [-1, 0, 1];\r\n\r\n      // --- Loop until there are no more cells to process ---\r\n      while (stack.length) {\r\n        // Take one cell from the stack (Depth-First approach)\r\n        const [cr, cc] = stack.pop()!;\r\n\r\n        // Check all 8 neighboring cells around the current cell\r\n        for (let dr of dirs)\r\n          for (let dc of dirs) {\r\n            const nr = cr + dr; // new row index\r\n            const nc = cc + dc; // new column index\r\n\r\n            // Skip out-of-bounds coordinates\r\n            if (nr < 0 || nc < 0 || nr >= R || nc >= C) continue;\r\n\r\n            // Get neighbor cell\r\n            const neigh = b[nr][nc];\r\n\r\n            // Skip if the neighbor is undefined, already revealed, or flagged\r\n            if (!neigh || neigh.revealed || neigh.flagged) continue;\r\n\r\n            // Reveal the neighbor cell\r\n            neigh.revealed = true;\r\n\r\n            // If the neighbor also has 0 adjacent mines (and isn’t mined),\r\n            // add it to the stack for further expansion\r\n            // This ensures all connected empty areas are revealed recursively.\r\n            if (neigh.adjacent === 0 && !neigh.mined) stack.push([nr, nc]);\r\n          }\r\n      }\r\n    }\r\n\r\n    setBoard(b);\r\n    return b;\r\n  };\r\n\r\n  // ========================================================\r\n  // 🏆 Check win condition\r\n  // ========================================================\r\n  const checkWinCondition = (b: Cell[][]) =>\r\n    b.every((row) => row.every((cell) => cell.mined || cell.revealed));\r\n\r\n  // ========================================================\r\n  // 👆 Left click: reveal cell\r\n  // ========================================================\r\n  const onLeftClick = (r: number, c: number) => {\r\n    if (gameOver || won) return;\r\n\r\n    // On first click → place mines safely\r\n    let b = board;\r\n    if (firstClickRef.current) {\r\n      b = board.map((row) => row.map((cell) => ({ ...cell })));\r\n      placeMines(b, r, c, mines);\r\n      firstClickRef.current = false;\r\n      startTimer();\r\n    }\r\n\r\n    const after = revealCell(r, c, b);\r\n    if (!after) return;\r\n\r\n    if (!gameOver && checkWinCondition(after)) {\r\n      setWon(true);\r\n      setGameOver(true);\r\n      clearTimer();\r\n      setFlagsLeft((f) => Math.max(0, f));\r\n      message.success('🎉 You cleared the board — you win!');\r\n    }\r\n  };\r\n\r\n  // ========================================================\r\n  // 🏴 Right click: toggle flag\r\n  // ========================================================\r\n  const onRightClick = (e: React.MouseEvent, r: number, c: number) => {\r\n    e.preventDefault();\r\n    if (!started || gameOver || won) return;\r\n    const b = board.map((row) => row.map((cell) => ({ ...cell })));\r\n    const cell = b[r][c];\r\n    if (cell.revealed) return;\r\n\r\n    // toggle flag\r\n    if (cell.flagged) {\r\n      cell.flagged = false;\r\n      setFlagsLeft((f) => f + 1);\r\n    } else {\r\n      if (flagsLeft <= 0) return message.warning('No flags left');\r\n      cell.flagged = true;\r\n      setFlagsLeft((f) => f - 1);\r\n    }\r\n    setBoard(b);\r\n\r\n    // check for win after flagging\r\n    if (checkWinCondition(b)) {\r\n      setWon(true);\r\n      setGameOver(true);\r\n      clearTimer();\r\n      message.success('🎉 You cleared the board — you win!');\r\n    }\r\n  };\r\n\r\n  // ========================================================\r\n  // ⛏️ Chording: reveal neighbors if adjacent flags match number\r\n  // ========================================================\r\n  const onChord = (r: number, c: number) => {\r\n    if (gameOver || won) return;\r\n    const cell = board[r][c];\r\n    if (!cell || !cell.revealed || cell.adjacent <= 0) return;\r\n\r\n    // count flagged neighbors\r\n    const R = board.length;\r\n    const C = board[0].length;\r\n    let flagged = 0;\r\n    const neighs: [number, number][] = [];\r\n\r\n    for (let dr = -1; dr <= 1; dr++)\r\n      for (let dc = -1; dc <= 1; dc++) {\r\n        if (dr === 0 && dc === 0) continue;\r\n        const nr = r + dr;\r\n        const nc = c + dc;\r\n        if (nr < 0 || nc < 0 || nr >= R || nc >= C) continue;\r\n        neighs.push([nr, nc]);\r\n        if (board[nr][nc].flagged) flagged++;\r\n      }\r\n\r\n    if (flagged !== cell.adjacent) return;\r\n\r\n    // reveal unflagged neighbors\r\n    let b = board.map((row) => row.map((cell) => ({ ...cell })));\r\n    for (const [nr, nc] of neighs) {\r\n      if (!b[nr][nc].flagged && !b[nr][nc].revealed) {\r\n        const res = revealCell(nr, nc, b);\r\n        b = res || b;\r\n        if (gameOver) break;\r\n      }\r\n    }\r\n\r\n    setBoard(b);\r\n    if (!gameOver && checkWinCondition(b)) {\r\n      setWon(true);\r\n      setGameOver(true);\r\n      clearTimer();\r\n      message.success('🎉 You cleared the board — you win!');\r\n    }\r\n  };\r\n\r\n  // ========================================================\r\n  // 🧹 Reset helper\r\n  // ========================================================\r\n  const resetAll = () => {\r\n    clearTimer();\r\n    setStarted(false);\r\n    setBoard([]);\r\n    setGameOver(false);\r\n    setWon(false);\r\n    setFlagsLeft(0);\r\n    setTimeSec(0);\r\n    firstClickRef.current = true;\r\n  };\r\n\r\n  // Clear timer on unmount\r\n  useEffect(() => () => clearTimer(), []);\r\n\r\n  // ========================================================\r\n  // 🎨 Render: Cell component\r\n  // ========================================================\r\n  const CellView: React.FC<{ cell: Cell }> = ({ cell }) => {\r\n    const cls = ['ms-cell'];\r\n    if (cell.revealed) cls.push('ms-revealed');\r\n    if (cell.flagged) cls.push('ms-flagged');\r\n    if (cell.mined && cell.revealed) cls.push('ms-mine');\r\n\r\n    const onClick = (e: React.MouseEvent) => {\r\n      e.preventDefault();\r\n      if (tapMode === 'reveal') onLeftClick(cell.r, cell.c);\r\n      else onRightClick(e, cell.r, cell.c);\r\n    };\r\n\r\n    return (\r\n      <div\r\n        className={cls.join(' ')}\r\n        style={{\r\n          width: cellSize,\r\n          height: cellSize,\r\n          lineHeight: `${cellSize}px`,\r\n          fontSize: Math.floor(cellSize * 0.55),\r\n        }}\r\n        onClick={onClick}\r\n        onContextMenu={(e) => onRightClick(e, cell.r, cell.c)}\r\n        onDoubleClick={() => onChord(cell.r, cell.c)}\r\n      >\r\n        {/* Display content: mine, number, or flag */}\r\n        {cell.revealed ? (\r\n          cell.mined ? (\r\n            '💣'\r\n          ) : cell.adjacent > 0 ? (\r\n            <span className={`ms-num ms-num-${cell.adjacent}`}>{cell.adjacent}</span>\r\n          ) : (\r\n            ''\r\n          )\r\n        ) : cell.flagged ? (\r\n          '🚩'\r\n        ) : (\r\n          ''\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // ========================================================\r\n  // 🧩 Main Page Layout\r\n  // ========================================================\r\n  return (\r\n    <div className=\"ms-page\">\r\n      {won && <Confetti />}\r\n      <Card className=\"ms-card\" variant={'borderless'}>\r\n        <Space>\r\n          <Title level={3}>💣 Minesweeper </Title>\r\n        </Space>\r\n\r\n        <Flex\r\n          justify=\"center\"\r\n          align=\"center\"\r\n          style={{\r\n            gap: 8,\r\n            marginTop: 16,\r\n          }}\r\n        >\r\n          {!started && (\r\n            <Button style={{ width: '100%' }} type=\"primary\" onClick={startGame}>\r\n              Start\r\n            </Button>\r\n          )}\r\n          {started && (\r\n            <Button\r\n              style={{ width: '100%' }}\r\n              danger\r\n              onClick={() => {\r\n                resetAll();\r\n                message.info('Game reset. Choose settings and start.');\r\n              }}\r\n            >\r\n              Reset\r\n            </Button>\r\n          )}\r\n          <Button onClick={() => setIsSetupOpen(true)} type=\"dashed\" icon={<SettingOutlined />} />\r\n        </Flex>\r\n\r\n        {/* ----- Settings Controls ----- */}\r\n        <Row gutter={[12, 12]} align=\"middle\">\r\n          <Col xs={24} sm={12} md={10} lg={8}>\r\n            {/* Buttons */}\r\n\r\n            <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r\n              {isTouch && (\r\n                <>\r\n                  {' '}\r\n                  <div style={{ display: 'flex', gap: 12, alignItems: 'center' }}>\r\n                    <Text>Tap Mode:</Text>\r\n                    <Radio.Group\r\n                      value={tapMode}\r\n                      onChange={(e) => setTapMode(e.target.value)}\r\n                      optionType=\"button\"\r\n                      buttonStyle=\"solid\"\r\n                    >\r\n                      <Radio.Button value=\"reveal\">💣 Reveal</Radio.Button>\r\n                      <Radio.Button value=\"flag\">🚩 Flag</Radio.Button>\r\n                    </Radio.Group>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </Space>\r\n          </Col>\r\n\r\n          {/* ----- Game Info ----- */}\r\n          <Col xs={24} sm={12} md={14} lg={16}>\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>\r\n              <div>\r\n                <Text strong>Mines:</Text>\r\n                <div>{flagsLeft}</div>\r\n              </div>\r\n              <div>\r\n                <Text strong>Time:</Text>\r\n                <div>{timeSec}s</div>\r\n              </div>\r\n              <div>\r\n                <Text strong>Status:</Text>\r\n                <div>{gameOver ? (won ? 'Won ✅' : 'Lost ❌') : started ? 'Playing' : 'Idle'}</div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* ----- Game Board ----- */}\r\n        <div\r\n          className=\"ms-board-wrap\"\r\n          style={{\r\n            justifyContent: boardJustifyContent,\r\n          }}\r\n        >\r\n          <div\r\n            className=\"ms-board\"\r\n            style={{\r\n              gridTemplateColumns: `repeat(${cols}, ${cellSize}px)`,\r\n              gap: CELL_GAP,\r\n              position: 'relative',\r\n            }}\r\n          >\r\n            {board.length > 0\r\n              ? board.map((row) =>\r\n                  row.map((cell) => <CellView key={`${cell.r}-${cell.c}`} cell={cell} />),\r\n                )\r\n              : Array.from({ length: rows * cols }).map((_, i) => (\r\n                  <div\r\n                    key={i}\r\n                    className=\"ms-cell\"\r\n                    style={{\r\n                      width: cellSize,\r\n                      height: cellSize,\r\n                      lineHeight: `${cellSize}px`,\r\n                      fontSize: Math.floor(cellSize * 0.55),\r\n                      background: '#fafafa',\r\n                    }}\r\n                    onClick={startGame}\r\n                  />\r\n                ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* --- Overlays --- */}\r\n        {!started && !gameOver && (\r\n          <div className=\"ms-start-overlay\" onClick={startGame}>\r\n            CLICK TO START\r\n          </div>\r\n        )}\r\n\r\n        {gameOver && won && (\r\n          <div className=\"ms-win-overlay\" onClick={resetAll}>\r\n            🎉 YOU WIN 🎉\r\n          </div>\r\n        )}\r\n\r\n        {gameOver && !won && (\r\n          <div className=\"ms-lose-overlay\" onClick={resetAll}>\r\n            💥 YOU LOSE 💥\r\n          </div>\r\n        )}\r\n\r\n        {/* ----- Tips Section ----- */}\r\n        {showTips && (\r\n          <div className=\"ms-tips\">\r\n            <Title level={5}>Quick Tips</Title>\r\n            <ul>\r\n              <li>First click never hits a mine — mines are placed after your first click.</li>\r\n              <li>Right-click (or long press) to place a flag.</li>\r\n              <li>Double-click a number to chord if flags match.</li>\r\n              <li>Use custom mode for full control of board size.</li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n\r\n        <div style={{ marginTop: 12, textAlign: 'center' }}>\r\n          <Text type=\"secondary\">Made with ❤️ — responsive and mobile friendly.</Text>\r\n        </div>\r\n      </Card>\r\n      <SetupModal\r\n        visible={isSetupOpen}\r\n        onClose={() => setIsSetupOpen(false)}\r\n        difficulty={difficulty}\r\n        setDifficulty={setDifficulty}\r\n        rows={rows}\r\n        setRows={setRows}\r\n        cols={cols}\r\n        setCols={setCols}\r\n        mines={mines}\r\n        setMines={setMines}\r\n        showTips={showTips}\r\n        setShowTips={setShowTips}\r\n        started={started || gameOver || won}\r\n        startGame={startGame}\r\n        resetAll={resetAll}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MinesweeperPage;\r\n"],"names":[],"mappings":"iXAEO,IAAM,EAAmB,KAC9B,GAAM,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAC,CAAA,GAOvC,MALA,GAAA,WAAS,EAAC,KAER,EADiB,iBAAkB,QAAU,UAAU,cAAc,CAAG,GAE1E,EAAG,EAAE,EAEE,EACT,4NCVO,IAAM,EAAiB,CAAC,OAAQ,SAAU,eAAe,CACnD,EAAuB,CAAC,aAAc,WAAY,QAAS,MAAO,SAAU,gBAAiB,eAAgB,eAAgB,UAAW,SAAU,OAAQ,QAAQ,CAClK,EAAmB,CAAC,SAAU,QAAS,MAAO,aAAc,WAAY,aAAc,WAAY,WAAY,SAAU,UAAU,CACzI,EAAa,CAAC,EAAW,KAC7B,IAAM,EAAO,AAAe,CAAA,IAAf,EAAM,IAAI,CAAY,OAAS,EAAM,IAAI,CACtD,MAAO,CACL,CAAC,CAAC,EAAE,EAAU,MAAM,EAAE,EAAK,CAAC,CAAC,CAAE,GAAQ,EAAe,QAAQ,CAAC,EACjE,EACF,EACM,EAAc,CAAC,EAAW,KAC9B,IAAM,EAAW,CAAC,EAKlB,OAJA,EAAiB,OAAO,CAAC,IACvB,CAAQ,CAAC,CAAC,EAAE,EAAU,OAAO,EAAE,EAAO,CAAC,CAAC,CAAG,EAAM,KAAK,GAAK,EAC7D,GACA,CAAQ,CAAC,CAAC,EAAE,EAAU,cAAc,CAAC,CAAC,CAAG,CAAC,EAAM,KAAK,EAAI,CAAC,CAAC,EAAM,QAAQ,CAClE,EACT,EACM,EAAgB,CAAC,EAAW,KAChC,IAAM,EAAa,CAAC,EAIpB,OAHA,EAAqB,OAAO,CAAC,IAC3B,CAAU,CAAC,CAAC,EAAE,EAAU,SAAS,EAAE,EAAO,CAAC,CAAC,CAAG,EAAM,OAAO,GAAK,EACnE,GACO,EACT,ECtBM,EAAe,IACnB,GAAM,CACJ,aAAA,CAAY,CACb,CAAG,EACJ,MAAO,CACL,CAAC,EAAa,CAAE,CACd,QAAS,OACT,OAAQ,EACR,QAAS,EACT,aAAc,CACZ,cAAe,QACjB,EACA,QAAS,CACP,UAAW,KACb,EACA,UAAW,CACT,QAAS,MACX,CACF,CACF,EACF,EACM,EAAkB,IACtB,GAAM,CACJ,aAAA,CAAY,CACb,CAAG,EACJ,MAAO,CACL,CAAC,EAAa,CAAE,CACd,cAAe,CACb,IAAK,EAAM,SAAS,AACtB,EACA,eAAgB,CACd,IAAK,EAAM,OAAO,AACpB,EACA,cAAe,CACb,IAAK,EAAM,SAAS,AACtB,CACF,CACF,EACF,EACM,EAAmB,IACvB,GAAM,CACJ,aAAA,CAAY,CACb,CAAG,EACE,EAAY,CAAC,EAMnB,OALA,EAAe,OAAO,CAAC,IACrB,CAAS,CAAC,CAAC,EAAE,EAAa,MAAM,EAAE,EAAM,CAAC,CAAC,CAAG,CAC3C,SAAU,CACZ,EACF,GACO,EACT,EACM,EAAqB,IACzB,GAAM,CACJ,aAAA,CAAY,CACb,CAAG,EACE,EAAa,CAAC,EAMpB,OALA,EAAiB,OAAO,CAAC,IACvB,CAAU,CAAC,CAAC,EAAE,EAAa,OAAO,EAAE,EAAM,CAAC,CAAC,CAAG,CAC7C,WAAY,CACd,EACF,GACO,EACT,EACM,EAAyB,IAC7B,GAAM,CACJ,aAAA,CAAY,CACb,CAAG,EACE,EAAe,CAAC,EAMtB,OALA,EAAqB,OAAO,CAAC,IAC3B,CAAY,CAAC,CAAC,EAAE,EAAa,SAAS,EAAE,EAAM,CAAC,CAAC,CAAG,CACjD,eAAgB,CAClB,EACF,GACO,EACT,MAEA,EAAe,GAAA,eAAa,EAAC,OAAQ,IACnC,GAAM,CACJ,UAAA,CAAS,CACT,QAAA,CAAO,CACP,UAAA,CAAS,CACV,CAAG,EACE,EAAY,GAAA,YAAU,EAAC,EAAO,CAClC,UAAW,EACX,QAAS,EACT,UAAW,CACb,GACA,MAAO,CAAC,EAAa,GAAY,EAAgB,GAAY,EAAiB,GAAY,EAAmB,GAAY,EAAuB,GAAW,CAC7J,EAbqC,IAAO,CAAA,CAAC,CAAA,EAanB,CAGxB,WAAY,CAAA,CACd,GC5FI,EAAS,IAAI,EAAI,IAAI,CAAC,MAAM,EAAI,SAAU,CAAC,CAAE,CAAC,EAChD,IAAI,EAAI,CAAC,EACT,IAAK,IAAI,KAAK,EAAO,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,EAAG,IAAM,AAAe,EAAf,EAAE,OAAO,CAAC,IAAQ,CAAA,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,AAAD,EAC/F,GAAI,AAAK,MAAL,GAAa,AAAwC,YAAxC,OAAO,OAAO,qBAAqB,CAAiB,IAAK,IAAI,EAAI,EAAG,EAAI,OAAO,qBAAqB,CAAC,GAAI,EAAI,EAAE,MAAM,CAAE,IAChH,EAAlB,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,GAAS,OAAO,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAG,CAAC,CAAC,EAAE,GAAG,CAAA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,AAAD,EAElG,OAAO,EACT,EAQA,IAAM,EAAoB,SAAK,CAAC,UAAU,CAAC,CAAC,EAAO,KACjD,GAAM,CACF,UAAW,CAAkB,CAC7B,cAAA,CAAa,CACb,UAAA,CAAS,CACT,MAAA,CAAK,CACL,KAAA,CAAI,CACJ,IAAA,CAAG,CACH,SAAA,CAAQ,CACR,SAAA,EAAW,CAAA,CAAK,CAChB,UAAW,EAAY,KAAK,CAC7B,CAAG,EACJ,EAAc,EAAO,EAAO,CAAC,YAAa,gBAAiB,YAAa,QAAS,OAAQ,MAAO,WAAY,WAAY,YAAY,EAChI,CACJ,KAAM,CAAO,CACb,UAAW,CAAY,CACvB,aAAA,CAAY,CACb,CAAG,SAAK,CAAC,UAAU,CAAC,eAAa,EAC5B,EAAY,EAAa,OAAQ,GACjC,CAAC,EAAY,EAAQ,EAAU,CAAG,EAAS,GAC3C,EAAiB,MAAA,EAA2C,EAAW,MAAA,EAAyC,KAAK,EAAI,EAAQ,QAAQ,CACzI,EAAY,GAAA,SAAU,EAAC,EAAW,EAAe,MAAA,EAAyC,KAAK,EAAI,EAAQ,SAAS,CAAE,EAAW,EAAQ,KFZxI,SAAU,EAAC,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,EAAG,EEY+G,EAAW,IFZ3F,EEYgF,EAAW,IFZ3D,EEYgD,EAAW,KAAQ,CAChM,CAAC,CAAC,EAAE,EAAU,IAAI,CAAC,CAAC,CAAE,AAAiB,QAAjB,EACtB,CAAC,CAAC,EAAE,EAAU,KAAK,EAAE,EAAI,CAAC,CAAC,CAAE,GAAA,cAAY,EAAC,GAC1C,CAAC,CAAC,EAAE,EAAU,SAAS,CAAC,CAAC,CAAE,CAC7B,GACM,EAAc,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,EAAG,MAAA,EAAyC,KAAK,EAAI,EAAQ,KAAK,EAAG,GAOtH,OANI,GACF,CAAA,EAAY,IAAI,CAAG,CAAG,EAEpB,GAAO,CAAC,GAAA,cAAY,EAAC,IACvB,CAAA,EAAY,GAAG,CAAG,CAAE,EAEf,EAAwB,SAAK,CAAC,aAAa,CAAC,EAAW,OAAO,MAAM,CAAC,CAC1E,IAAK,EACL,UAAW,EACX,MAAO,CACT,EAAG,GAAA,SAAI,EAAC,EAAa,CAAC,UAAW,OAAQ,QAAQ,GAAI,IACvD,0QCpDA,GAAM,CAAE,KAAA,EAAI,CAAE,CAAG,SAAU,CAsBrB,GAAwC,CAAC,CAC7C,QAAA,CAAO,CACP,QAAA,CAAO,CACP,WAAA,CAAU,CACV,cAAA,CAAa,CACb,KAAA,CAAI,CACJ,QAAA,CAAO,CACP,KAAA,CAAI,CACJ,QAAA,CAAO,CACP,MAAA,CAAK,CACL,SAAA,CAAQ,CACR,SAAA,CAAQ,CACR,YAAA,CAAW,CACX,QAAA,CAAO,CACP,UAAA,CAAS,CACT,SAAA,CAAQ,CACT,IAEC,GAAM,CAAC,EAAgB,EAAkB,CAAG,GAAA,UAAQ,EAAa,GAC3D,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAC,GACnC,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAC,GACnC,CAAC,EAAW,EAAa,CAAG,GAAA,UAAQ,EAAC,GACrC,CAAC,EAAc,EAAgB,CAAG,GAAA,UAAQ,EAAC,SAGjD,GAAA,WAAS,EAAC,KACJ,IACF,EAAkB,GAClB,EAAY,GACZ,EAAY,GACZ,EAAa,GACb,EAAgB,IAEpB,EAAG,CAAC,EAAQ,EAgCV,UAAC,UAAK,EACJ,KAAM,EACN,SAAU,EACV,OAAQ,KACR,aAAc,CAAA,EACd,QAAQ,IACR,MAAM,sBAEN,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,EAAG,YAE9D,WAAC,iBACC,UAAC,IAAK,MAAM,aAAC,gBACb,WAAC,SAAK,CAAC,KAAK,EACV,MAAO,EACP,SAAU,AAAC,GAAM,EAAkB,EAAE,MAAM,CAAC,KAAK,EACjD,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,UAAW,EAAG,IAAK,CAAE,YAExE,UAAC,SAAK,EAAC,MAAM,oBAAW,gCACxB,UAAC,SAAK,EAAC,MAAM,wBAAe,sCAC5B,UAAC,SAAK,EAAC,MAAM,oBAAW,kCACxB,UAAC,SAAK,EAAC,MAAM,kBAAS,iBAKzB,AAAmB,WAAnB,GACC,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,SAAU,SAAU,MAAO,YAC7E,UAAC,aAAK,UACN,UAAC,UAAW,EAAC,IAAK,EAAG,IAAK,GAAI,MAAO,EAAU,SAAU,AAAC,GAAM,EAAY,GAAK,KACjF,UAAC,aAAK,UACN,UAAC,UAAW,EAAC,IAAK,EAAG,IAAK,GAAI,MAAO,EAAU,SAAU,AAAC,GAAM,EAAY,GAAK,KACjF,UAAC,aAAK,WACN,UAAC,UAAW,EACV,IAAK,GACL,IAAK,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAW,EAAW,IACtD,MAAO,EACP,SAAU,AAAC,GAAM,EAAa,GAAK,SAMzC,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,QAAS,YAC3D,UAAC,aAAK,eACN,UAAC,UAAM,EAAC,QAAS,EAAc,SAAU,OAI3C,WAAC,SAAK,EAAC,MAAO,CAAE,eAAgB,WAAY,QAAS,OAAQ,UAAW,CAAE,YACxE,UAAC,SAAM,EAAC,QAAS,EAAS,MAAM,aAAC,WAGjC,UAAC,SAAM,EAAC,KAAK,UAAU,QAjFT,KACpB,IAAM,EAAe,KACnB,EAAc,GACd,EAAQ,GACR,EAAQ,GACR,EAAS,GACT,EAAY,GACZ,IACA,IACA,SAAO,CAAC,OAAO,CAAC,uBAClB,EAGI,EACF,UAAK,CAAC,OAAO,CAAC,CACZ,MAAO,gBACP,QACE,sFACF,OAAQ,eACR,WAAY,mBACZ,SAAU,CAAA,EACV,KAAM,CACR,GAEA,IAEJ,WAuDuD,oBAOzD,EC3IM,CAAE,MAAA,EAAK,CAAE,KAAA,EAAI,CAAE,CAAG,SAAU,CAqB5B,GAAyE,CAC7E,SAAU,CAAE,KAAM,EAAG,KAAM,EAAG,MAAO,EAAG,EACxC,aAAc,CAAE,KAAM,GAAI,KAAM,GAAI,MAAO,EAAG,EAC9C,SAAU,CAAE,KAAM,GAAI,KAAM,GAAI,MAAO,EAAG,CAC5C,EAGM,GAAQ,CAAC,EAAW,EAAW,IAAc,KAAK,GAAG,CAAC,EAAG,KAAK,GAAG,CAAC,EAAG,IAErE,GAA4B,KAIhC,GAAM,CAAC,EAAY,EAAc,CAAG,GAAA,UAAQ,EAAa,YACnD,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAS,GACnC,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAS,GACnC,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAS,IACrC,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC5C,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAoB,UAKpD,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAW,EAAE,EACzC,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC1C,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAU,CAAA,GAC5C,CAAC,EAAK,EAAO,CAAG,GAAA,UAAQ,EAAU,CAAA,GAClC,CAAC,EAAW,EAAa,CAAG,GAAA,UAAQ,EAAS,GAC7C,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAS,GACzC,CAAC,EAAa,EAAe,CAAG,GAAA,UAAQ,EAAC,CAAA,GAGzC,EAAW,GAAA,QAAM,EAAgB,MACjC,EAAgB,GAAA,QAAM,EAAU,CAAA,GAEhC,EAAW,GAAA,aAAW,IACtB,EAAU,IAEV,EAAW,GAAA,SAAO,EAAC,IAAO,EAAW,EAAI,EAAI,CAAC,EAAS,EAKvD,EAAW,GAAA,SAAO,EAAC,IACvB,AAAI,EACF,AAAI,GAAQ,EAAU,GAClB,GAAQ,GAAW,GACnB,GAAQ,GAAW,GAChB,GAEP,AAAI,GAAQ,EAAU,GAClB,GAAQ,GAAW,GACnB,GAAQ,GAAW,GAChB,GAER,CAAC,EAAM,EAAS,EAMb,EAAsB,GAAA,SAAO,EAAC,KAClC,IAAM,EAAa,OAAO,UAAU,CAIpC,MAAO,AAFY,CAAA,EAAW,AAAW,EAAX,CAAW,EAAK,EAC7B,CAAA,EAAW,EAAa,EAAa,GAAa,EACrC,aAAe,SAC/C,EAAG,CAAC,EAAU,EAAM,EAAS,EAK7B,GAAA,WAAS,EAAC,KACR,GAAI,AAAe,WAAf,EAAyB,OAC7B,IAAM,EAAI,EAAO,CAAC,EAAW,CACxB,IACL,EAAQ,EAAE,IAAI,EACd,EAAQ,EAAE,IAAI,EACd,EAAS,EAAE,KAAK,GAClB,EAAG,CAAC,EAAW,EAGf,GAAA,WAAS,EAAC,KACR,EAAQ,AAAC,GAAM,GAAM,EAAG,EAAG,KAC3B,EAAQ,AAAC,GAAM,GAAM,EAAG,EAAG,KAC3B,IAAM,EAAW,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAO,EAAO,IAC1D,EAAS,AAAC,GAAM,GAAM,EAAG,GAAI,IAC/B,EAAG,CAAC,EAAM,EAAK,EAKf,IAAM,EAAmB,CAAC,EAAW,IACnC,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,CAAC,EAAG,IAC5B,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,CAAC,EAAG,IAAO,CAAA,CACnC,EAAA,EACA,EAAA,EACA,MAAO,CAAA,EACP,SAAU,CAAA,EACV,QAAS,CAAA,EACT,SAAU,CACZ,CAAA,IAOE,EAAa,CAAC,EAAa,EAAe,EAAe,KAC7D,IAAM,EAAI,EAAE,MAAM,CACZ,EAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CACf,EAA6B,EAAE,CAGrC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACM,GAAvB,KAAK,GAAG,CAAC,EAAI,IAAe,AAAuB,GAAvB,KAAK,GAAG,CAAC,EAAI,IAC7C,EAAO,IAAI,CAAC,CAAC,EAAG,EAAE,EAKtB,IAAK,IAAI,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IAAK,CAC1C,IAAM,EAAI,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAI,CAAA,GAC1C,CAAC,CAAM,CAAC,EAAE,CAAE,CAAM,CAAC,EAAE,CAAC,CAAG,CAAC,CAAM,CAAC,EAAE,CAAE,CAAM,CAAC,EAAE,CAAC,CACjD,CAIA,AADe,EAAO,KAAK,CAAC,EAAG,GACxB,OAAO,CAAC,CAAC,CAAC,EAAG,EAAE,GAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAG,CAAA,GAG5C,IAAM,EAAO,CAAC,GAAI,EAAG,EAAE,CACvB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAE,CACjB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAG,GACnB,SACF,CACA,IAAI,EAAQ,EACZ,IAAK,IAAI,KAAM,EACb,IAAK,IAAI,KAAM,EAAM,CACnB,GAAI,AAAO,IAAP,GAAY,AAAO,IAAP,EAAU,SAC1B,IAAM,EAAK,EAAI,EACT,EAAK,EAAI,EACX,GAAM,GAAK,EAAK,GAAK,GAAM,GAAK,EAAK,GAAK,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,KAAK,EAAE,IACjE,CACF,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAG,EACrB,CAEJ,EAKM,EAAY,KAChB,IAAM,EAAI,GAAM,EAAM,EAAG,IACnB,EAAI,GAAM,EAAM,EAAG,IAEnB,EAAI,GAAM,EAAO,GADN,KAAK,GAAG,CAAC,GAAI,KAAK,GAAG,CAAC,IAAK,EAAI,EAAI,KAIpD,EAAQ,GACR,EAAQ,GACR,EAAS,GAGT,IACA,EAAc,OAAO,CAAG,CAAA,EACxB,EAAW,CAAA,GACX,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,EAAa,GACb,EAAW,GACX,EAAS,EAAiB,EAAG,IAC7B,SAAO,CAAC,OAAO,CAAC,sEAClB,EAKM,EAAa,KACb,EAAS,OAAO,GAClB,OAAO,aAAa,CAAC,EAAS,OAAO,EACrC,EAAS,OAAO,CAAG,MAEvB,EAEM,EAAa,KACb,EAAS,OAAO,EACpB,CAAA,EAAS,OAAO,CAAG,OAAO,WAAW,CAAC,IAAM,EAAW,AAAC,GAAM,EAAI,GAAI,IAAI,EAC5E,EAKM,EAAa,CAAC,EAAW,EAAW,KACxC,GAAI,EAAU,OACd,IAAM,EAAI,GAAY,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IAChE,EAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CACpB,GAAI,CAAC,GAAQ,EAAK,QAAQ,EAAI,EAAK,OAAO,CAAE,OAAO,EAKnD,GAHA,EAAK,QAAQ,CAAG,CAAA,EAGZ,EAAK,KAAK,CAAE,CACd,IAAK,IAAI,EAAK,EAAG,EAAK,EAAE,MAAM,CAAE,IAC9B,IAAK,IAAI,EAAK,EAAG,EAAK,CAAC,CAAC,EAAE,CAAC,MAAM,CAAE,IAAU,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,QAAQ,CAAG,CAAA,CAAG,EAMxF,OALA,EAAS,GACT,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,IACA,SAAO,CAAC,KAAK,CAAC,mCACP,EACT,CAIA,GAAI,AAAkB,IAAlB,EAAK,QAAQ,CAAQ,CACvB,IAAM,EAAI,EAAE,MAAM,CACZ,EAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAGf,EAA4B,CAAC,CAAC,EAAG,EAAE,CAAC,CAIpC,EAAO,CAAC,GAAI,EAAG,EAAE,CAGvB,KAAO,EAAM,MAAM,EAAE,CAEnB,GAAM,CAAC,EAAI,EAAG,CAAG,EAAM,GAAG,GAG1B,IAAK,IAAI,KAAM,EACb,IAAK,IAAI,KAAM,EAAM,CACnB,IAAM,EAAK,EAAK,EACV,EAAK,EAAK,EAGhB,GAAI,EAAK,GAAK,EAAK,GAAK,GAAM,GAAK,GAAM,EAAG,SAG5C,IAAM,EAAQ,CAAC,CAAC,EAAG,CAAC,EAAG,EAGlB,GAAS,EAAM,QAAQ,EAAI,EAAM,OAAO,GAG7C,EAAM,QAAQ,CAAG,CAAA,EAKM,IAAnB,EAAM,QAAQ,EAAW,EAAM,KAAK,EAAE,EAAM,IAAI,CAAC,CAAC,EAAI,EAAG,GAC/D,CACJ,CACF,CAGA,OADA,EAAS,GACF,EACT,EAKM,EAAoB,AAAC,GACzB,EAAE,KAAK,CAAC,AAAC,GAAQ,EAAI,KAAK,CAAC,AAAC,GAAS,EAAK,KAAK,EAAI,EAAK,QAAQ,GAK5D,GAAc,CAAC,EAAW,KAC9B,GAAI,GAAY,EAAK,OAGrB,IAAI,EAAI,EACJ,EAAc,OAAO,GAEvB,EADA,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACtC,EAAG,EAAG,GACpB,EAAc,OAAO,CAAG,CAAA,EACxB,KAGF,IAAM,EAAQ,EAAW,EAAG,EAAG,GAC1B,GAED,CAAC,GAAY,EAAkB,KACjC,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,EAAa,AAAC,GAAM,KAAK,GAAG,CAAC,EAAG,IAChC,SAAO,CAAC,OAAO,CAAC,oDAEpB,EAKM,GAAe,CAAC,EAAqB,EAAW,KAEpD,GADA,EAAE,cAAc,GACZ,CAAC,GAAW,GAAY,EAAK,OACjC,IAAM,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACpD,EAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CACpB,IAAI,EAAK,QAAQ,EAGjB,GAAI,EAAK,OAAO,CACd,EAAK,OAAO,CAAG,CAAA,EACf,EAAa,AAAC,GAAM,EAAI,OACnB,CACL,GAAI,GAAa,EAAG,OAAO,SAAO,CAAC,OAAO,CAAC,iBAC3C,EAAK,OAAO,CAAG,CAAA,EACf,EAAa,AAAC,GAAM,EAAI,GAC1B,CACA,EAAS,GAGL,EAAkB,KACpB,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,SAAO,CAAC,OAAO,CAAC,qDAEpB,EAKM,GAAU,CAAC,EAAW,KAC1B,GAAI,GAAY,EAAK,OACrB,IAAM,EAAO,CAAK,CAAC,EAAE,CAAC,EAAE,CACxB,GAAI,CAAC,GAAQ,CAAC,EAAK,QAAQ,EAAI,EAAK,QAAQ,EAAI,EAAG,OAGnD,IAAM,EAAI,EAAM,MAAM,CAChB,EAAI,CAAK,CAAC,EAAE,CAAC,MAAM,CACrB,EAAU,EACR,EAA6B,EAAE,CAErC,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IACzB,IAAK,IAAI,EAAK,GAAI,GAAM,EAAG,IAAM,CAC/B,GAAI,AAAO,IAAP,GAAY,AAAO,IAAP,EAAU,SAC1B,IAAM,EAAK,EAAI,EACT,EAAK,EAAI,GACX,CAAA,EAAK,CAAA,IAAK,CAAA,EAAK,CAAA,IAAK,CAAA,GAAM,CAAA,IAAK,CAAA,GAAM,CAAA,IACzC,EAAO,IAAI,CAAC,CAAC,EAAI,EAAG,EAChB,CAAK,CAAC,EAAG,CAAC,EAAG,CAAC,OAAO,EAAE,KAC7B,CAEF,GAAI,IAAY,EAAK,QAAQ,CAAE,OAG/B,IAAI,EAAI,EAAM,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,AAAC,GAAU,CAAA,CAAE,GAAG,CAAI,AAAC,CAAA,IACxD,IAAK,GAAM,CAAC,EAAI,EAAG,GAAI,EACrB,GAAI,CAAC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,OAAO,EAAI,CAAC,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,QAAQ,GAE3C,EAAI,AADQ,EAAW,EAAI,EAAI,IACpB,EACP,GAAU,MAIlB,EAAS,GACL,CAAC,GAAY,EAAkB,KACjC,EAAO,CAAA,GACP,EAAY,CAAA,GACZ,IACA,SAAO,CAAC,OAAO,CAAC,oDAEpB,EAKM,GAAW,KACf,IACA,EAAW,CAAA,GACX,EAAS,EAAE,EACX,EAAY,CAAA,GACZ,EAAO,CAAA,GACP,EAAa,GACb,EAAW,GACX,EAAc,OAAO,CAAG,CAAA,EAC1B,EAGA,GAAA,WAAS,EAAC,IAAM,IAAM,IAAc,EAAE,EAKtC,IAAM,GAAqC,CAAC,CAAE,KAAA,CAAI,CAAE,IAClD,IAAM,EAAM,CAAC,UAAU,QACnB,EAAK,QAAQ,EAAE,EAAI,IAAI,CAAC,eACxB,EAAK,OAAO,EAAE,EAAI,IAAI,CAAC,cACvB,EAAK,KAAK,EAAI,EAAK,QAAQ,EAAE,EAAI,IAAI,CAAC,WASxC,UAAC,OACC,UAAW,EAAI,IAAI,CAAC,KACpB,MAAO,CACL,MAAO,EACP,OAAQ,EACR,WAAY,CAAC,EAAE,EAAS,EAAE,CAAC,CAC3B,SAAU,KAAK,KAAK,CAAC,AAAW,IAAX,EACvB,EACA,QAfY,AAAC,IACf,EAAE,cAAc,GACZ,AAAY,WAAZ,EAAsB,GAAY,EAAK,CAAC,CAAE,EAAK,CAAC,EAC/C,GAAa,EAAG,EAAK,CAAC,CAAE,EAAK,CAAC,EACrC,EAYI,cAAe,AAAC,GAAM,GAAa,EAAG,EAAK,CAAC,CAAE,EAAK,CAAC,EACpD,cAAe,IAAM,GAAQ,EAAK,CAAC,CAAE,EAAK,CAAC,WAG1C,EAAK,QAAQ,CACZ,EAAK,KAAK,CACR,YACE,EAAK,QAAQ,CAAG,EAClB,UAAC,QAAK,UAAW,CAAC,cAAc,EAAE,EAAK,QAAQ,CAAC,CAAC,UAAG,EAAK,QAAQ,GAEjE,GAEA,EAAK,OAAO,CACd,YAEA,KAIR,EAKA,MACE,WAAC,OAAI,UAAU,oBACZ,GAAO,UAAC,SAAQ,KACjB,WAAC,SAAI,EAAC,UAAU,UAAU,QAAS,uBACjC,UAAC,SAAK,WACJ,UAAC,IAAM,MAAO,WAAG,6BAGnB,WAAC,GACC,QAAQ,SACR,MAAM,SACN,MAAO,CACL,IAAK,EACL,UAAW,EACb,YAEC,CAAC,GACA,UAAC,SAAM,EAAC,MAAO,CAAE,MAAO,MAAO,EAAG,KAAK,UAAU,QAAS,WAAW,UAItE,GACC,UAAC,SAAM,EACL,MAAO,CAAE,MAAO,MAAO,EACvB,MAAM,IACN,QAAS,KACP,KACA,SAAO,CAAC,IAAI,CAAC,0CACf,WACD,UAIH,UAAC,SAAM,EAAC,QAAS,IAAM,EAAe,CAAA,GAAO,KAAK,SAAS,KAAM,UAAC,SAAe,UAInF,WAAC,SAAG,EAAC,OAAQ,CAAC,GAAI,GAAG,CAAE,MAAM,mBAC3B,UAAC,SAAG,EAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,WAG/B,UAAC,SAAK,EAAC,UAAU,WAAW,KAAK,QAAQ,MAAO,CAAE,MAAO,MAAO,WAC7D,GACC,iCACG,IACD,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,QAAS,YAC3D,UAAC,aAAK,cACN,WAAC,SAAK,CAAC,KAAK,EACV,MAAO,EACP,SAAU,AAAC,GAAM,EAAW,EAAE,MAAM,CAAC,KAAK,EAC1C,WAAW,SACX,YAAY,kBAEZ,UAAC,SAAK,CAAC,MAAM,EAAC,MAAM,kBAAS,qBAC7B,UAAC,SAAK,CAAC,MAAM,EAAC,MAAM,gBAAO,gCASvC,UAAC,SAAG,EAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,YAC/B,WAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,eAAgB,WAAY,IAAK,EAAG,YACjE,WAAC,iBACC,UAAC,IAAK,MAAM,aAAC,WACb,UAAC,gBAAK,OAER,WAAC,iBACC,UAAC,IAAK,MAAM,aAAC,UACb,WAAC,iBAAK,EAAQ,UAEhB,WAAC,iBACC,UAAC,IAAK,MAAM,aAAC,YACb,UAAC,gBAAK,EAAY,EAAM,aAAU,cAAY,EAAU,UAAY,oBAO5E,UAAC,OACC,UAAU,gBACV,MAAO,CACL,eAAgB,CAClB,WAEA,UAAC,OACC,UAAU,WACV,MAAO,CACL,oBAAqB,CAAC,OAAO,EAAE,EAAK,EAAE,EAAE,EAAS,GAAG,CAAC,CACrD,IAAK,EACL,SAAU,UACZ,WAEC,EAAM,MAAM,CAAG,EACZ,EAAM,GAAG,CAAC,AAAC,GACT,EAAI,GAAG,CAAC,AAAC,GAAS,UAAC,IAAqC,KAAM,GAA7B,CAAC,EAAE,EAAK,CAAC,CAAC,CAAC,EAAE,EAAK,CAAC,CAAC,CAAC,IAExD,MAAM,IAAI,CAAC,CAAE,OAAQ,EAAO,CAAK,GAAG,GAAG,CAAC,CAAC,EAAG,IAC1C,UAAC,OAEC,UAAU,UACV,MAAO,CACL,MAAO,EACP,OAAQ,EACR,WAAY,CAAC,EAAE,EAAS,EAAE,CAAC,CAC3B,SAAU,KAAK,KAAK,CAAC,AAAW,IAAX,GACrB,WAAY,SACd,EACA,QAAS,GATJ,QAgBhB,CAAC,GAAW,CAAC,GACZ,UAAC,OAAI,UAAU,mBAAmB,QAAS,WAAW,mBAKvD,GAAY,GACX,UAAC,OAAI,UAAU,iBAAiB,QAAS,YAAU,gCAKpD,GAAY,CAAC,GACZ,UAAC,OAAI,UAAU,kBAAkB,QAAS,YAAU,iCAMrD,GACC,WAAC,OAAI,UAAU,oBACb,UAAC,IAAM,MAAO,WAAG,eACjB,WAAC,gBACC,UAAC,eAAG,kFACJ,UAAC,eAAG,iDACJ,UAAC,eAAG,mDACJ,UAAC,eAAG,0DAKV,UAAC,OAAI,MAAO,CAAE,UAAW,GAAI,UAAW,QAAS,WAC/C,UAAC,IAAK,KAAK,qBAAY,uEAG3B,UAAC,IACC,QAAS,EACT,QAAS,IAAM,EAAe,CAAA,GAC9B,WAAY,EACZ,cAAe,EACf,KAAM,EACN,QAAS,EACT,KAAM,EACN,QAAS,EACT,MAAO,EACP,SAAU,EACV,SAAU,EACV,YAAa,EACb,QAAS,GAAW,GAAY,EAChC,UAAW,EACX,SAAU,QAIlB"}