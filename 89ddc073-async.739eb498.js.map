{"version":3,"sources":["node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/native.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/v4.js","src/pages/UUID/index.tsx"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { Button, Card, Space, Typography } from 'antd';\r\nimport React from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './styles.less';\r\n\r\nconst { Title, Text, Paragraph } = Typography;\r\n\r\nconst UUIDPage: React.FC = () => {\r\n  const [value, setValue] = React.useState(uuidv4());\r\n\r\n  return (\r\n    <Card title=\"UUID Generator\" className=\"uuid-card\">\r\n      {/* Page Description */}\r\n      <Paragraph type=\"secondary\" className=\"uuid-description\">\r\n        This page allows you to{' '}\r\n        <Text strong>generate random UUIDs (Universally Unique Identifiers)</Text>. UUIDs are\r\n        commonly used for unique record IDs, API keys, session tokens, and more.\r\n      </Paragraph>\r\n\r\n      <Space direction=\"vertical\" size=\"middle\" className=\"uuid-content\">\r\n        {/* UUID Display */}\r\n        <Text className=\"uuid-value\" copyable>\r\n          {value}\r\n        </Text>\r\n\r\n        {/* Generate Button */}\r\n        <Button type=\"primary\" className=\"uuid-button\" onClick={() => setValue(uuidv4())} block>\r\n          Generate New UUID\r\n        </Button>\r\n\r\n        {/* --- User Guide Section --- */}\r\n        <div className=\"uuid-guide\">\r\n          <Title level={5}>ðŸ“˜ How to Use</Title>\r\n          <Paragraph>\r\n            <Text strong>1.</Text> Click the <Text code>Generate New UUID</Text> button to create a\r\n            new unique ID.\r\n            <br />\r\n            <Text strong>2.</Text> Click the <Text code>copy</Text> icon beside the value to copy it\r\n            to your clipboard.\r\n            <br />\r\n            <Text strong>3.</Text> Use the generated UUID wherever a unique identifier is required.\r\n            <br />\r\n            <Text type=\"secondary\">\r\n              ðŸ’¡ Tip: UUIDs are globally unique â€” no two values will ever be the same.\r\n            </Text>\r\n          </Paragraph>\r\n        </div>\r\n      </Space>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default UUIDPage;\r\n"],"names":[],"mappings":"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"}