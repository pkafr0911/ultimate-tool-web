{"version":3,"sources":["node_modules/@ant-design/icons-svg/es/asn/InfoCircleOutlined.js","node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js","node_modules/@ant-design/icons/es/icons/LoadingOutlined.js","src/pages/PNGJPEG/index.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar InfoCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"info-circle\", \"theme\": \"outlined\" };\nexport default InfoCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport InfoCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/InfoCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar InfoCircleOutlined = function InfoCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: InfoCircleOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(InfoCircleOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'InfoCircleOutlined';\n}\nexport default RefIcon;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LoadingOutlinedSvg from \"@ant-design/icons-svg/es/asn/LoadingOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar LoadingOutlined = function LoadingOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LoadingOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(LoadingOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'LoadingOutlined';\n}\nexport default RefIcon;","import { handleCopy } from '@/helpers';\nimport {\n  CopyOutlined,\n  DownloadOutlined,\n  InfoCircleOutlined,\n  LoadingOutlined,\n  UploadOutlined,\n} from '@ant-design/icons';\nimport { PageContainer } from '@ant-design/pro-components';\nimport {\n  Button,\n  Card,\n  Col,\n  InputNumber,\n  Row,\n  Space,\n  Spin,\n  Tabs,\n  Tooltip,\n  Typography,\n  Upload,\n  message,\n} from 'antd';\nimport ImageTracer from 'imagetracerjs';\nimport React, { useRef, useState } from 'react';\n\nconst { Title } = Typography;\nconst { TabPane } = Tabs;\n\nconst PNGJPEG: React.FC = () => {\n  const [file, setFile] = useState<File | null>(null);\n  const [preview, setPreview] = useState<string | null>(null);\n  const [svgContent, setSvgContent] = useState<string | null>(null);\n  const [dragging, setDragging] = useState(false);\n  const [processing, setProcessing] = useState(false);\n\n  const dragCounter = useRef(0);\n\n  // Tracing options\n  const [scale, setScale] = useState(1);\n  const [ltres, setLtres] = useState(1);\n  const [qtres, setQtres] = useState(1);\n  const [pathomit, setPathomit] = useState(8);\n  const [colorsampling, setColorsampling] = useState(2);\n  const [strokewidth, setStrokewidth] = useState(1);\n\n  const handleUpload = (file: File) => {\n    setFile(file);\n    const reader = new FileReader();\n    reader.onload = (e) => setPreview(e.target?.result as string);\n    reader.readAsDataURL(file);\n    setDragging(false);\n    dragCounter.current = 0;\n    return false;\n  };\n\n  const handleConvert = () => {\n    if (!preview) {\n      message.error('Please upload an image first.');\n      return;\n    }\n\n    setProcessing(true); // 👈 start loading animation\n    try {\n      ImageTracer.imageToSVG(\n        preview,\n        (svgString) => {\n          setSvgContent(svgString);\n          setProcessing(false); // 👈 stop loading\n          message.success('Image converted to SVG successfully!');\n        },\n        { scale, ltres, qtres, pathomit, colorsampling, strokewidth },\n      );\n    } catch (err: any) {\n      console.error(err);\n      setProcessing(false); // 👈 stop loading on error\n      message.error('Error converting image to SVG.');\n    }\n  };\n\n  const handleDownload = (content: string, filename: string) => {\n    const blob = new Blob([content], { type: 'image/svg+xml' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  };\n\n  const handleClear = () => {\n    setFile(null);\n    setPreview(null);\n    setSvgContent(null);\n    message.info('Image and SVG cleared.');\n  };\n\n  // Generate Base64 and Data URI\n  const svgBase64 = svgContent ? btoa(unescape(encodeURIComponent(svgContent))) : '';\n  const svgDataURI = svgContent ? `data:image/svg+xml;base64,${svgBase64}` : '';\n\n  return (\n    <PageContainer>\n      <div\n        onDragEnter={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          dragCounter.current++;\n          setDragging(true);\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        onDragLeave={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          dragCounter.current--;\n          if (dragCounter.current <= 0) {\n            dragCounter.current = 0;\n            setDragging(false);\n          }\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          setDragging(false);\n          dragCounter.current = 0;\n          const files = e.dataTransfer.files;\n          if (files.length > 0) handleUpload(files[0]);\n        }}\n        style={{ position: 'relative', minHeight: '100vh' }}\n      >\n        <Card title=\"🖼️ Image to SVG Converter\" variant={'borderless'}>\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\n            {!dragging && (\n              <Upload beforeUpload={handleUpload} showUploadList={false} accept=\".png,.jpg,.jpeg\">\n                <Button icon={<UploadOutlined />}>Upload Image (PNG/JPG)</Button>\n              </Upload>\n            )}\n\n            {dragging && (\n              <div\n                style={{\n                  position: 'fixed',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  height: '100%',\n                  zIndex: 9999,\n                  background: 'rgba(0,0,0,0.1)',\n                  border: '2px dashed #1890ff',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                  padding: 20,\n                }}\n              >\n                <UploadOutlined style={{ fontSize: 48, color: '#000000' }} />\n                <p style={{ fontSize: 18, marginTop: 8 }}>Drop file anywhere to upload</p>\n              </div>\n            )}\n\n            {/* Preview */}\n            {preview && (\n              <div style={{ textAlign: 'center' }}>\n                <Title level={5}>Preview:</Title>\n                <img\n                  src={preview}\n                  alt=\"preview\"\n                  style={{\n                    maxWidth: '100%',\n                    maxHeight: 300,\n                    borderRadius: 6,\n                    border: '1px solid #eee',\n                  }}\n                />\n              </div>\n            )}\n\n            {/* === PROCESSING OVERLAY === */}\n            {processing && (\n              <div\n                style={{\n                  position: 'fixed',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  height: '100%',\n                  background: 'rgba(255, 255, 255, 0.7)',\n                  zIndex: 10000,\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  flexDirection: 'column',\n                }}\n              >\n                <Spin\n                  indicator={<LoadingOutlined style={{ fontSize: 48, color: '#1890ff' }} spin />}\n                  tip=\"Converting image to SVG...\"\n                  size=\"large\"\n                />\n              </div>\n            )}\n\n            {/* Tracing Options */}\n            <Card size=\"small\" title=\"Tracing Options (Adjust before converting)\">\n              <Row gutter={16}>\n                <Col span={4}>\n                  <Tooltip title=\"Scale factor for the SVG output. Higher = larger SVG.\">\n                    <label>\n                      Scale <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber\n                    min={0.1}\n                    step={0.1}\n                    value={scale}\n                    onChange={(val) => setScale(val || 1)}\n                  />\n                </Col>\n                <Col span={4}>\n                  <Tooltip title=\"Error threshold for line detection. Lower = more precise lines.\">\n                    <label>\n                      ltres <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber min={0} value={ltres} onChange={(val) => setLtres(val || 1)} />\n                </Col>\n                <Col span={4}>\n                  <Tooltip title=\"Error threshold for curve detection. Lower = more precise curves.\">\n                    <label>\n                      qtres <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber min={0} value={qtres} onChange={(val) => setQtres(val || 1)} />\n                </Col>\n                <Col span={4}>\n                  <Tooltip title=\"Minimum path length to keep. Higher = simpler SVG with fewer tiny paths.\">\n                    <label>\n                      Pathomit <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber min={0} value={pathomit} onChange={(val) => setPathomit(val || 0)} />\n                </Col>\n                <Col span={4}>\n                  <Tooltip title=\"Pixel sampling interval for colors. 1 = every pixel, higher = faster but less accurate colors.\">\n                    <label>\n                      ColorSampling <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber\n                    min={1}\n                    value={colorsampling}\n                    onChange={(val) => setColorsampling(val || 1)}\n                  />\n                </Col>\n                <Col span={4}>\n                  <Tooltip title=\"Stroke width in the output SVG.\">\n                    <label>\n                      StrokeWidth <InfoCircleOutlined style={{ marginLeft: 4 }} />\n                    </label>\n                  </Tooltip>\n                  <InputNumber\n                    min={0}\n                    value={strokewidth}\n                    onChange={(val) => setStrokewidth(val || 1)}\n                  />\n                </Col>\n              </Row>\n            </Card>\n\n            {/* Action Buttons */}\n            <Space>\n              <Button type=\"primary\" onClick={handleConvert} disabled={!file}>\n                Convert to SVG\n              </Button>\n              <Button onClick={handleClear} danger disabled={!file && !svgContent}>\n                Clear Image\n              </Button>\n            </Space>\n\n            {/* Tabs for SVG formats */}\n            {svgContent && (\n              <Tabs defaultActiveKey=\"svg\" type=\"card\" style={{ marginTop: 16 }}>\n                <TabPane tab=\"SVG\" key=\"svg\">\n                  <Space style={{ marginBottom: 8 }}>\n                    <Button\n                      onClick={() => handleDownload(svgContent, 'image.svg')}\n                      icon={<DownloadOutlined />}\n                    >\n                      Download\n                    </Button>\n                    <Button\n                      onClick={() => handleCopy(svgContent, 'SVG copied!')}\n                      icon={<CopyOutlined />}\n                    >\n                      Copy\n                    </Button>\n                  </Space>\n                  <div\n                    style={{\n                      border: '1px solid #eee',\n                      borderRadius: 6,\n                      padding: 12,\n                      overflow: 'auto',\n                    }}\n                  >\n                    <div dangerouslySetInnerHTML={{ __html: svgContent }} />\n                  </div>\n                </TabPane>\n\n                <TabPane tab=\"Base64\" key=\"base64\">\n                  <Space style={{ marginBottom: 8 }}>\n                    <Button\n                      onClick={() => handleCopy(svgBase64, 'Base64 copied!')}\n                      icon={<CopyOutlined />}\n                    >\n                      Copy Base64\n                    </Button>\n                    <Button\n                      onClick={() => handleDownload(svgBase64, 'image-base64.txt')}\n                      icon={<DownloadOutlined />}\n                    >\n                      Download Base64\n                    </Button>\n                  </Space>\n                  <pre\n                    style={{\n                      background: '#f7f7f7',\n                      padding: 12,\n                      borderRadius: 6,\n                      whiteSpace: 'pre-wrap',\n                      wordBreak: 'break-word',\n                      maxHeight: 300,\n                      overflow: 'auto',\n                    }}\n                  >\n                    {svgBase64}\n                  </pre>\n                </TabPane>\n\n                <TabPane tab=\"Data URI\" key=\"datauri\">\n                  <Space style={{ marginBottom: 8 }}>\n                    <Button\n                      onClick={() => handleCopy(svgDataURI, 'Data URI copied!')}\n                      icon={<CopyOutlined />}\n                    >\n                      Copy Data URI\n                    </Button>\n                    <Button\n                      onClick={() => handleDownload(svgDataURI, 'image-datauri.txt')}\n                      icon={<DownloadOutlined />}\n                    >\n                      Download Data URI\n                    </Button>\n                  </Space>\n                  <pre\n                    style={{\n                      background: '#f7f7f7',\n                      padding: 12,\n                      borderRadius: 6,\n                      whiteSpace: 'pre-wrap',\n                      wordBreak: 'break-word',\n                      maxHeight: 300,\n                      overflow: 'auto',\n                    }}\n                  >\n                    {svgDataURI}\n                  </pre>\n                </TabPane>\n              </Tabs>\n            )}\n          </Space>\n        </Card>\n      </div>\n    </PageContainer>\n  );\n};\n\nexport default PNGJPEG;\n"],"names":[],"mappings":"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"}