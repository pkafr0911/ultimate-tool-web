{"version":3,"sources":["src/pages/TicTacToe/index.tsx"],"sourcesContent":["import { Button, Card, InputNumber, Space, Switch, Typography, message } from 'antd';\nimport React, { useState } from 'react';\nimport Confetti from 'react-confetti';\nimport './styles.less';\n\nconst { Title, Text } = Typography;\n\n// Define possible cell values in the board: X, O, or null\ntype CellValue = 'X' | 'O' | null;\n\nconst TicTacToePage: React.FC = () => {\n  // --- Game State ---\n  const [boardSize, setBoardSize] = useState<number>(3); // size of the board (e.g. 3x3 or 10x10)\n  const [board, setBoard] = useState<CellValue[][]>([]); // 2D array storing current board cells\n  const [currentPlayer, setCurrentPlayer] = useState<'X' | 'O'>('X'); // current turn: X or O\n  const [winner, setWinner] = useState<string | null>(null); // track winner (X, O, or Draw)\n  const [started, setStarted] = useState<boolean>(false); // true when game has started\n  const [blockBothSides, setBlockBothSides] = useState<boolean>(false); // rule for large boards\n  const [showConfetti, setShowConfetti] = useState<boolean>(false); // show confetti animation when someone wins\n\n  // --- Determine win length ---\n  // For 3x3: need 3 in a row to win\n  // For board â‰¥10: need 5 in a row to win\n  const getWinLength = () => (boardSize === 3 ? 3 : 5);\n\n  // --- Initialize / Start Game ---\n  const startGame = () => {\n    // Validate board size (must be 3 or â‰¥10)\n    if (boardSize !== 3 && boardSize < 10) {\n      message.error('Board size must be 3 or at least 10!');\n      return;\n    }\n\n    // Create an empty board filled with null\n    const newBoard = Array(boardSize)\n      .fill(null)\n      .map(() => Array(boardSize).fill(null));\n\n    // Reset states\n    setBoard(newBoard);\n    setWinner(null);\n    setCurrentPlayer('X');\n    setStarted(true);\n    setShowConfetti(false);\n\n    // Disable \"block both sides\" rule if size < 10\n    if (boardSize < 10) setBlockBothSides(false);\n  };\n\n  // --- Check if player has won ---\n  const checkWin = (b: CellValue[][], player: 'X' | 'O'): boolean => {\n    const size = b.length;\n    const winLength = getWinLength();\n\n    // Helper: Check one direction (vertical, horizontal, or diagonal)\n    const checkDirection = (r: number, c: number, dr: number, dc: number): boolean => {\n      let count = 0;\n      let beforeBlocked = false;\n      let afterBlocked = false;\n\n      // Check consecutive cells\n      for (let i = 0; i < winLength; i++) {\n        const nr = r + i * dr; // row step\n        const nc = c + i * dc; // column step\n        // Out of bounds or not player's mark â†’ not a win\n        if (nr < 0 || nc < 0 || nr >= size || nc >= size || b[nr][nc] !== player) return false;\n        count++;\n      }\n\n      // If using \"block both sides\" rule (for board â‰¥10),\n      // check if both ends are blocked by opponent or edges\n      if (blockBothSides && size >= 10) {\n        const beforeR = r - dr;\n        const beforeC = c - dc;\n        const afterR = r + winLength * dr;\n        const afterC = c + winLength * dc;\n\n        beforeBlocked =\n          beforeR >= 0 &&\n          beforeR < size &&\n          beforeC >= 0 &&\n          beforeC < size &&\n          b[beforeR][beforeC] !== null &&\n          b[beforeR][beforeC] !== player;\n        afterBlocked =\n          afterR >= 0 &&\n          afterR < size &&\n          afterC >= 0 &&\n          afterC < size &&\n          b[afterR][afterC] !== null &&\n          b[afterR][afterC] !== player;\n      }\n\n      // Return true if thereâ€™s a winning sequence\n      // and not blocked on both ends (if rule applies)\n      return count === winLength && (!blockBothSides || !(beforeBlocked && afterBlocked));\n    };\n\n    // Scan all cells and all directions for a winning pattern\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        if (b[r][c] !== player) continue;\n\n        if (\n          checkDirection(r, c, 1, 0) || // vertical\n          checkDirection(r, c, 0, 1) || // horizontal\n          checkDirection(r, c, 1, 1) || // diagonal â†˜\n          checkDirection(r, c, 1, -1) // diagonal â†™\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  // --- Handle cell click ---\n  const handleClick = (r: number, c: number) => {\n    // Ignore click if game not started or already won\n    if (winner || !started) return;\n\n    // Prevent overwriting occupied cell\n    if (board[r][c]) {\n      message.warning('Cell already taken!');\n      return;\n    }\n\n    // Clone board and mark current cell\n    const newBoard = board.map((row) => [...row]);\n    newBoard[r][c] = currentPlayer;\n    setBoard(newBoard);\n\n    // Check win condition\n    if (checkWin(newBoard, currentPlayer)) {\n      setWinner(currentPlayer);\n      setShowConfetti(true);\n      message.success(`ðŸŽ‰ Player ${currentPlayer} wins!`);\n      return;\n    }\n\n    // Check draw (all cells filled)\n    const isDraw = newBoard.flat().every((cell) => cell);\n    if (isDraw) {\n      setWinner('Draw');\n      message.info(\"It's a draw!\");\n      return;\n    }\n\n    // Switch player\n    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');\n  };\n\n  // --- Reset entire game to setup state ---\n  const resetGame = () => {\n    setStarted(false);\n    setBoard([]);\n    setWinner(null);\n    setCurrentPlayer('X');\n  };\n\n  // --- Render UI ---\n  return (\n    <div className=\"tic-container\">\n      {/* Show confetti when a player wins */}\n      {showConfetti && winner && winner !== 'Draw' && <Confetti />}\n\n      <Card className=\"tic-card\" variant={'borderless'}>\n        <Title level={3}>ðŸŽ¯ Tic-Tac-Toe</Title>\n\n        {/* Game setup panel */}\n        {!started ? (\n          <Space direction=\"vertical\" size=\"large\" style={{ marginTop: 24 }}>\n            {/* Board size input */}\n            <div>\n              <Text strong>Board Size:</Text>\n              <InputNumber\n                min={3}\n                max={100}\n                step={1}\n                value={boardSize}\n                onChange={(val) => setBoardSize(val || 3)}\n                style={{ marginLeft: 10 }}\n              />\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\n                (Must be 3 or â‰¥10)\n              </Text>\n            </div>\n\n            {/* Show win condition text */}\n            <div>\n              <Text strong>Win Condition:</Text>\n              <Text style={{ marginLeft: 10 }}>\n                {boardSize === 3 ? 'Reach 3 in a row' : 'Reach 5 in a row'}\n              </Text>\n            </div>\n\n            {/* Block rule toggle (only for large boards) */}\n            <div>\n              <Text strong>Block Both Sides Rule:</Text>\n              <Switch\n                checked={blockBothSides}\n                disabled={boardSize < 10}\n                onChange={setBlockBothSides}\n                style={{ marginLeft: 10 }}\n              />\n              <Text type=\"secondary\" style={{ marginLeft: 8 }}>\n                {boardSize < 10\n                  ? 'Only available for board â‰¥10'\n                  : blockBothSides\n                    ? 'Enabled'\n                    : 'Disabled'}\n              </Text>\n            </div>\n\n            {/* Start button */}\n            <Button type=\"primary\" size=\"large\" onClick={startGame}>\n              Start Game\n            </Button>\n          </Space>\n        ) : (\n          <>\n            {/* Board rendering */}\n            {/* Board rendering */}\n            <div\n              className=\"tic-board\"\n              style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(${boardSize}, auto)`,\n                ['--board-size' as any]: boardSize, // ðŸ‘ˆ dynamic CSS var for scaling\n                gap: 4,\n                marginTop: 20,\n                justifyContent: 'center',\n              }}\n            >\n              {board.map((row, rIdx) =>\n                row.map((cell, cIdx) => (\n                  <Button\n                    key={`${rIdx}-${cIdx}`}\n                    className=\"tic-cell\"\n                    onClick={() => handleClick(rIdx, cIdx)}\n                    style={{\n                      color: cell === 'X' ? '#ff7875' : '#69c0ff',\n                    }}\n                  >\n                    {cell}\n                  </Button>\n                )),\n              )}\n            </div>\n\n            {/* Game status */}\n            <div style={{ marginTop: 20 }}>\n              {!winner ? (\n                <Title level={4}>Next Player: {currentPlayer}</Title>\n              ) : (\n                <Title level={4} style={{ color: winner === 'Draw' ? '#999' : '#52c41a' }}>\n                  {winner === 'Draw' ? 'Draw!' : `Winner: ${winner}`}\n                </Title>\n              )}\n            </div>\n\n            {/* Game control buttons */}\n            <Space style={{ marginTop: 16 }}>\n              <Button onClick={startGame}>Restart</Button>\n              <Button danger onClick={resetGame}>\n                New Game Setup\n              </Button>\n            </Space>\n          </>\n        )}\n      </Card>\n    </div>\n  );\n};\n\nexport default TicTacToePage;\n"],"names":[],"mappings":"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"}