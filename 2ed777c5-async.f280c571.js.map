{"version":3,"sources":["node_modules/@ant-design/icons-svg/es/asn/InfoCircleOutlined.js","node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js","node_modules/@ant-design/icons/es/icons/LoadingOutlined.js","src/pages/PNGJPEG/index.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar InfoCircleOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M464 336a48 48 0 1096 0 48 48 0 10-96 0zm72 112h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V456c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"info-circle\", \"theme\": \"outlined\" };\nexport default InfoCircleOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport InfoCircleOutlinedSvg from \"@ant-design/icons-svg/es/asn/InfoCircleOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar InfoCircleOutlined = function InfoCircleOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: InfoCircleOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(InfoCircleOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'InfoCircleOutlined';\n}\nexport default RefIcon;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LoadingOutlinedSvg from \"@ant-design/icons-svg/es/asn/LoadingOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar LoadingOutlined = function LoadingOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LoadingOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(LoadingOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'LoadingOutlined';\n}\nexport default RefIcon;","import React, { useState, useRef } from 'react';\r\nimport {\r\n  Upload,\r\n  Button,\r\n  Card,\r\n  Typography,\r\n  Space,\r\n  message,\r\n  InputNumber,\r\n  Row,\r\n  Col,\r\n  Tooltip,\r\n  Tabs,\r\n  Spin,\r\n} from 'antd';\r\nimport { PageContainer } from '@ant-design/pro-components';\r\nimport {\r\n  UploadOutlined,\r\n  DownloadOutlined,\r\n  CopyOutlined,\r\n  InfoCircleOutlined,\r\n  LoadingOutlined,\r\n} from '@ant-design/icons';\r\nimport ImageTracer from 'imagetracerjs';\r\nimport { handleCopy } from '@/helpers';\r\n\r\nconst { Title } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nconst PNGJPEG: React.FC = () => {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [preview, setPreview] = useState<string | null>(null);\r\n  const [svgContent, setSvgContent] = useState<string | null>(null);\r\n  const [dragging, setDragging] = useState(false);\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  const dragCounter = useRef(0);\r\n\r\n  // Tracing options\r\n  const [scale, setScale] = useState(1);\r\n  const [ltres, setLtres] = useState(1);\r\n  const [qtres, setQtres] = useState(1);\r\n  const [pathomit, setPathomit] = useState(8);\r\n  const [colorsampling, setColorsampling] = useState(2);\r\n  const [strokewidth, setStrokewidth] = useState(1);\r\n\r\n  const handleUpload = (file: File) => {\r\n    setFile(file);\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => setPreview(e.target?.result as string);\r\n    reader.readAsDataURL(file);\r\n    setDragging(false);\r\n    dragCounter.current = 0;\r\n    return false;\r\n  };\r\n\r\n  const handleConvert = () => {\r\n    if (!preview) {\r\n      message.error('Please upload an image first.');\r\n      return;\r\n    }\r\n\r\n    setProcessing(true); // 👈 start loading animation\r\n    try {\r\n      ImageTracer.imageToSVG(\r\n        preview,\r\n        (svgString) => {\r\n          setSvgContent(svgString);\r\n          setProcessing(false); // 👈 stop loading\r\n          message.success('Image converted to SVG successfully!');\r\n        },\r\n        { scale, ltres, qtres, pathomit, colorsampling, strokewidth },\r\n      );\r\n    } catch (err: any) {\r\n      console.error(err);\r\n      setProcessing(false); // 👈 stop loading on error\r\n      message.error('Error converting image to SVG.');\r\n    }\r\n  };\r\n\r\n  const handleDownload = (content: string, filename: string) => {\r\n    const blob = new Blob([content], { type: 'image/svg+xml' });\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = filename;\r\n    link.click();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setFile(null);\r\n    setPreview(null);\r\n    setSvgContent(null);\r\n    message.info('Image and SVG cleared.');\r\n  };\r\n\r\n  // Generate Base64 and Data URI\r\n  const svgBase64 = svgContent ? btoa(unescape(encodeURIComponent(svgContent))) : '';\r\n  const svgDataURI = svgContent ? `data:image/svg+xml;base64,${svgBase64}` : '';\r\n\r\n  return (\r\n    <PageContainer>\r\n      <div\r\n        onDragEnter={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          dragCounter.current++;\r\n          setDragging(true);\r\n        }}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        }}\r\n        onDragLeave={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          dragCounter.current--;\r\n          if (dragCounter.current <= 0) {\r\n            dragCounter.current = 0;\r\n            setDragging(false);\r\n          }\r\n        }}\r\n        onDrop={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          setDragging(false);\r\n          dragCounter.current = 0;\r\n          const files = e.dataTransfer.files;\r\n          if (files.length > 0) handleUpload(files[0]);\r\n        }}\r\n        style={{ position: 'relative', minHeight: '100vh' }}\r\n      >\r\n        <Card title=\"🖼️ Image to SVG Converter\" bordered={false}>\r\n          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r\n            {!dragging && (\r\n              <Upload beforeUpload={handleUpload} showUploadList={false} accept=\".png,.jpg,.jpeg\">\r\n                <Button icon={<UploadOutlined />}>Upload Image (PNG/JPG)</Button>\r\n              </Upload>\r\n            )}\r\n\r\n            {dragging && (\r\n              <div\r\n                style={{\r\n                  position: 'fixed',\r\n                  top: 0,\r\n                  left: 0,\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  zIndex: 9999,\r\n                  background: 'rgba(0,0,0,0.1)',\r\n                  border: '2px dashed #1890ff',\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                  flexDirection: 'column',\r\n                  padding: 20,\r\n                }}\r\n              >\r\n                <UploadOutlined style={{ fontSize: 48, color: '#000000' }} />\r\n                <p style={{ fontSize: 18, marginTop: 8 }}>Drop file anywhere to upload</p>\r\n              </div>\r\n            )}\r\n\r\n            {/* Preview */}\r\n            {preview && (\r\n              <div style={{ textAlign: 'center' }}>\r\n                <Title level={5}>Preview:</Title>\r\n                <img\r\n                  src={preview}\r\n                  alt=\"preview\"\r\n                  style={{\r\n                    maxWidth: '100%',\r\n                    maxHeight: 300,\r\n                    borderRadius: 6,\r\n                    border: '1px solid #eee',\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* === PROCESSING OVERLAY === */}\r\n            {processing && (\r\n              <div\r\n                style={{\r\n                  position: 'fixed',\r\n                  top: 0,\r\n                  left: 0,\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  background: 'rgba(255, 255, 255, 0.7)',\r\n                  zIndex: 10000,\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                  flexDirection: 'column',\r\n                }}\r\n              >\r\n                <Spin\r\n                  indicator={<LoadingOutlined style={{ fontSize: 48, color: '#1890ff' }} spin />}\r\n                  tip=\"Converting image to SVG...\"\r\n                  size=\"large\"\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Tracing Options */}\r\n            <Card size=\"small\" title=\"Tracing Options (Adjust before converting)\">\r\n              <Row gutter={16}>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Scale factor for the SVG output. Higher = larger SVG.\">\r\n                    <label>\r\n                      Scale <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber\r\n                    min={0.1}\r\n                    step={0.1}\r\n                    value={scale}\r\n                    onChange={(val) => setScale(val || 1)}\r\n                  />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Error threshold for line detection. Lower = more precise lines.\">\r\n                    <label>\r\n                      ltres <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber min={0} value={ltres} onChange={(val) => setLtres(val || 1)} />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Error threshold for curve detection. Lower = more precise curves.\">\r\n                    <label>\r\n                      qtres <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber min={0} value={qtres} onChange={(val) => setQtres(val || 1)} />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Minimum path length to keep. Higher = simpler SVG with fewer tiny paths.\">\r\n                    <label>\r\n                      Pathomit <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber min={0} value={pathomit} onChange={(val) => setPathomit(val || 0)} />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Pixel sampling interval for colors. 1 = every pixel, higher = faster but less accurate colors.\">\r\n                    <label>\r\n                      ColorSampling <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber\r\n                    min={1}\r\n                    value={colorsampling}\r\n                    onChange={(val) => setColorsampling(val || 1)}\r\n                  />\r\n                </Col>\r\n                <Col span={4}>\r\n                  <Tooltip title=\"Stroke width in the output SVG.\">\r\n                    <label>\r\n                      StrokeWidth <InfoCircleOutlined style={{ marginLeft: 4 }} />\r\n                    </label>\r\n                  </Tooltip>\r\n                  <InputNumber\r\n                    min={0}\r\n                    value={strokewidth}\r\n                    onChange={(val) => setStrokewidth(val || 1)}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Card>\r\n\r\n            {/* Action Buttons */}\r\n            <Space>\r\n              <Button type=\"primary\" onClick={handleConvert} disabled={!file}>\r\n                Convert to SVG\r\n              </Button>\r\n              <Button onClick={handleClear} danger disabled={!file && !svgContent}>\r\n                Clear Image\r\n              </Button>\r\n            </Space>\r\n\r\n            {/* Tabs for SVG formats */}\r\n            {svgContent && (\r\n              <Tabs defaultActiveKey=\"svg\" type=\"card\" style={{ marginTop: 16 }}>\r\n                <TabPane tab=\"SVG\" key=\"svg\">\r\n                  <Space style={{ marginBottom: 8 }}>\r\n                    <Button\r\n                      onClick={() => handleDownload(svgContent, 'image.svg')}\r\n                      icon={<DownloadOutlined />}\r\n                    >\r\n                      Download\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => handleCopy(svgContent, 'SVG copied!')}\r\n                      icon={<CopyOutlined />}\r\n                    >\r\n                      Copy\r\n                    </Button>\r\n                  </Space>\r\n                  <div\r\n                    style={{\r\n                      border: '1px solid #eee',\r\n                      borderRadius: 6,\r\n                      padding: 12,\r\n                      overflow: 'auto',\r\n                    }}\r\n                  >\r\n                    <div dangerouslySetInnerHTML={{ __html: svgContent }} />\r\n                  </div>\r\n                </TabPane>\r\n\r\n                <TabPane tab=\"Base64\" key=\"base64\">\r\n                  <Space style={{ marginBottom: 8 }}>\r\n                    <Button\r\n                      onClick={() => handleCopy(svgBase64, 'Base64 copied!')}\r\n                      icon={<CopyOutlined />}\r\n                    >\r\n                      Copy Base64\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => handleDownload(svgBase64, 'image-base64.txt')}\r\n                      icon={<DownloadOutlined />}\r\n                    >\r\n                      Download Base64\r\n                    </Button>\r\n                  </Space>\r\n                  <pre\r\n                    style={{\r\n                      background: '#f7f7f7',\r\n                      padding: 12,\r\n                      borderRadius: 6,\r\n                      whiteSpace: 'pre-wrap',\r\n                      wordBreak: 'break-word',\r\n                      maxHeight: 300,\r\n                      overflow: 'auto',\r\n                    }}\r\n                  >\r\n                    {svgBase64}\r\n                  </pre>\r\n                </TabPane>\r\n\r\n                <TabPane tab=\"Data URI\" key=\"datauri\">\r\n                  <Space style={{ marginBottom: 8 }}>\r\n                    <Button\r\n                      onClick={() => handleCopy(svgDataURI, 'Data URI copied!')}\r\n                      icon={<CopyOutlined />}\r\n                    >\r\n                      Copy Data URI\r\n                    </Button>\r\n                    <Button\r\n                      onClick={() => handleDownload(svgDataURI, 'image-datauri.txt')}\r\n                      icon={<DownloadOutlined />}\r\n                    >\r\n                      Download Data URI\r\n                    </Button>\r\n                  </Space>\r\n                  <pre\r\n                    style={{\r\n                      background: '#f7f7f7',\r\n                      padding: 12,\r\n                      borderRadius: 6,\r\n                      whiteSpace: 'pre-wrap',\r\n                      wordBreak: 'break-word',\r\n                      maxHeight: 300,\r\n                      overflow: 'auto',\r\n                    }}\r\n                  >\r\n                    {svgDataURI}\r\n                  </pre>\r\n                </TabPane>\r\n              </Tabs>\r\n            )}\r\n          </Space>\r\n        </Card>\r\n      </div>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default PNGJPEG;\r\n"],"names":[],"mappings":"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"}