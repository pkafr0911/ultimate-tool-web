{"version":3,"sources":["virtual:external_fs","node_modules/@ant-design/icons-svg/es/asn/HighlightOutlined.js","node_modules/@ant-design/icons/es/icons/HighlightOutlined.js","node_modules/@ant-design/icons-svg/es/asn/CompressOutlined.js","node_modules/@ant-design/icons/es/icons/CompressOutlined.js","node_modules/@ant-design/icons/es/icons/SwapOutlined.js","/home/thanhnd/Downloads/code/ultimate-tool-web/src/pages/SVGViewer/styles.less?asmodule","src/pages/SVGViewer/index.tsx"],"sourcesContent":["module.exports = '';","// This icon file is generated automatically.\nvar HighlightOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M957.6 507.4L603.2 158.2a7.9 7.9 0 00-11.2 0L353.3 393.4a8.03 8.03 0 00-.1 11.3l.1.1 40 39.4-117.2 115.3a8.03 8.03 0 00-.1 11.3l.1.1 39.5 38.9-189.1 187H72.1c-4.4 0-8.1 3.6-8.1 8V860c0 4.4 3.6 8 8 8h344.9c2.1 0 4.1-.8 5.6-2.3l76.1-75.6 40.4 39.8a7.9 7.9 0 0011.2 0l117.1-115.6 40.1 39.5a7.9 7.9 0 0011.2 0l238.7-235.2c3.4-3 3.4-8 .3-11.2zM389.8 796.2H229.6l134.4-133 80.1 78.9-54.3 54.1zm154.8-62.1L373.2 565.2l68.6-67.6 171.4 168.9-68.6 67.6zM713.1 658L450.3 399.1 597.6 254l262.8 259-147.3 145z\" } }] }, \"name\": \"highlight\", \"theme\": \"outlined\" };\nexport default HighlightOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport HighlightOutlinedSvg from \"@ant-design/icons-svg/es/asn/HighlightOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar HighlightOutlined = function HighlightOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: HighlightOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(HighlightOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'HighlightOutlined';\n}\nexport default RefIcon;","// This icon file is generated automatically.\nvar CompressOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M326 664H104c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h174v176c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V696c0-17.7-14.3-32-32-32zm16-576h-48c-8.8 0-16 7.2-16 16v176H104c-8.8 0-16 7.2-16 16v48c0 8.8 7.2 16 16 16h222c17.7 0 32-14.3 32-32V104c0-8.8-7.2-16-16-16zm578 576H698c-17.7 0-32 14.3-32 32v224c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16V744h174c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16zm0-384H746V104c0-8.8-7.2-16-16-16h-48c-8.8 0-16 7.2-16 16v224c0 17.7 14.3 32 32 32h222c8.8 0 16-7.2 16-16v-48c0-8.8-7.2-16-16-16z\" } }] }, \"name\": \"compress\", \"theme\": \"outlined\" };\nexport default CompressOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport CompressOutlinedSvg from \"@ant-design/icons-svg/es/asn/CompressOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar CompressOutlined = function CompressOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: CompressOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(CompressOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'CompressOutlined';\n}\nexport default RefIcon;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport SwapOutlinedSvg from \"@ant-design/icons-svg/es/asn/SwapOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar SwapOutlined = function SwapOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: SwapOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(SwapOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'SwapOutlined';\n}\nexport default RefIcon;","\nimport \"/home/thanhnd/Downloads/code/ultimate-tool-web/src/pages/SVGViewer/styles.less?modules\";\nexport default {\"container\": `container-ifNp8X8v`,\"black\": `black-dzYcsv8L`,\"white\": `white-g7ji-nsv`,\"previewSection\": `previewSection-GnZ3WSda`,\"topActions\": `topActions-UFx2oxkx`,\"actions\": `actions-66jwCBOd`,\"previewTabs\": `previewTabs-U_y_MWg8`,\"ant-tabs-content-holder\": `ant-tabs-content-holder-L5RM32NU`,\"previewFooter\": `previewFooter-vj4VT2rT`,\"grey\": `grey-uQ7R7QeA`,\"previewWrapper\": `previewWrapper-BjYbvX_x`,\"editorBox\": `editorBox-3UW17M3X`,\"editorSection\": `editorSection-QVl5cWPc`,\"transparent\": `transparent-P7OSMWzA`,\"previewActions\": `previewActions-CkErfeph`,\"ant-tabs-content\": `ant-tabs-content-K3XRNHSw`,\"content\": `content-MeCNiq_y`,\"previewCodeBox\": `previewCodeBox-TPkKQJk7`}\n","import React, { useRef, useState } from 'react'; // Import React and useState hook\nimport {\n  Upload,\n  Button,\n  Card,\n  Space,\n  message,\n  Segmented,\n  Typography,\n  Tabs,\n  Input,\n  Tooltip,\n} from 'antd'; // Import Ant Design components\nimport {\n  UploadOutlined,\n  CopyOutlined,\n  DeleteOutlined,\n  DownloadOutlined,\n  HighlightOutlined,\n  CompressOutlined,\n  SwapOutlined,\n  SyncOutlined,\n} from '@ant-design/icons'; // Import icons\nimport { Editor } from '@monaco-editor/react'; // Import Monaco Editor component\nimport { optimize } from 'svgo'; // Import SVG optimizer\nimport { handleCopy } from '@/helpers'; // Import custom copy helper\nimport styles from './styles.less'; // Import CSS module\n\nconst { Text } = Typography; // Destructure Text component from Typography\n\nconst SVGViewer: React.FC = () => {\n  // --- State variables ---\n  const [svgCode, setSvgCode] = useState<string>(''); // Store the raw SVG code\n  const [preview, setPreview] = useState<string>(''); // Store SVG preview HTML\n  const [pngPreview, setPngPreview] = useState<string>('');\n  const [icoPreview, setIcoPreview] = useState<string>('');\n  const [bgMode, setBgMode] = useState<'transparent' | 'white' | 'black' | 'grey'>('grey'); // Background mode\n  const [sizeInfo, setSizeInfo] = useState<{ before: number; after?: number } | null>(null); // Store size info before/after optimization\n  const [activeTab, setActiveTab] = useState<string>('svg'); // Active preview tab\n  const [dragging, setDragging] = useState(false);\n  const [svgSize, setSvgSize] = useState<{ width: string; height: string }>({\n    width: '',\n    height: '',\n  }); // Store detected or custom SVG width/height\n  const dragCounter = useRef(0);\n  // place this near the top of your component, under useState declarations:\n  const debounceTimeout = useRef<NodeJS.Timeout | null>(null);\n\n  // --- Function to handle SVG file upload ---\n  const handleUpload = (file: File) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const result = e.target?.result as string;\n      if (!result.includes('<svg')) {\n        message.error('Invalid SVG file');\n        return;\n      }\n\n      const newContent = result.trim();\n      let combinedSvg = '';\n\n      if (svgCode.trim()) {\n        // Append new SVG below existing one\n        combinedSvg = `${svgCode.trim()}\\n\\n<!-- New SVG appended -->\\n${newContent}`;\n      } else {\n        combinedSvg = newContent;\n      }\n\n      setSvgCode(combinedSvg);\n      setPreview(combinedSvg);\n\n      extractSize(combinedSvg); // Auto-detect width & height\n\n      // Update combined file size\n      setSizeInfo({ before: new Blob([combinedSvg]).size });\n      message.success(svgCode ? 'Appended new SVG!' : 'SVG loaded!');\n    };\n    reader.readAsText(file);\n    return false;\n  };\n\n  // --- Debounced Resize ---\n  const debouncedResize = (width: string, height: string) => {\n    if (debounceTimeout.current) clearTimeout(debounceTimeout.current);\n    debounceTimeout.current = setTimeout(() => {\n      if (width && height) handleResize(width, height);\n    }, 500); // waits 500ms after typing stops\n  };\n\n  // --- Extract width and height from SVG code ---\n  const extractSize = (code: string) => {\n    const widthMatch = code.match(/width=\"([^\"]+)\"/);\n    const heightMatch = code.match(/height=\"([^\"]+)\"/);\n    setSvgSize({\n      width: widthMatch ? widthMatch[1] : '',\n      height: heightMatch ? heightMatch[1] : '',\n    });\n  };\n\n  // --- Resize SVG by updating width and height attributes ---\n  const handleResize = (width: string, height: string) => {\n    if (!svgCode.trim()) {\n      message.warning('No SVG loaded.');\n      return;\n    }\n\n    if (!width || !height) {\n      message.warning('Please enter both width and height.');\n      return;\n    }\n\n    let updated = svgCode;\n\n    if (updated.includes('width=')) {\n      updated = updated.replace(/width=\"[^\"]*\"/, `width=\"${width}\"`);\n    } else {\n      updated = updated.replace('<svg', `<svg width=\"${width}\"`);\n    }\n\n    if (updated.includes('height=')) {\n      updated = updated.replace(/height=\"[^\"]*\"/, `height=\"${height}\"`);\n    } else {\n      updated = updated.replace('<svg', `<svg height=\"${height}\"`);\n    }\n\n    setSvgCode(updated);\n    setPreview(updated);\n    message.success(`SVG resized to ${width} Ã— ${height}`);\n  };\n\n  // --- Copy SVG code to clipboard ---\n  const handleCopyCode = () => handleCopy(svgCode, 'Copied SVG code to clipboard!');\n\n  // --- Clear SVG code and preview ---\n  const handleClear = () => {\n    setSvgCode(''); // Clear SVG code\n    setPreview(''); // Clear preview\n    setSizeInfo(null); // Clear size info\n    setSvgSize({ width: '', height: '' }); // Clear detected size\n  };\n\n  // --- Download SVG or other data as file ---\n  const handleDownload = (data: string, filename: string, type: string) => {\n    const blob = new Blob([data], { type }); // Create a blob from data\n    const link = document.createElement('a'); // Create an anchor element\n    link.href = URL.createObjectURL(blob); // Set href to blob URL\n    link.download = filename; // Set file name\n    link.click(); // Trigger download\n    URL.revokeObjectURL(link.href); // Clean up URL object\n  };\n\n  // --- Helper function to format XML ---\n  const formatXML = (xml: string) => {\n    xml = xml.replace(/>\\s+</g, '><').replace(/\\r|\\n/g, '').trim(); // Remove whitespace between tags and newlines\n    xml = xml.replace(/(>)(<)(\\/*)/g, '$1\\n$2$3'); // Add newline between tags\n    const lines = xml.split('\\n'); // Split XML into lines\n    let indentLevel = 0; // Initialize indentation level\n    const formattedLines: string[] = []; // Store formatted lines\n\n    lines.forEach((line) => {\n      if (line.match(/^<\\/\\w/)) indentLevel--; // Decrease indent for closing tags\n      const padding = '  '.repeat(indentLevel); // Create padding string\n      let formattedLine = padding + line.trim(); // Apply padding\n      if (formattedLine.match(/^<\\w.*\\s+\\w+=/)) {\n        // If tag has attributes\n        formattedLine = formattedLine.replace(/(\\s+\\w+=)/g, '\\n' + padding + '  $1'); // Put each attribute on a new line\n      }\n      formattedLines.push(formattedLine); // Add formatted line to array\n      if (line.match(/^<\\w[^>]*[^/]>$/)) indentLevel++; // Increase indent for opening tag\n    });\n\n    return formattedLines.join('\\n').trim(); // Join all lines\n  };\n\n  // --- Prettify SVG code ---\n  const prettifySVG = () => {\n    if (!svgCode.trim()) {\n      message.warning('No SVG code to prettify.');\n      return;\n    }\n    try {\n      const pretty = formatXML(svgCode);\n      setSvgCode(pretty);\n      setPreview(pretty);\n      extractSize(pretty);\n      message.success('SVG prettified!');\n    } catch (err) {\n      console.error(err);\n      message.error('Failed to prettify SVG.');\n    }\n  };\n\n  // --- Optimize SVG using SVGO ---\n  const handleOptimize = () => {\n    if (!svgCode.trim()) {\n      // Check if SVG code exists\n      message.warning('No SVG code to optimize.');\n      return;\n    }\n    try {\n      const beforeSize = new Blob([svgCode]).size; // Get original size\n      const result = optimize(svgCode, { multipass: true }); // Optimize SVG\n      let optimized = result.data; // Get optimized code\n\n      // Remove unnecessary whitespace\n      optimized = optimized\n        .replace(/\\n+/g, '')\n        .replace(/\\r+/g, '')\n        .replace(/\\t+/g, '')\n        .replace(/\\s{2,}/g, ' ')\n        .replace(/> </g, '><')\n        .trim();\n\n      const afterSize = new Blob([optimized]).size; // Get optimized size\n      setSvgCode(optimized); // Update SVG code\n      setPreview(optimized); // Update preview\n      setSizeInfo({ before: beforeSize, after: afterSize }); // Update size info\n\n      const percent = (((beforeSize - afterSize) / beforeSize) * 100).toFixed(1); // Calculate reduction\n      message.success(`SVG optimized! Reduced by ${percent}%`);\n    } catch (err) {\n      console.error(err);\n      message.error('Failed to optimize SVG.');\n    }\n  };\n\n  // --- Generate Data URI string ---\n  const getDataURI = () => `data:image/svg+xml;utf8,${encodeURIComponent(svgCode)}`;\n\n  // --- Generate Base64 string ---\n  const getBase64 = () =>\n    `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(svgCode)))}`;\n\n  // --- Convert SVG to Canvas image (PNG or ICO) ---\n  const svgToCanvas = async (mimeType: string) => {\n    return new Promise<string>((resolve, reject) => {\n      const img = new Image(); // Create image element\n      img.onload = () => {\n        const canvas = document.createElement('canvas'); // Create canvas\n        canvas.width = img.width; // Set width\n        canvas.height = img.height; // Set height\n        const ctx = canvas.getContext('2d'); // Get 2D context\n        if (!ctx) return reject('Canvas context not found'); // Error if context missing\n        ctx.drawImage(img, 0, 0); // Draw image on canvas\n        resolve(canvas.toDataURL(mimeType)); // Return as data URL\n      };\n      img.onerror = reject; // Reject on load error\n      img.src = getDataURI(); // Set image source\n    });\n  };\n\n  // --- Download PNG ---\n  const handleDownloadPng = async () => {\n    try {\n      const dataUrl = await svgToCanvas('image/png'); // Convert SVG to PNG\n      const link = document.createElement('a'); // Create link\n      link.href = dataUrl;\n      link.download = 'image.png'; // Set filename\n      link.click(); // Trigger download\n    } catch {\n      message.error('Failed to convert to PNG.');\n    }\n  };\n\n  // --- Download ICO ---\n  const handleDownloadIco = async () => {\n    try {\n      const dataUrl = await svgToCanvas('image/x-icon'); // Convert SVG to ICO\n      const link = document.createElement('a'); // Create link\n      link.href = dataUrl;\n      link.download = 'favicon.ico'; // Set filename\n      link.click(); // Trigger download\n    } catch {\n      message.error('Failed to convert to ICO.');\n    }\n  };\n\n  // --- Flip SVG horizontally ---\n  const flipHorizontal = () => {\n    if (!svgCode.trim()) {\n      message.warning('No SVG loaded.');\n      return;\n    }\n    let updated = svgCode;\n\n    // Insert or update transform attribute\n    updated = updated.replace(/<svg([^>]*)>/, (match, attrs) => {\n      if (attrs.includes('transform=')) {\n        return `<svg${attrs.replace(/transform=\"([^\"]*)\"/, 'transform=\"scale(-1,1) $1\"')}>`;\n      } else {\n        return `<svg${attrs} transform=\"scale(-1,1)\">`;\n      }\n    });\n\n    setSvgCode(updated);\n    setPreview(updated);\n    message.success('Flipped horizontally!');\n  };\n\n  // --- Flip SVG vertically ---\n  const flipVertical = () => {\n    if (!svgCode.trim()) {\n      message.warning('No SVG loaded.');\n      return;\n    }\n    let updated = svgCode;\n\n    updated = updated.replace(/<svg([^>]*)>/, (match, attrs) => {\n      if (attrs.includes('transform=')) {\n        return `<svg${attrs.replace(/transform=\"([^\"]*)\"/, 'transform=\"scale(1,-1) $1\"')}>`;\n      } else {\n        return `<svg${attrs} transform=\"scale(1,-1)\">`;\n      }\n    });\n\n    setSvgCode(updated);\n    setPreview(updated);\n    message.success('Flipped vertically!');\n  };\n\n  return (\n    <div\n      onDragEnter={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        dragCounter.current++;\n        setDragging(true);\n      }}\n      onDragOver={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      onDragLeave={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        dragCounter.current--;\n        if (dragCounter.current <= 0) {\n          dragCounter.current = 0;\n          setDragging(false);\n        }\n      }}\n      onDrop={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setDragging(false);\n        dragCounter.current = 0;\n        const files = e.dataTransfer.files;\n        if (files.length > 0) handleUpload(files[0]);\n      }}\n      style={{ position: 'relative', minHeight: '100vh' }}\n    >\n      <Card title=\"ðŸ§© SVG Viewer\" bordered={false} className={styles.container}>\n        <div className={styles.content}>\n          {/* Left Side - Editor */}\n          <div className={styles.editorSection}>\n            <Space className={styles.topActions} style={{ marginTop: 12, marginBottom: 8 }} wrap>\n              <Upload beforeUpload={handleUpload} showUploadList={false} accept=\".svg\">\n                <Button icon={<UploadOutlined />}>Upload SVG</Button>\n              </Upload>\n              <Button onClick={prettifySVG} icon={<HighlightOutlined />}>\n                Prettify\n              </Button>\n              <Button onClick={handleOptimize} icon={<CompressOutlined />}>\n                Optimize\n              </Button>\n            </Space>\n\n            {/* Show size info */}\n            {sizeInfo && (\n              <Text type=\"secondary\" className=\"mb-2 block\">\n                Size: <b>{(sizeInfo.before / 1024).toFixed(2)} KB</b>\n                {sizeInfo.after && (\n                  <>\n                    {' '}\n                    â†’ <b>{(sizeInfo.after / 1024).toFixed(2)} KB</b> (\n                    {(((sizeInfo.before - sizeInfo.after) / sizeInfo.before) * 100).toFixed(1)}%\n                    smaller)\n                  </>\n                )}\n              </Text>\n            )}\n\n            {/* Editor */}\n            <div className={styles.editorBox}>\n              <Editor\n                height=\"100%\"\n                defaultLanguage=\"xml\"\n                value={svgCode}\n                onChange={(val) => {\n                  const code = val || '';\n                  setSvgCode(code);\n                  setPreview(code);\n                  extractSize(code);\n                }}\n                theme=\"vs-light\"\n                options={{ minimap: { enabled: false }, wordWrap: 'on', fontSize: 14 }}\n              />\n            </div>\n\n            {/* Editor actions */}\n            <Space className={styles.actions} wrap>\n              <Button type=\"primary\" onClick={handleCopyCode} icon={<CopyOutlined />}>\n                Copy\n              </Button>\n              <Button danger onClick={handleClear} icon={<DeleteOutlined />}>\n                Clear\n              </Button>\n            </Space>\n            {/* Resize controls */}\n            <Space style={{ float: 'right', marginTop: 16 }}>\n              <Text strong>Resize:</Text>\n              <Input\n                size=\"small\"\n                prefix={<CompressOutlined />}\n                placeholder=\"W\"\n                style={{ width: 90 }}\n                value={svgSize.width}\n                onChange={(e) => {\n                  const width = e.target.value;\n                  setSvgSize((prev) => ({ ...prev, width }));\n                  if (width && svgSize.height) debouncedResize(width, svgSize.height);\n                }}\n              />\n              x\n              <Input\n                size=\"small\"\n                prefix={<CompressOutlined />}\n                placeholder=\"H\"\n                style={{ width: 90 }}\n                value={svgSize.height}\n                onChange={(e) => {\n                  const height = e.target.value;\n                  setSvgSize((prev) => ({ ...prev, height }));\n                  if (height && svgSize.width) debouncedResize(svgSize.width, height);\n                }}\n              />\n              <Tooltip title={'Flip H'}>\n                <Button onClick={flipHorizontal} icon={<SwapOutlined />} />\n              </Tooltip>\n              <Tooltip title={'Flip V'}>\n                <Button\n                  onClick={flipVertical}\n                  icon={<SwapOutlined style={{ transform: 'rotate(90deg)' }} />}\n                />\n              </Tooltip>\n            </Space>\n          </div>\n\n          {/* Right Side - Preview */}\n          <div className={styles.previewWrapper}>\n            <Tabs\n              activeKey={activeTab}\n              onChange={(key) => setActiveTab(key)}\n              items={[\n                {\n                  key: 'svg',\n                  label: 'SVG',\n                  children: (\n                    <div\n                      className={`${styles.previewSection} ${styles[bgMode]}`}\n                      dangerouslySetInnerHTML={{\n                        __html: preview\n                          .split('<!-- New SVG appended -->')\n                          .map((part, i) => `<div>${part}</div>`)\n                          .join(''),\n                      }}\n                    />\n                  ),\n                },\n                {\n                  key: 'png',\n                  label: 'PNG',\n                  children: (\n                    <div className={`${styles.previewSection} ${styles[bgMode]}`}>\n                      <img src={getDataURI()} alt=\"PNG preview\" style={{ maxWidth: '100%' }} />\n                    </div>\n                  ),\n                },\n                {\n                  key: 'ico',\n                  label: 'ICO',\n                  children: (\n                    <div className={`${styles.previewSection} ${styles[bgMode]}`}>\n                      <img src={getDataURI()} alt=\"ICO preview\" style={{ maxWidth: '100%' }} />\n                    </div>\n                  ),\n                },\n                {\n                  key: 'datauri',\n                  label: 'Data URI',\n                  children: <pre className={styles.previewCodeBox}>{getDataURI()}</pre>,\n                },\n                {\n                  key: 'base64',\n                  label: 'Base64',\n                  children: <pre className={styles.previewCodeBox}>{getBase64()}</pre>,\n                },\n              ]}\n            />\n\n            {/* Bottom-left: background mode switch */}\n            <div className={styles.previewFooter}>\n              <Segmented\n                options={[\n                  { label: 'Transparent', value: 'transparent' },\n                  { label: 'White', value: 'white' },\n                  { label: 'Grey', value: 'grey' },\n                  { label: 'Black', value: 'black' },\n                ]}\n                value={bgMode}\n                onChange={(val) => setBgMode(val as any)}\n              />\n            </div>\n\n            {/* Bottom-right: download / copy actions */}\n            <div className={styles.previewActions}>\n              {['svg', 'png', 'ico'].includes(activeTab) && (\n                <Button\n                  type=\"primary\"\n                  icon={<DownloadOutlined />}\n                  onClick={\n                    activeTab === 'svg'\n                      ? () => handleDownload(svgCode, 'image.svg', 'image/svg+xml')\n                      : activeTab === 'png'\n                        ? handleDownloadPng\n                        : handleDownloadIco\n                  }\n                >\n                  Download {activeTab.toUpperCase()}\n                </Button>\n              )}\n              {['datauri', 'base64'].includes(activeTab) && (\n                <Button\n                  icon={<CopyOutlined />}\n                  onClick={() =>\n                    handleCopy(\n                      activeTab === 'datauri' ? getDataURI() : getBase64(),\n                      `Copied ${activeTab.toUpperCase()} to clipboard!`,\n                    )\n                  }\n                >\n                  Copy {activeTab.toUpperCase()}\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </Card>\n\n      {/* Drag overlay */}\n      {dragging && (\n        <div\n          style={{\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: 'rgba(0,0,0,0.1)',\n            border: '2px dashed #1890ff',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n            zIndex: 1000,\n          }}\n        >\n          <UploadOutlined style={{ fontSize: 48, color: '#1890ff' }} />\n          <p style={{ fontSize: 18, marginTop: 8 }}>Drop your SVG file here to upload</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SVGViewer;\n"],"names":[],"mappings":"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"}