{"version":3,"sources":["node_modules/turndown/lib/turndown.browser.es.js","node_modules/@ant-design/icons-svg/es/asn/FileMarkdownOutlined.js","node_modules/@ant-design/icons/es/icons/FileMarkdownOutlined.js","node_modules/markdown-it/lib/helpers/parse_link_label.mjs","node_modules/markdown-it/lib/helpers/parse_link_destination.mjs","node_modules/markdown-it/lib/helpers/parse_link_title.mjs","node_modules/markdown-it/lib/renderer.mjs","node_modules/markdown-it/lib/ruler.mjs","node_modules/markdown-it/lib/rules_core/state_core.mjs","node_modules/markdown-it/lib/rules_core/normalize.mjs","node_modules/markdown-it/lib/rules_core/replacements.mjs","node_modules/markdown-it/lib/rules_core/smartquotes.mjs","node_modules/markdown-it/lib/parser_core.mjs","node_modules/markdown-it/lib/rules_core/block.mjs","node_modules/markdown-it/lib/rules_core/inline.mjs","node_modules/markdown-it/lib/rules_core/linkify.mjs","node_modules/markdown-it/lib/rules_core/text_join.mjs","node_modules/markdown-it/lib/rules_block/state_block.mjs","node_modules/markdown-it/lib/rules_block/table.mjs","node_modules/markdown-it/lib/rules_block/list.mjs","node_modules/markdown-it/lib/rules_block/html_block.mjs","node_modules/markdown-it/lib/parser_block.mjs","node_modules/markdown-it/lib/rules_block/code.mjs","node_modules/markdown-it/lib/rules_block/fence.mjs","node_modules/markdown-it/lib/rules_block/blockquote.mjs","node_modules/markdown-it/lib/rules_block/hr.mjs","node_modules/markdown-it/lib/rules_block/reference.mjs","node_modules/markdown-it/lib/rules_block/heading.mjs","node_modules/markdown-it/lib/rules_block/lheading.mjs","node_modules/markdown-it/lib/rules_block/paragraph.mjs","node_modules/markdown-it/lib/rules_inline/state_inline.mjs","node_modules/markdown-it/lib/rules_inline/linkify.mjs","node_modules/markdown-it/lib/rules_inline/escape.mjs","node_modules/markdown-it/lib/rules_inline/strikethrough.mjs","node_modules/markdown-it/lib/rules_inline/emphasis.mjs","node_modules/markdown-it/lib/rules_inline/autolink.mjs","node_modules/markdown-it/lib/rules_inline/entity.mjs","node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs","node_modules/markdown-it/lib/parser_inline.mjs","node_modules/markdown-it/lib/rules_inline/text.mjs","node_modules/markdown-it/lib/rules_inline/newline.mjs","node_modules/markdown-it/lib/rules_inline/backticks.mjs","node_modules/markdown-it/lib/rules_inline/link.mjs","node_modules/markdown-it/lib/rules_inline/image.mjs","node_modules/markdown-it/lib/rules_inline/html_inline.mjs","node_modules/markdown-it/lib/rules_inline/fragments_join.mjs","node_modules/linkify-it/lib/re.mjs","node_modules/linkify-it/index.mjs","node_modules/punycode.js/punycode.es6.js","node_modules/markdown-it/lib/index.mjs","node_modules/markdown-it/lib/presets/default.mjs","node_modules/markdown-it/lib/presets/zero.mjs","node_modules/markdown-it/lib/presets/commonmark.mjs","src/pages/ReadmeEditor/index.tsx"],"sourcesContent":["function extend (destination) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) destination[key] = source[key];\n    }\n  }\n  return destination\n}\n\nfunction repeat (character, count) {\n  return Array(count + 1).join(character)\n}\n\nfunction trimLeadingNewlines (string) {\n  return string.replace(/^\\n*/, '')\n}\n\nfunction trimTrailingNewlines (string) {\n  // avoid match-at-end regexp bottleneck, see #370\n  var indexEnd = string.length;\n  while (indexEnd > 0 && string[indexEnd - 1] === '\\n') indexEnd--;\n  return string.substring(0, indexEnd)\n}\n\nvar blockElements = [\n  'ADDRESS', 'ARTICLE', 'ASIDE', 'AUDIO', 'BLOCKQUOTE', 'BODY', 'CANVAS',\n  'CENTER', 'DD', 'DIR', 'DIV', 'DL', 'DT', 'FIELDSET', 'FIGCAPTION', 'FIGURE',\n  'FOOTER', 'FORM', 'FRAMESET', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'HEADER',\n  'HGROUP', 'HR', 'HTML', 'ISINDEX', 'LI', 'MAIN', 'MENU', 'NAV', 'NOFRAMES',\n  'NOSCRIPT', 'OL', 'OUTPUT', 'P', 'PRE', 'SECTION', 'TABLE', 'TBODY', 'TD',\n  'TFOOT', 'TH', 'THEAD', 'TR', 'UL'\n];\n\nfunction isBlock (node) {\n  return is(node, blockElements)\n}\n\nvar voidElements = [\n  'AREA', 'BASE', 'BR', 'COL', 'COMMAND', 'EMBED', 'HR', 'IMG', 'INPUT',\n  'KEYGEN', 'LINK', 'META', 'PARAM', 'SOURCE', 'TRACK', 'WBR'\n];\n\nfunction isVoid (node) {\n  return is(node, voidElements)\n}\n\nfunction hasVoid (node) {\n  return has(node, voidElements)\n}\n\nvar meaningfulWhenBlankElements = [\n  'A', 'TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TH', 'TD', 'IFRAME', 'SCRIPT',\n  'AUDIO', 'VIDEO'\n];\n\nfunction isMeaningfulWhenBlank (node) {\n  return is(node, meaningfulWhenBlankElements)\n}\n\nfunction hasMeaningfulWhenBlank (node) {\n  return has(node, meaningfulWhenBlankElements)\n}\n\nfunction is (node, tagNames) {\n  return tagNames.indexOf(node.nodeName) >= 0\n}\n\nfunction has (node, tagNames) {\n  return (\n    node.getElementsByTagName &&\n    tagNames.some(function (tagName) {\n      return node.getElementsByTagName(tagName).length\n    })\n  )\n}\n\nvar rules = {};\n\nrules.paragraph = {\n  filter: 'p',\n\n  replacement: function (content) {\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.lineBreak = {\n  filter: 'br',\n\n  replacement: function (content, node, options) {\n    return options.br + '\\n'\n  }\n};\n\nrules.heading = {\n  filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n\n  replacement: function (content, node, options) {\n    var hLevel = Number(node.nodeName.charAt(1));\n\n    if (options.headingStyle === 'setext' && hLevel < 3) {\n      var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\n      return (\n        '\\n\\n' + content + '\\n' + underline + '\\n\\n'\n      )\n    } else {\n      return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.blockquote = {\n  filter: 'blockquote',\n\n  replacement: function (content) {\n    content = content.replace(/^\\n+|\\n+$/g, '');\n    content = content.replace(/^/gm, '> ');\n    return '\\n\\n' + content + '\\n\\n'\n  }\n};\n\nrules.list = {\n  filter: ['ul', 'ol'],\n\n  replacement: function (content, node) {\n    var parent = node.parentNode;\n    if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\n      return '\\n' + content\n    } else {\n      return '\\n\\n' + content + '\\n\\n'\n    }\n  }\n};\n\nrules.listItem = {\n  filter: 'li',\n\n  replacement: function (content, node, options) {\n    var prefix = options.bulletListMarker + '   ';\n    var parent = node.parentNode;\n    if (parent.nodeName === 'OL') {\n      var start = parent.getAttribute('start');\n      var index = Array.prototype.indexOf.call(parent.children, node);\n      prefix = (start ? Number(start) + index : index + 1) + '.  ';\n    }\n    content = content\n      .replace(/^\\n+/, '') // remove leading newlines\n      .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\n      .replace(/\\n/gm, '\\n' + ' '.repeat(prefix.length)); // indent\n    return (\n      prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\n    )\n  }\n};\n\nrules.indentedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'indented' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    return (\n      '\\n\\n    ' +\n      node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\n      '\\n\\n'\n    )\n  }\n};\n\nrules.fencedCodeBlock = {\n  filter: function (node, options) {\n    return (\n      options.codeBlockStyle === 'fenced' &&\n      node.nodeName === 'PRE' &&\n      node.firstChild &&\n      node.firstChild.nodeName === 'CODE'\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var className = node.firstChild.getAttribute('class') || '';\n    var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\n    var code = node.firstChild.textContent;\n\n    var fenceChar = options.fence.charAt(0);\n    var fenceSize = 3;\n    var fenceInCodeRegex = new RegExp('^' + fenceChar + '{3,}', 'gm');\n\n    var match;\n    while ((match = fenceInCodeRegex.exec(code))) {\n      if (match[0].length >= fenceSize) {\n        fenceSize = match[0].length + 1;\n      }\n    }\n\n    var fence = repeat(fenceChar, fenceSize);\n\n    return (\n      '\\n\\n' + fence + language + '\\n' +\n      code.replace(/\\n$/, '') +\n      '\\n' + fence + '\\n\\n'\n    )\n  }\n};\n\nrules.horizontalRule = {\n  filter: 'hr',\n\n  replacement: function (content, node, options) {\n    return '\\n\\n' + options.hr + '\\n\\n'\n  }\n};\n\nrules.inlineLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'inlined' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node) {\n    var href = node.getAttribute('href');\n    if (href) href = href.replace(/([()])/g, '\\\\$1');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title.replace(/\"/g, '\\\\\"') + '\"';\n    return '[' + content + '](' + href + title + ')'\n  }\n};\n\nrules.referenceLink = {\n  filter: function (node, options) {\n    return (\n      options.linkStyle === 'referenced' &&\n      node.nodeName === 'A' &&\n      node.getAttribute('href')\n    )\n  },\n\n  replacement: function (content, node, options) {\n    var href = node.getAttribute('href');\n    var title = cleanAttribute(node.getAttribute('title'));\n    if (title) title = ' \"' + title + '\"';\n    var replacement;\n    var reference;\n\n    switch (options.linkReferenceStyle) {\n      case 'collapsed':\n        replacement = '[' + content + '][]';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      case 'shortcut':\n        replacement = '[' + content + ']';\n        reference = '[' + content + ']: ' + href + title;\n        break\n      default:\n        var id = this.references.length + 1;\n        replacement = '[' + content + '][' + id + ']';\n        reference = '[' + id + ']: ' + href + title;\n    }\n\n    this.references.push(reference);\n    return replacement\n  },\n\n  references: [],\n\n  append: function (options) {\n    var references = '';\n    if (this.references.length) {\n      references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\n      this.references = []; // Reset references\n    }\n    return references\n  }\n};\n\nrules.emphasis = {\n  filter: ['em', 'i'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.emDelimiter + content + options.emDelimiter\n  }\n};\n\nrules.strong = {\n  filter: ['strong', 'b'],\n\n  replacement: function (content, node, options) {\n    if (!content.trim()) return ''\n    return options.strongDelimiter + content + options.strongDelimiter\n  }\n};\n\nrules.code = {\n  filter: function (node) {\n    var hasSiblings = node.previousSibling || node.nextSibling;\n    var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\n\n    return node.nodeName === 'CODE' && !isCodeBlock\n  },\n\n  replacement: function (content) {\n    if (!content) return ''\n    content = content.replace(/\\r?\\n|\\r/g, ' ');\n\n    var extraSpace = /^`|^ .*?[^ ].* $|`$/.test(content) ? ' ' : '';\n    var delimiter = '`';\n    var matches = content.match(/`+/gm) || [];\n    while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\n\n    return delimiter + extraSpace + content + extraSpace + delimiter\n  }\n};\n\nrules.image = {\n  filter: 'img',\n\n  replacement: function (content, node) {\n    var alt = cleanAttribute(node.getAttribute('alt'));\n    var src = node.getAttribute('src') || '';\n    var title = cleanAttribute(node.getAttribute('title'));\n    var titlePart = title ? ' \"' + title + '\"' : '';\n    return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\n  }\n};\n\nfunction cleanAttribute (attribute) {\n  return attribute ? attribute.replace(/(\\n+\\s*)+/g, '\\n') : ''\n}\n\n/**\n * Manages a collection of rules used to convert HTML to Markdown\n */\n\nfunction Rules (options) {\n  this.options = options;\n  this._keep = [];\n  this._remove = [];\n\n  this.blankRule = {\n    replacement: options.blankReplacement\n  };\n\n  this.keepReplacement = options.keepReplacement;\n\n  this.defaultRule = {\n    replacement: options.defaultReplacement\n  };\n\n  this.array = [];\n  for (var key in options.rules) this.array.push(options.rules[key]);\n}\n\nRules.prototype = {\n  add: function (key, rule) {\n    this.array.unshift(rule);\n  },\n\n  keep: function (filter) {\n    this._keep.unshift({\n      filter: filter,\n      replacement: this.keepReplacement\n    });\n  },\n\n  remove: function (filter) {\n    this._remove.unshift({\n      filter: filter,\n      replacement: function () {\n        return ''\n      }\n    });\n  },\n\n  forNode: function (node) {\n    if (node.isBlank) return this.blankRule\n    var rule;\n\n    if ((rule = findRule(this.array, node, this.options))) return rule\n    if ((rule = findRule(this._keep, node, this.options))) return rule\n    if ((rule = findRule(this._remove, node, this.options))) return rule\n\n    return this.defaultRule\n  },\n\n  forEach: function (fn) {\n    for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\n  }\n};\n\nfunction findRule (rules, node, options) {\n  for (var i = 0; i < rules.length; i++) {\n    var rule = rules[i];\n    if (filterValue(rule, node, options)) return rule\n  }\n  return void 0\n}\n\nfunction filterValue (rule, node, options) {\n  var filter = rule.filter;\n  if (typeof filter === 'string') {\n    if (filter === node.nodeName.toLowerCase()) return true\n  } else if (Array.isArray(filter)) {\n    if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\n  } else if (typeof filter === 'function') {\n    if (filter.call(rule, node, options)) return true\n  } else {\n    throw new TypeError('`filter` needs to be a string, array, or function')\n  }\n}\n\n/**\n * The collapseWhitespace function is adapted from collapse-whitespace\n * by Luc Thevenard.\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * collapseWhitespace(options) removes extraneous whitespace from an the given element.\n *\n * @param {Object} options\n */\nfunction collapseWhitespace (options) {\n  var element = options.element;\n  var isBlock = options.isBlock;\n  var isVoid = options.isVoid;\n  var isPre = options.isPre || function (node) {\n    return node.nodeName === 'PRE'\n  };\n\n  if (!element.firstChild || isPre(element)) return\n\n  var prevText = null;\n  var keepLeadingWs = false;\n\n  var prev = null;\n  var node = next(prev, element, isPre);\n\n  while (node !== element) {\n    if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\n      var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\n\n      if ((!prevText || / $/.test(prevText.data)) &&\n          !keepLeadingWs && text[0] === ' ') {\n        text = text.substr(1);\n      }\n\n      // `text` might be empty at this point.\n      if (!text) {\n        node = remove(node);\n        continue\n      }\n\n      node.data = text;\n\n      prevText = node;\n    } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\n      if (isBlock(node) || node.nodeName === 'BR') {\n        if (prevText) {\n          prevText.data = prevText.data.replace(/ $/, '');\n        }\n\n        prevText = null;\n        keepLeadingWs = false;\n      } else if (isVoid(node) || isPre(node)) {\n        // Avoid trimming space around non-block, non-BR void elements and inline PRE.\n        prevText = null;\n        keepLeadingWs = true;\n      } else if (prevText) {\n        // Drop protection if set previously.\n        keepLeadingWs = false;\n      }\n    } else {\n      node = remove(node);\n      continue\n    }\n\n    var nextNode = next(prev, node, isPre);\n    prev = node;\n    node = nextNode;\n  }\n\n  if (prevText) {\n    prevText.data = prevText.data.replace(/ $/, '');\n    if (!prevText.data) {\n      remove(prevText);\n    }\n  }\n}\n\n/**\n * remove(node) removes the given node from the DOM and returns the\n * next node in the sequence.\n *\n * @param {Node} node\n * @return {Node} node\n */\nfunction remove (node) {\n  var next = node.nextSibling || node.parentNode;\n\n  node.parentNode.removeChild(node);\n\n  return next\n}\n\n/**\n * next(prev, current, isPre) returns the next node in the sequence, given the\n * current and previous nodes.\n *\n * @param {Node} prev\n * @param {Node} current\n * @param {Function} isPre\n * @return {Node}\n */\nfunction next (prev, current, isPre) {\n  if ((prev && prev.parentNode === current) || isPre(current)) {\n    return current.nextSibling || current.parentNode\n  }\n\n  return current.firstChild || current.nextSibling || current.parentNode\n}\n\n/*\n * Set up window for Node.js\n */\n\nvar root = (typeof window !== 'undefined' ? window : {});\n\n/*\n * Parsing HTML strings\n */\n\nfunction canParseHTMLNatively () {\n  var Parser = root.DOMParser;\n  var canParse = false;\n\n  // Adapted from https://gist.github.com/1129031\n  // Firefox/Opera/IE throw errors on unsupported types\n  try {\n    // WebKit returns null on unsupported types\n    if (new Parser().parseFromString('', 'text/html')) {\n      canParse = true;\n    }\n  } catch (e) {}\n\n  return canParse\n}\n\nfunction createHTMLParser () {\n  var Parser = function () {};\n\n  {\n    if (shouldUseActiveX()) {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = new window.ActiveXObject('htmlfile');\n        doc.designMode = 'on'; // disable on-page scripts\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    } else {\n      Parser.prototype.parseFromString = function (string) {\n        var doc = document.implementation.createHTMLDocument('');\n        doc.open();\n        doc.write(string);\n        doc.close();\n        return doc\n      };\n    }\n  }\n  return Parser\n}\n\nfunction shouldUseActiveX () {\n  var useActiveX = false;\n  try {\n    document.implementation.createHTMLDocument('').open();\n  } catch (e) {\n    if (root.ActiveXObject) useActiveX = true;\n  }\n  return useActiveX\n}\n\nvar HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\n\nfunction RootNode (input, options) {\n  var root;\n  if (typeof input === 'string') {\n    var doc = htmlParser().parseFromString(\n      // DOM parsers arrange elements in the <head> and <body>.\n      // Wrapping in a custom element ensures elements are reliably arranged in\n      // a single element.\n      '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\n      'text/html'\n    );\n    root = doc.getElementById('turndown-root');\n  } else {\n    root = input.cloneNode(true);\n  }\n  collapseWhitespace({\n    element: root,\n    isBlock: isBlock,\n    isVoid: isVoid,\n    isPre: options.preformattedCode ? isPreOrCode : null\n  });\n\n  return root\n}\n\nvar _htmlParser;\nfunction htmlParser () {\n  _htmlParser = _htmlParser || new HTMLParser();\n  return _htmlParser\n}\n\nfunction isPreOrCode (node) {\n  return node.nodeName === 'PRE' || node.nodeName === 'CODE'\n}\n\nfunction Node (node, options) {\n  node.isBlock = isBlock(node);\n  node.isCode = node.nodeName === 'CODE' || node.parentNode.isCode;\n  node.isBlank = isBlank(node);\n  node.flankingWhitespace = flankingWhitespace(node, options);\n  return node\n}\n\nfunction isBlank (node) {\n  return (\n    !isVoid(node) &&\n    !isMeaningfulWhenBlank(node) &&\n    /^\\s*$/i.test(node.textContent) &&\n    !hasVoid(node) &&\n    !hasMeaningfulWhenBlank(node)\n  )\n}\n\nfunction flankingWhitespace (node, options) {\n  if (node.isBlock || (options.preformattedCode && node.isCode)) {\n    return { leading: '', trailing: '' }\n  }\n\n  var edges = edgeWhitespace(node.textContent);\n\n  // abandon leading ASCII WS if left-flanked by ASCII WS\n  if (edges.leadingAscii && isFlankedByWhitespace('left', node, options)) {\n    edges.leading = edges.leadingNonAscii;\n  }\n\n  // abandon trailing ASCII WS if right-flanked by ASCII WS\n  if (edges.trailingAscii && isFlankedByWhitespace('right', node, options)) {\n    edges.trailing = edges.trailingNonAscii;\n  }\n\n  return { leading: edges.leading, trailing: edges.trailing }\n}\n\nfunction edgeWhitespace (string) {\n  var m = string.match(/^(([ \\t\\r\\n]*)(\\s*))(?:(?=\\S)[\\s\\S]*\\S)?((\\s*?)([ \\t\\r\\n]*))$/);\n  return {\n    leading: m[1], // whole string for whitespace-only strings\n    leadingAscii: m[2],\n    leadingNonAscii: m[3],\n    trailing: m[4], // empty for whitespace-only strings\n    trailingNonAscii: m[5],\n    trailingAscii: m[6]\n  }\n}\n\nfunction isFlankedByWhitespace (side, node, options) {\n  var sibling;\n  var regExp;\n  var isFlanked;\n\n  if (side === 'left') {\n    sibling = node.previousSibling;\n    regExp = / $/;\n  } else {\n    sibling = node.nextSibling;\n    regExp = /^ /;\n  }\n\n  if (sibling) {\n    if (sibling.nodeType === 3) {\n      isFlanked = regExp.test(sibling.nodeValue);\n    } else if (options.preformattedCode && sibling.nodeName === 'CODE') {\n      isFlanked = false;\n    } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\n      isFlanked = regExp.test(sibling.textContent);\n    }\n  }\n  return isFlanked\n}\n\nvar reduce = Array.prototype.reduce;\nvar escapes = [\n  [/\\\\/g, '\\\\\\\\'],\n  [/\\*/g, '\\\\*'],\n  [/^-/g, '\\\\-'],\n  [/^\\+ /g, '\\\\+ '],\n  [/^(=+)/g, '\\\\$1'],\n  [/^(#{1,6}) /g, '\\\\$1 '],\n  [/`/g, '\\\\`'],\n  [/^~~~/g, '\\\\~~~'],\n  [/\\[/g, '\\\\['],\n  [/\\]/g, '\\\\]'],\n  [/^>/g, '\\\\>'],\n  [/_/g, '\\\\_'],\n  [/^(\\d+)\\. /g, '$1\\\\. ']\n];\n\nfunction TurndownService (options) {\n  if (!(this instanceof TurndownService)) return new TurndownService(options)\n\n  var defaults = {\n    rules: rules,\n    headingStyle: 'setext',\n    hr: '* * *',\n    bulletListMarker: '*',\n    codeBlockStyle: 'indented',\n    fence: '```',\n    emDelimiter: '_',\n    strongDelimiter: '**',\n    linkStyle: 'inlined',\n    linkReferenceStyle: 'full',\n    br: '  ',\n    preformattedCode: false,\n    blankReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' : ''\n    },\n    keepReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\n    },\n    defaultReplacement: function (content, node) {\n      return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\n    }\n  };\n  this.options = extend({}, defaults, options);\n  this.rules = new Rules(this.options);\n}\n\nTurndownService.prototype = {\n  /**\n   * The entry point for converting a string or DOM node to Markdown\n   * @public\n   * @param {String|HTMLElement} input The string or DOM node to convert\n   * @returns A Markdown representation of the input\n   * @type String\n   */\n\n  turndown: function (input) {\n    if (!canConvert(input)) {\n      throw new TypeError(\n        input + ' is not a string, or an element/document/fragment node.'\n      )\n    }\n\n    if (input === '') return ''\n\n    var output = process.call(this, new RootNode(input, this.options));\n    return postProcess.call(this, output)\n  },\n\n  /**\n   * Add one or more plugins\n   * @public\n   * @param {Function|Array} plugin The plugin or array of plugins to add\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  use: function (plugin) {\n    if (Array.isArray(plugin)) {\n      for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\n    } else if (typeof plugin === 'function') {\n      plugin(this);\n    } else {\n      throw new TypeError('plugin must be a Function or an Array of Functions')\n    }\n    return this\n  },\n\n  /**\n   * Adds a rule\n   * @public\n   * @param {String} key The unique key of the rule\n   * @param {Object} rule The rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  addRule: function (key, rule) {\n    this.rules.add(key, rule);\n    return this\n  },\n\n  /**\n   * Keep a node (as HTML) that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  keep: function (filter) {\n    this.rules.keep(filter);\n    return this\n  },\n\n  /**\n   * Remove a node that matches the filter\n   * @public\n   * @param {String|Array|Function} filter The unique key of the rule\n   * @returns The Turndown instance for chaining\n   * @type Object\n   */\n\n  remove: function (filter) {\n    this.rules.remove(filter);\n    return this\n  },\n\n  /**\n   * Escapes Markdown syntax\n   * @public\n   * @param {String} string The string to escape\n   * @returns A string with Markdown syntax escaped\n   * @type String\n   */\n\n  escape: function (string) {\n    return escapes.reduce(function (accumulator, escape) {\n      return accumulator.replace(escape[0], escape[1])\n    }, string)\n  }\n};\n\n/**\n * Reduces a DOM node down to its Markdown string equivalent\n * @private\n * @param {HTMLElement} parentNode The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction process (parentNode) {\n  var self = this;\n  return reduce.call(parentNode.childNodes, function (output, node) {\n    node = new Node(node, self.options);\n\n    var replacement = '';\n    if (node.nodeType === 3) {\n      replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\n    } else if (node.nodeType === 1) {\n      replacement = replacementForNode.call(self, node);\n    }\n\n    return join(output, replacement)\n  }, '')\n}\n\n/**\n * Appends strings as each rule requires and trims the output\n * @private\n * @param {String} output The conversion output\n * @returns A trimmed version of the ouput\n * @type String\n */\n\nfunction postProcess (output) {\n  var self = this;\n  this.rules.forEach(function (rule) {\n    if (typeof rule.append === 'function') {\n      output = join(output, rule.append(self.options));\n    }\n  });\n\n  return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\n}\n\n/**\n * Converts an element node to its Markdown equivalent\n * @private\n * @param {HTMLElement} node The node to convert\n * @returns A Markdown representation of the node\n * @type String\n */\n\nfunction replacementForNode (node) {\n  var rule = this.rules.forNode(node);\n  var content = process.call(this, node);\n  var whitespace = node.flankingWhitespace;\n  if (whitespace.leading || whitespace.trailing) content = content.trim();\n  return (\n    whitespace.leading +\n    rule.replacement(content, node, this.options) +\n    whitespace.trailing\n  )\n}\n\n/**\n * Joins replacement to the current output with appropriate number of new lines\n * @private\n * @param {String} output The current conversion output\n * @param {String} replacement The string to append to the output\n * @returns Joined output\n * @type String\n */\n\nfunction join (output, replacement) {\n  var s1 = trimTrailingNewlines(output);\n  var s2 = trimLeadingNewlines(replacement);\n  var nls = Math.max(output.length - s1.length, replacement.length - s2.length);\n  var separator = '\\n\\n'.substring(0, nls);\n\n  return s1 + separator + s2\n}\n\n/**\n * Determines whether an input can be converted\n * @private\n * @param {String|HTMLElement} input Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n\nfunction canConvert (input) {\n  return (\n    input != null && (\n      typeof input === 'string' ||\n      (input.nodeType && (\n        input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\n      ))\n    )\n  )\n}\n\nexport default TurndownService;\n","// This icon file is generated automatically.\nvar FileMarkdownOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494zM429 481.2c-1.9-4.4-6.2-7.2-11-7.2h-35c-6.6 0-12 5.4-12 12v272c0 6.6 5.4 12 12 12h27.1c6.6 0 12-5.4 12-12V582.1l66.8 150.2a12 12 0 0011 7.1H524c4.7 0 9-2.8 11-7.1l66.8-150.6V758c0 6.6 5.4 12 12 12H641c6.6 0 12-5.4 12-12V486c0-6.6-5.4-12-12-12h-34.7c-4.8 0-9.1 2.8-11 7.2l-83.1 191-83.2-191z\" } }] }, \"name\": \"file-markdown\", \"theme\": \"outlined\" };\nexport default FileMarkdownOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport FileMarkdownOutlinedSvg from \"@ant-design/icons-svg/es/asn/FileMarkdownOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar FileMarkdownOutlined = function FileMarkdownOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: FileMarkdownOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(FileMarkdownOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'FileMarkdownOutlined';\n}\nexport default RefIcon;","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n\nexport default function parseLinkLabel (state, start, disableNested) {\n  let level, found, marker, prevPos\n\n  const max = state.posMax\n  const oldPos = state.pos\n\n  state.pos = start + 1\n  level = 1\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos)\n    if (marker === 0x5D /* ] */) {\n      level--\n      if (level === 0) {\n        found = true\n        break\n      }\n    }\n\n    prevPos = state.pos\n    state.md.inline.skipToken(state)\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++\n      } else if (disableNested) {\n        state.pos = oldPos\n        return -1\n      }\n    }\n  }\n\n  let labelEnd = -1\n\n  if (found) {\n    labelEnd = state.pos\n  }\n\n  // restore old state\n  state.pos = oldPos\n\n  return labelEnd\n}\n","// Parse link destination\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\nexport default function parseLinkDestination (str, start, max) {\n  let code\n  let pos = start\n\n  const result = {\n    ok: false,\n    pos: 0,\n    str: ''\n  }\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++\n    while (pos < max) {\n      code = str.charCodeAt(pos)\n      if (code === 0x0A /* \\n */) { return result }\n      if (code === 0x3C /* < */) { return result }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1\n        result.str = unescapeAll(str.slice(start + 1, pos))\n        result.ok = true\n        return result\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2\n        continue\n      }\n\n      pos++\n    }\n\n    // no closing '>'\n    return result\n  }\n\n  // this should be ... } else { ... branch\n\n  let level = 0\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n\n    if (code === 0x20) { break }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      if (str.charCodeAt(pos + 1) === 0x20) { break }\n      pos += 2\n      continue\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++\n      if (level > 32) { return result }\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break }\n      level--\n    }\n\n    pos++\n  }\n\n  if (start === pos) { return result }\n  if (level !== 0) { return result }\n\n  result.str = unescapeAll(str.slice(start, pos))\n  result.pos = pos\n  result.ok = true\n  return result\n}\n","// Parse link title\n//\n\nimport { unescapeAll } from '../common/utils.mjs'\n\n// Parse link title within `str` in [start, max] range,\n// or continue previous parsing if `prev_state` is defined (equal to result of last execution).\n//\nexport default function parseLinkTitle (str, start, max, prev_state) {\n  let code\n  let pos = start\n\n  const state = {\n    // if `true`, this is a valid link title\n    ok: false,\n    // if `true`, this link can be continued on the next line\n    can_continue: false,\n    // if `ok`, it's the position of the first character after the closing marker\n    pos: 0,\n    // if `ok`, it's the unescaped title\n    str: '',\n    // expected closing marker character code\n    marker: 0\n  }\n\n  if (prev_state) {\n    // this is a continuation of a previous parseLinkTitle call on the next line,\n    // used in reference links only\n    state.str = prev_state.str\n    state.marker = prev_state.marker\n  } else {\n    if (pos >= max) { return state }\n\n    let marker = str.charCodeAt(pos)\n    if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return state }\n\n    start++\n    pos++\n\n    // if opening marker is \"(\", switch it to closing marker \")\"\n    if (marker === 0x28) { marker = 0x29 }\n\n    state.marker = marker\n  }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos)\n    if (code === state.marker) {\n      state.pos = pos + 1\n      state.str += unescapeAll(str.slice(start, pos))\n      state.ok = true\n      return state\n    } else if (code === 0x28 /* ( */ && state.marker === 0x29 /* ) */) {\n      return state\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++\n    }\n\n    pos++\n  }\n\n  // no closing marker found, but this link title may continue on the next line (for references)\n  state.can_continue = true\n  state.str += unescapeAll(str.slice(start, pos))\n  return state\n}\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n","// Core state object\n//\n\nimport Token from '../token.mjs'\n\nfunction StateCore (src, md, env) {\n  this.src = src\n  this.env = env\n  this.tokens = []\n  this.inlineMode = false\n  this.md = md // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token\n\nexport default StateCore\n","// Normalize input string\n\n// https://spec.commonmark.org/0.29/#line-ending\nconst NEWLINES_RE  = /\\r\\n?|\\n/g\nconst NULL_RE      = /\\0/g\n\nexport default function normalize (state) {\n  let str\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n')\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD')\n\n  state.src = str\n}\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - multiplications 2 x 4 -> 2 × 4\n\nconst RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nconst SCOPED_ABBR_TEST_RE = /\\((c|tm|r)\\)/i\n\nconst SCOPED_ABBR_RE = /\\((c|tm|r)\\)/ig\nconst SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  tm: '™'\n}\n\nfunction replaceFn (match, name) {\n  return SCOPED_ABBR[name.toLowerCase()]\n}\n\nfunction replace_scoped (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn)\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nfunction replace_rare (inlineTokens) {\n  let inside_autolink = 0\n\n  for (let i = inlineTokens.length - 1; i >= 0; i--) {\n    const token = inlineTokens[i]\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\\u2014')\n          // en-dash\n          .replace(/(^|\\s)--(?=\\s|$)/mg, '$1\\u2013')\n          .replace(/(^|[^-\\s])--(?=[^-\\s]|$)/mg, '$1\\u2013')\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++\n    }\n  }\n}\n\nexport default function replace (state) {\n  let blkIdx\n\n  if (!state.md.options.typographer) { return }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline') { continue }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children)\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children)\n    }\n  }\n}\n","// Convert straight quotation marks to typographic ones\n//\n\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nconst QUOTE_TEST_RE = /['\"]/\nconst QUOTE_RE = /['\"]/g\nconst APOSTROPHE = '\\u2019' /* ’ */\n\nfunction replaceAt (str, index, ch) {\n  return str.slice(0, index) + ch + str.slice(index + 1)\n}\n\nfunction process_inlines (tokens, state) {\n  let j\n\n  const stack = []\n\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i]\n\n    const thisLevel = tokens[i].level\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break }\n    }\n    stack.length = j + 1\n\n    if (token.type !== 'text') { continue }\n\n    let text = token.content\n    let pos = 0\n    let max = text.length\n\n    /* eslint no-labels:0,block-scoped-var:0 */\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos\n      const t = QUOTE_RE.exec(text)\n      if (!t) { break }\n\n      let canOpen = true\n      let canClose = true\n      pos = t.index + 1\n      const isSingle = (t[0] === \"'\")\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      let lastChar = 0x20\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1)\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // lastChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1)\n          break\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      let nextChar = 0x20\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos)\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break // nextChar defaults to 0x20\n          if (!tokens[j].content) continue // should skip all tokens except 'text', 'html_inline' or 'code_inline'\n\n          nextChar = tokens[j].content.charCodeAt(0)\n          break\n        }\n      }\n\n      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n      const isLastWhiteSpace = isWhiteSpace(lastChar)\n      const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n      if (isNextWhiteSpace) {\n        canOpen = false\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false\n        }\n      }\n\n      if (canOpen && canClose) {\n        // Replace quotes in the middle of punctuation sequence, but not\n        // in the middle of the words, i.e.:\n        //\n        // 1. foo \" bar \" baz - not replaced\n        // 2. foo-\"-bar-\"-baz - replaced\n        // 3. foo\"bar\"baz     - not replaced\n        //\n        canOpen = isLastPunctChar\n        canClose = isNextPunctChar\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE)\n        }\n        continue\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          let item = stack[j]\n          if (stack[j].level < thisLevel) { break }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j]\n\n            let openQuote\n            let closeQuote\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2]\n              closeQuote = state.md.options.quotes[3]\n            } else {\n              openQuote = state.md.options.quotes[0]\n              closeQuote = state.md.options.quotes[1]\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote)\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote)\n\n            pos += closeQuote.length - 1\n            if (item.token === i) { pos += openQuote.length - 1 }\n\n            text = token.content\n            max = text.length\n\n            stack.length = j\n            continue OUTER\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        })\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE)\n      }\n    }\n  }\n}\n\nexport default function smartquotes (state) {\n  /* eslint max-depth:0 */\n  if (!state.md.options.typographer) { return }\n\n  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state)\n  }\n}\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateCore from './rules_core/state_core.mjs'\n\nimport r_normalize from './rules_core/normalize.mjs'\nimport r_block from './rules_core/block.mjs'\nimport r_inline from './rules_core/inline.mjs'\nimport r_linkify from './rules_core/linkify.mjs'\nimport r_replacements from './rules_core/replacements.mjs'\nimport r_smartquotes from './rules_core/smartquotes.mjs'\nimport r_text_join from './rules_core/text_join.mjs'\n\nconst _rules = [\n  ['normalize',      r_normalize],\n  ['block',          r_block],\n  ['inline',         r_inline],\n  ['linkify',        r_linkify],\n  ['replacements',   r_replacements],\n  ['smartquotes',    r_smartquotes],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  ['text_join',      r_text_join]\n]\n\n/**\n * new Core()\n **/\nfunction Core () {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n}\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  const rules = this.ruler.getRules('')\n\n  for (let i = 0, l = rules.length; i < l; i++) {\n    rules[i](state)\n  }\n}\n\nCore.prototype.State = StateCore\n\nexport default Core\n","export default function block (state) {\n  let token\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0)\n    token.content  = state.src\n    token.map      = [0, 1]\n    token.children = []\n    state.tokens.push(token)\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens)\n  }\n}\n","export default function inline (state) {\n  const tokens = state.tokens\n\n  // Parse inlines\n  for (let i = 0, l = tokens.length; i < l; i++) {\n    const tok = tokens[i]\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children)\n    }\n  }\n}\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n","// Join raw text tokens with the rest of the text\n//\n// This is set as a separate rule to provide an opportunity for plugins\n// to run text replacements after text join, but before escape join.\n//\n// For example, `\\:)` shouldn't be replaced with an emoji.\n//\n\nexport default function text_join (state) {\n  let curr, last\n  const blockTokens = state.tokens\n  const l = blockTokens.length\n\n  for (let j = 0; j < l; j++) {\n    if (blockTokens[j].type !== 'inline') continue\n\n    const tokens = blockTokens[j].children\n    const max = tokens.length\n\n    for (curr = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text_special') {\n        tokens[curr].type = 'text'\n      }\n    }\n\n    for (curr = last = 0; curr < max; curr++) {\n      if (tokens[curr].type === 'text' &&\n          curr + 1 < max &&\n          tokens[curr + 1].type === 'text') {\n        // collapse two adjacent text nodes\n        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n      } else {\n        if (curr !== last) { tokens[last] = tokens[curr] }\n\n        last++\n      }\n    }\n\n    if (curr !== last) {\n      tokens.length = last\n    }\n  }\n}\n","// Parser state class\n\nimport Token from '../token.mjs'\nimport { isSpace } from '../common/utils.mjs'\n\nfunction StateBlock (src, md, env, tokens) {\n  this.src = src\n\n  // link to parser instance\n  this.md     = md\n\n  this.env = env\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens\n\n  this.bMarks = []  // line begin offsets for fast jumps\n  this.eMarks = []  // line end offsets for fast jumps\n  this.tShift = []  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = []  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = []\n\n  // block parser variables\n\n  // required block content indent (for example, if we are\n  // inside a list, it would be positioned after list marker)\n  this.blkIndent  = 0\n  this.line       = 0 // line index in src\n  this.lineMax    = 0 // lines count\n  this.tight      = false  // loose/tight mode for lists\n  this.ddIndent   = -1 // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1 // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root'\n\n  this.level = 0\n\n  // Create caches\n  // Generate markers.\n  const s = this.src\n\n  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {\n    const ch = s.charCodeAt(pos)\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4\n        } else {\n          offset++\n        }\n        continue\n      } else {\n        indent_found = true\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++ }\n      this.bMarks.push(start)\n      this.eMarks.push(pos)\n      this.tShift.push(indent)\n      this.sCount.push(offset)\n      this.bsCount.push(0)\n\n      indent_found = false\n      indent = 0\n      offset = 0\n      start = pos + 1\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length)\n  this.eMarks.push(s.length)\n  this.tShift.push(0)\n  this.sCount.push(0)\n  this.bsCount.push(0)\n\n  this.lineMax = this.bMarks.length - 1 // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  const token = new Token(type, tag, nesting)\n  token.block = true\n\n  if (nesting < 0) this.level-- // closing tag\n  token.level = this.level\n  if (nesting > 0) this.level++ // opening tag\n\n  this.tokens.push(token)\n  return token\n}\n\nStateBlock.prototype.isEmpty = function isEmpty (line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line]\n}\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines (from) {\n  for (let max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break\n    }\n  }\n  return from\n}\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces (pos) {\n  for (let max = this.src.length; pos < max; pos++) {\n    const ch = this.src.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n  }\n  return pos\n}\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack (pos, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1 }\n  }\n  return pos\n}\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars (pos, code) {\n  for (let max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break }\n  }\n  return pos\n}\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack (pos, code, min) {\n  if (pos <= min) { return pos }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1 }\n  }\n  return pos\n}\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines (begin, end, indent, keepLastLF) {\n  if (begin >= end) {\n    return ''\n  }\n\n  const queue = new Array(end - begin)\n\n  for (let i = 0, line = begin; line < end; line++, i++) {\n    let lineIndent = 0\n    const lineStart = this.bMarks[line]\n    let first = lineStart\n    let last\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1\n    } else {\n      last = this.eMarks[line]\n    }\n\n    while (first < last && lineIndent < indent) {\n      const ch = this.src.charCodeAt(first)\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4\n        } else {\n          lineIndent++\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++\n      } else {\n        break\n      }\n\n      first++\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last)\n    } else {\n      queue[i] = this.src.slice(first, last)\n    }\n  }\n\n  return queue.join('')\n}\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token\n\nexport default StateBlock\n","// GFM table, https://github.github.com/gfm/#tables-extension-\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Limit the amount of empty autocompleted cells in a table,\n// see https://github.com/markdown-it/markdown-it/issues/1000,\n//\n// Both pulldown-cmark and commonmark-hs limit the number of cells this way to ~200k.\n// We set it to 65k, which can expand user input by a factor of x370\n// (256x256 square is 1.8kB expanded into 650kB).\nconst MAX_AUTOCOMPLETED_CELLS = 0x10000\n\nfunction getLine (state, line) {\n  const pos = state.bMarks[line] + state.tShift[line]\n  const max = state.eMarks[line]\n\n  return state.src.slice(pos, max)\n}\n\nfunction escapedSplit (str) {\n  const result = []\n  const max = str.length\n\n  let pos = 0\n  let ch = str.charCodeAt(pos)\n  let isEscaped = false\n  let lastPos = 0\n  let current = ''\n\n  while (pos < max) {\n    if (ch === 0x7c/* | */) {\n      if (!isEscaped) {\n        // pipe separating cells, '|'\n        result.push(current + str.substring(lastPos, pos))\n        current = ''\n        lastPos = pos + 1\n      } else {\n        // escaped pipe, '\\|'\n        current += str.substring(lastPos, pos - 1)\n        lastPos = pos\n      }\n    }\n\n    isEscaped = (ch === 0x5c/* \\ */)\n    pos++\n\n    ch = str.charCodeAt(pos)\n  }\n\n  result.push(current + str.substring(lastPos))\n\n  return result\n}\n\nexport default function table (state, startLine, endLine, silent) {\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false }\n\n  let nextLine = startLine + 1\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const firstCh = state.src.charCodeAt(pos++)\n  if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false }\n\n  if (pos >= state.eMarks[nextLine]) { return false }\n\n  const secondCh = state.src.charCodeAt(pos++)\n  if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace(secondCh)) {\n    return false\n  }\n\n  // if first character is '-', then second character must not be a space\n  // (due to parsing ambiguity with list)\n  if (firstCh === 0x2D/* - */ && isSpace(secondCh)) { return false }\n\n  while (pos < state.eMarks[nextLine]) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false }\n\n    pos++\n  }\n\n  let lineText = getLine(state, startLine + 1)\n  let columns = lineText.split('|')\n  const aligns = []\n  for (let i = 0; i < columns.length; i++) {\n    const t = columns[i].trim()\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue\n      } else {\n        return false\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right')\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left')\n    } else {\n      aligns.push('')\n    }\n  }\n\n  lineText = getLine(state, startLine).trim()\n  if (lineText.indexOf('|') === -1) { return false }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n  columns = escapedSplit(lineText)\n  if (columns.length && columns[0] === '') columns.shift()\n  if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n  // header row will define an amount of columns in the entire table,\n  // and align row should be exactly the same (the rest of the rows can differ)\n  const columnCount = columns.length\n  if (columnCount === 0 || columnCount !== aligns.length) { return false }\n\n  if (silent) { return true }\n\n  const oldParentType = state.parentType\n  state.parentType = 'table'\n\n  // use 'blockquote' lists for termination because it's\n  // the most similar to tables\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const token_to = state.push('table_open', 'table', 1)\n  const tableLines = [startLine, 0]\n  token_to.map = tableLines\n\n  const token_tho = state.push('thead_open', 'thead', 1)\n  token_tho.map = [startLine, startLine + 1]\n\n  const token_htro = state.push('tr_open', 'tr', 1)\n  token_htro.map = [startLine, startLine + 1]\n\n  for (let i = 0; i < columns.length; i++) {\n    const token_ho = state.push('th_open', 'th', 1)\n    if (aligns[i]) {\n      token_ho.attrs  = [['style', 'text-align:' + aligns[i]]]\n    }\n\n    const token_il = state.push('inline', '', 0)\n    token_il.content  = columns[i].trim()\n    token_il.children = []\n\n    state.push('th_close', 'th', -1)\n  }\n\n  state.push('tr_close', 'tr', -1)\n  state.push('thead_close', 'thead', -1)\n\n  let tbodyLines\n  let autocompletedCells = 0\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) { break }\n    lineText = getLine(state, nextLine).trim()\n    if (!lineText) { break }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n    columns = escapedSplit(lineText)\n    if (columns.length && columns[0] === '') columns.shift()\n    if (columns.length && columns[columns.length - 1] === '') columns.pop()\n\n    // note: autocomplete count can be negative if user specifies more columns than header,\n    // but that does not affect intended use (which is limiting expansion)\n    autocompletedCells += columnCount - columns.length\n    if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) { break }\n\n    if (nextLine === startLine + 2) {\n      const token_tbo = state.push('tbody_open', 'tbody', 1)\n      token_tbo.map = tbodyLines = [startLine + 2, 0]\n    }\n\n    const token_tro = state.push('tr_open', 'tr', 1)\n    token_tro.map = [nextLine, nextLine + 1]\n\n    for (let i = 0; i < columnCount; i++) {\n      const token_tdo = state.push('td_open', 'td', 1)\n      if (aligns[i]) {\n        token_tdo.attrs  = [['style', 'text-align:' + aligns[i]]]\n      }\n\n      const token_il = state.push('inline', '', 0)\n      token_il.content  = columns[i] ? columns[i].trim() : ''\n      token_il.children = []\n\n      state.push('td_close', 'td', -1)\n    }\n    state.push('tr_close', 'tr', -1)\n  }\n\n  if (tbodyLines) {\n    state.push('tbody_close', 'tbody', -1)\n    tbodyLines[1] = nextLine\n  }\n\n  state.push('table_close', 'table', -1)\n  tableLines[1] = nextLine\n\n  state.parentType = oldParentType\n  state.line = nextLine\n  return true\n}\n","// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n","// HTML block\n\nimport block_names from '../common/html_blocks.mjs'\nimport { HTML_OPEN_CLOSE_TAG_RE } from '../common/html_re.mjs'\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nconst HTML_SEQUENCES = [\n  [/^<(script|pre|style|textarea)(?=(\\s|>|$))/i, /<\\/(script|pre|style|textarea)>/i, true],\n  [/^<!--/,        /-->/,   true],\n  [/^<\\?/,         /\\?>/,   true],\n  [/^<![A-Z]/,     />/,     true],\n  [/^<!\\[CDATA\\[/, /\\]\\]>/, true],\n  [new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true],\n  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false]\n]\n\nexport default function html_block (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (!state.md.options.html) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  let lineText = state.src.slice(pos, max)\n\n  let i = 0\n  for (; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break }\n  }\n  if (i === HTML_SEQUENCES.length) { return false }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2]\n  }\n\n  let nextLine = startLine + 1\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      max = state.eMarks[nextLine]\n      lineText = state.src.slice(pos, max)\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++ }\n        break\n      }\n    }\n  }\n\n  state.line = nextLine\n\n  const token   = state.push('html_block', '', 0)\n  token.map     = [startLine, nextLine]\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true)\n\n  return true\n}\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateBlock from './rules_block/state_block.mjs'\n\nimport r_table from './rules_block/table.mjs'\nimport r_code from './rules_block/code.mjs'\nimport r_fence from './rules_block/fence.mjs'\nimport r_blockquote from './rules_block/blockquote.mjs'\nimport r_hr from './rules_block/hr.mjs'\nimport r_list from './rules_block/list.mjs'\nimport r_reference from './rules_block/reference.mjs'\nimport r_html_block from './rules_block/html_block.mjs'\nimport r_heading from './rules_block/heading.mjs'\nimport r_lheading from './rules_block/lheading.mjs'\nimport r_paragraph from './rules_block/paragraph.mjs'\n\nconst _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  ['table',      r_table,      ['paragraph', 'reference']],\n  ['code',       r_code],\n  ['fence',      r_fence,      ['paragraph', 'reference', 'blockquote', 'list']],\n  ['blockquote', r_blockquote, ['paragraph', 'reference', 'blockquote', 'list']],\n  ['hr',         r_hr,         ['paragraph', 'reference', 'blockquote', 'list']],\n  ['list',       r_list,       ['paragraph', 'reference', 'blockquote']],\n  ['reference',  r_reference],\n  ['html_block', r_html_block, ['paragraph', 'reference', 'blockquote']],\n  ['heading',    r_heading,    ['paragraph', 'reference', 'blockquote']],\n  ['lheading',   r_lheading],\n  ['paragraph',  r_paragraph]\n]\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock () {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() })\n  }\n}\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  let line = startLine\n  let hasEmptyLines = false\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line)\n    if (line >= endLine) { break }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine\n      break\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    const prevLine = state.line\n    let ok = false\n\n    for (let i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false)\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\")\n        }\n        break\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched')\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true\n    }\n\n    line = state.line\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true\n      line++\n      state.line = line\n    }\n  }\n}\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  if (!src) { return }\n\n  const state = new this.State(src, md, env, outTokens)\n\n  this.tokenize(state, state.line, state.lineMax)\n}\n\nParserBlock.prototype.State = StateBlock\n\nexport default ParserBlock\n","// Code block (4 spaces padded)\n\nexport default function code (state, startLine, endLine/*, silent */) {\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false }\n\n  let nextLine = startLine + 1\n  let last = nextLine\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++\n      continue\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++\n      last = nextLine\n      continue\n    }\n    break\n  }\n\n  state.line = last\n\n  const token   = state.push('code_block', 'code', 0)\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\\n'\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// fences (``` lang, ~~~ lang)\n\nexport default function fence (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (pos + 3 > max) { return false }\n\n  const marker = state.src.charCodeAt(pos)\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false\n  }\n\n  // scan marker length\n  let mem = pos\n  pos = state.skipChars(pos, marker)\n\n  let len = pos - mem\n\n  if (len < 3) { return false }\n\n  const markup = state.src.slice(mem, pos)\n  const params = state.src.slice(pos, max)\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true }\n\n  // search end of block\n  let nextLine = startLine\n  let haveEndMarker = false\n\n  for (;;) {\n    nextLine++\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue\n    }\n\n    pos = state.skipChars(pos, marker)\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos)\n\n    if (pos < max) { continue }\n\n    haveEndMarker = true\n    // found!\n    break\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine]\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0)\n\n  const token   = state.push('fence', 'code', 0)\n  token.info    = params\n  token.content = state.getLines(startLine + 1, nextLine, len, true)\n  token.markup  = markup\n  token.map     = [startLine, state.line]\n\n  return true\n}\n","// Block quotes\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function blockquote (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  const oldLineMax = state.lineMax\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos) !== 0x3E/* > */) { return false }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true }\n\n  const oldBMarks  = []\n  const oldBSCount = []\n  const oldSCount  = []\n  const oldTShift  = []\n\n  const terminatorRules = state.md.block.ruler.getRules('blockquote')\n\n  const oldParentType = state.parentType\n  state.parentType = 'blockquote'\n  let lastLineEmpty = false\n  let nextLine\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    const isOutdented = state.sCount[nextLine] < state.blkIndent\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    max = state.eMarks[nextLine]\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {\n      // This line is inside the blockquote.\n\n      // set offset past spaces and \">\"\n      let initial = state.sCount[nextLine] + 1\n      let spaceAfterMarker\n      let adjustTab\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++\n        initial++\n        adjustTab = false\n        spaceAfterMarker = true\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true\n\n        if ((state.bsCount[nextLine] + initial) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++\n          initial++\n          adjustTab = false\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true\n        }\n      } else {\n        spaceAfterMarker = false\n      }\n\n      let offset = initial\n      oldBMarks.push(state.bMarks[nextLine])\n      state.bMarks[nextLine] = pos\n\n      while (pos < max) {\n        const ch = state.src.charCodeAt(pos)\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4\n          } else {\n            offset++\n          }\n        } else {\n          break\n        }\n\n        pos++\n      }\n\n      lastLineEmpty = pos >= max\n\n      oldBSCount.push(state.bsCount[nextLine])\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0)\n\n      oldSCount.push(state.sCount[nextLine])\n      state.sCount[nextLine] = offset - initial\n\n      oldTShift.push(state.tShift[nextLine])\n      state.tShift[nextLine] = pos - state.bMarks[nextLine]\n      continue\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break }\n\n    // Case 3: another tag found.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine])\n        oldBSCount.push(state.bsCount[nextLine])\n        oldTShift.push(state.tShift[nextLine])\n        oldSCount.push(state.sCount[nextLine])\n        state.sCount[nextLine] -= state.blkIndent\n      }\n\n      break\n    }\n\n    oldBMarks.push(state.bMarks[nextLine])\n    oldBSCount.push(state.bsCount[nextLine])\n    oldTShift.push(state.tShift[nextLine])\n    oldSCount.push(state.sCount[nextLine])\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1\n  }\n\n  const oldIndent = state.blkIndent\n  state.blkIndent = 0\n\n  const token_o  = state.push('blockquote_open', 'blockquote', 1)\n  token_o.markup = '>'\n  const lines = [startLine, 0]\n  token_o.map    = lines\n\n  state.md.block.tokenize(state, startLine, nextLine)\n\n  const token_c  = state.push('blockquote_close', 'blockquote', -1)\n  token_c.markup = '>'\n\n  state.lineMax = oldLineMax\n  state.parentType = oldParentType\n  lines[1] = state.line\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (let i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i]\n    state.tShift[i + startLine] = oldTShift[i]\n    state.sCount[i + startLine] = oldSCount[i]\n    state.bsCount[i + startLine] = oldBSCount[i]\n  }\n  state.blkIndent = oldIndent\n\n  return true\n}\n","// Horizontal rule\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function hr (state, startLine, endLine, silent) {\n  const max = state.eMarks[startLine]\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  const marker = state.src.charCodeAt(pos++)\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  let cnt = 1\n  while (pos < max) {\n    const ch = state.src.charCodeAt(pos++)\n    if (ch !== marker && !isSpace(ch)) { return false }\n    if (ch === marker) { cnt++ }\n  }\n\n  if (cnt < 3) { return false }\n\n  if (silent) { return true }\n\n  state.line = startLine + 1\n\n  const token  = state.push('hr', 'hr', 0)\n  token.map    = [startLine, state.line]\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker))\n\n  return true\n}\n","import { isSpace, normalizeReference } from '../common/utils.mjs'\n\nexport default function reference (state, startLine, _endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n  let nextLine = startLine + 1\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false }\n\n  function getNextLine (nextLine) {\n    const endLine = state.lineMax\n\n    if (nextLine >= endLine || state.isEmpty(nextLine)) {\n      // empty line or end of input\n      return null\n    }\n\n    let isContinuation = false\n\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { isContinuation = true }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { isContinuation = true }\n\n    if (!isContinuation) {\n      const terminatorRules = state.md.block.ruler.getRules('reference')\n      const oldParentType = state.parentType\n      state.parentType = 'reference'\n\n      // Some tags can terminate paragraph without empty line.\n      let terminate = false\n      for (let i = 0, l = terminatorRules.length; i < l; i++) {\n        if (terminatorRules[i](state, nextLine, endLine, true)) {\n          terminate = true\n          break\n        }\n      }\n\n      state.parentType = oldParentType\n      if (terminate) {\n        // terminated by another block\n        return null\n      }\n    }\n\n    const pos = state.bMarks[nextLine] + state.tShift[nextLine]\n    const max = state.eMarks[nextLine]\n\n    // max + 1 explicitly includes the newline\n    return state.src.slice(pos, max + 1)\n  }\n\n  let str = state.src.slice(pos, max + 1)\n\n  max = str.length\n  let labelEnd = -1\n\n  for (pos = 1; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x5B /* [ */) {\n      return false\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos\n      break\n    } else if (ch === 0x0A /* \\n */) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (ch === 0x5C /* \\ */) {\n      pos++\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        const lineContent = getNextLine(nextLine)\n        if (lineContent !== null) {\n          str += lineContent\n          max = str.length\n          nextLine++\n        }\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  const destRes = state.md.helpers.parseLinkDestination(str, pos, max)\n  if (!destRes.ok) { return false }\n\n  const href = state.md.normalizeLink(destRes.str)\n  if (!state.md.validateLink(href)) { return false }\n\n  pos = destRes.pos\n\n  // save cursor state, we could require to rollback later\n  const destEndPos = pos\n  const destEndLineNo = nextLine\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  const start = pos\n  for (; pos < max; pos++) {\n    const ch = str.charCodeAt(pos)\n    if (ch === 0x0A) {\n      const lineContent = getNextLine(nextLine)\n      if (lineContent !== null) {\n        str += lineContent\n        max = str.length\n        nextLine++\n      }\n    } else if (isSpace(ch)) {\n      /* eslint no-empty:0 */\n    } else {\n      break\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  let titleRes = state.md.helpers.parseLinkTitle(str, pos, max)\n  while (titleRes.can_continue) {\n    const lineContent = getNextLine(nextLine)\n    if (lineContent === null) break\n    str += lineContent\n    pos = max\n    max = str.length\n    nextLine++\n    titleRes = state.md.helpers.parseLinkTitle(str, pos, max, titleRes)\n  }\n  let title\n\n  if (pos < max && start !== pos && titleRes.ok) {\n    title = titleRes.str\n    pos = titleRes.pos\n  } else {\n    title = ''\n    pos = destEndPos\n    nextLine = destEndLineNo\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    const ch = str.charCodeAt(pos)\n    if (!isSpace(ch)) { break }\n    pos++\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = ''\n      pos = destEndPos\n      nextLine = destEndLineNo\n      while (pos < max) {\n        const ch = str.charCodeAt(pos)\n        if (!isSpace(ch)) { break }\n        pos++\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false\n  }\n\n  const label = normalizeReference(str.slice(1, labelEnd))\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /* istanbul ignore if */\n  if (silent) { return true }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {}\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title, href }\n  }\n\n  state.line = nextLine\n  return true\n}\n","// heading (#, ##, ...)\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function heading (state, startLine, endLine, silent) {\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n  let max = state.eMarks[startLine]\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  let ch  = state.src.charCodeAt(pos)\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false }\n\n  // count heading level\n  let level = 1\n  ch = state.src.charCodeAt(++pos)\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++\n    ch = state.src.charCodeAt(++pos)\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false }\n\n  if (silent) { return true }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos)\n  const tmp = state.skipCharsBack(max, 0x23, pos) // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp\n  }\n\n  state.line = startLine + 1\n\n  const token_o  = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup = '########'.slice(0, level)\n  token_o.map    = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = state.src.slice(pos, max).trim()\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  const token_c  = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup = '########'.slice(0, level)\n\n  return true\n}\n","// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Paragraph\n\nexport default function paragraph (state, startLine, endLine) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n  const oldParentType = state.parentType\n  let nextLine = startLine + 1\n  state.parentType = 'paragraph'\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine\n\n  const token_o    = state.push('paragraph_open', 'p', 1)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line]\n  token_i.children = []\n\n  state.push('paragraph_close', 'p', -1)\n\n  state.parentType = oldParentType\n\n  return true\n}\n","// Inline parser state\n\nimport Token from '../token.mjs'\nimport { isWhiteSpace, isPunctChar, isMdAsciiPunct } from '../common/utils.mjs'\n\nfunction StateInline (src, md, env, outTokens) {\n  this.src = src\n  this.env = env\n  this.md = md\n  this.tokens = outTokens\n  this.tokens_meta = Array(outTokens.length)\n\n  this.pos = 0\n  this.posMax = this.src.length\n  this.level = 0\n  this.pending = ''\n  this.pendingLevel = 0\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {}\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = []\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = []\n\n  // backtick length => last seen position\n  this.backticks = {}\n  this.backticksScanned = false\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0\n}\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  const token = new Token('text', '', 0)\n  token.content = this.pending\n  token.level = this.pendingLevel\n  this.tokens.push(token)\n  this.pending = ''\n  return token\n}\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending()\n  }\n\n  const token = new Token(type, tag, nesting)\n  let token_meta = null\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--\n    this.delimiters = this._prev_delimiters.pop()\n  }\n\n  token.level = this.level\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++\n    this._prev_delimiters.push(this.delimiters)\n    this.delimiters = []\n    token_meta = { delimiters: this.delimiters }\n  }\n\n  this.pendingLevel = this.level\n  this.tokens.push(token)\n  this.tokens_meta.push(token_meta)\n  return token\n}\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  const max = this.posMax\n  const marker = this.src.charCodeAt(start)\n\n  // treat beginning of the line as a whitespace\n  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20\n\n  let pos = start\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++ }\n\n  const count = pos - start\n\n  // treat end of the line as a whitespace\n  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20\n\n  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar))\n  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar))\n\n  const isLastWhiteSpace = isWhiteSpace(lastChar)\n  const isNextWhiteSpace = isWhiteSpace(nextChar)\n\n  const left_flanking =\n    !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar)\n  const right_flanking =\n    !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar)\n\n  const can_open  = left_flanking  && (canSplitWord || !right_flanking || isLastPunctChar)\n  const can_close = right_flanking && (canSplitWord || !left_flanking  || isNextPunctChar)\n\n  return { can_open, can_close, length: count }\n}\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token\n\nexport default StateInline\n","// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n","// Process escaped chars and hardbreaks\n\nimport { isSpace } from '../common/utils.mjs'\n\nconst ESCAPED = []\n\nfor (let i = 0; i < 256; i++) { ESCAPED.push(0) }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1 })\n\nexport default function escape (state, silent) {\n  let pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) return false\n  pos++\n\n  // '\\' at the end of the inline block\n  if (pos >= max) return false\n\n  let ch1 = state.src.charCodeAt(pos)\n\n  if (ch1 === 0x0A) {\n    if (!silent) {\n      state.push('hardbreak', 'br', 0)\n    }\n\n    pos++\n    // skip leading whitespaces from next line\n    while (pos < max) {\n      ch1 = state.src.charCodeAt(pos)\n      if (!isSpace(ch1)) break\n      pos++\n    }\n\n    state.pos = pos\n    return true\n  }\n\n  let escapedStr = state.src[pos]\n\n  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {\n    const ch2 = state.src.charCodeAt(pos + 1)\n\n    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {\n      escapedStr += state.src[pos + 1]\n      pos++\n    }\n  }\n\n  const origStr = '\\\\' + escapedStr\n\n  if (!silent) {\n    const token = state.push('text_special', '', 0)\n\n    if (ch1 < 256 && ESCAPED[ch1] !== 0) {\n      token.content = escapedStr\n    } else {\n      token.content = origStr\n    }\n\n    token.markup = origStr\n    token.info   = 'escape'\n  }\n\n  state.pos = pos + 1\n  return true\n}\n","// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n","// Process *this* and _that_\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction emphasis_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false }\n\n  const scanned = state.scanDelims(state.pos, marker === 0x2A)\n\n  for (let i = 0; i < scanned.length; i++) {\n    const token = state.push('text', '', 0)\n    token.content = String.fromCharCode(marker)\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token: state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end: -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  const max = delimiters.length\n\n  for (let i = max - 1; i >= 0; i--) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    const isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               // check that first two markers match and adjacent\n               delimiters[i - 1].marker === startDelim.marker &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               // check that last two markers are adjacent (we can safely assume they match)\n               delimiters[startDelim.end + 1].token === endDelim.token + 1\n\n    const ch = String.fromCharCode(startDelim.marker)\n\n    const token_o   = state.tokens[startDelim.token]\n    token_o.type    = isStrong ? 'strong_open' : 'em_open'\n    token_o.tag     = isStrong ? 'strong' : 'em'\n    token_o.nesting = 1\n    token_o.markup  = isStrong ? ch + ch : ch\n    token_o.content = ''\n\n    const token_c   = state.tokens[endDelim.token]\n    token_c.type    = isStrong ? 'strong_close' : 'em_close'\n    token_c.tag     = isStrong ? 'strong' : 'em'\n    token_c.nesting = -1\n    token_c.markup  = isStrong ? ch + ch : ch\n    token_c.content = ''\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = ''\n      state.tokens[delimiters[startDelim.end + 1].token].content = ''\n      i--\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction emphasis_post_process (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: emphasis_tokenize,\n  postProcess: emphasis_post_process\n}\n","// Process autolinks '<protocol:...>'\n\n/* eslint max-len:0 */\nconst EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/\n/* eslint-disable-next-line no-control-regex */\nconst AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\\x00-\\x20]*)$/\n\nexport default function autolink (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false }\n\n  const start = state.pos\n  const max = state.posMax\n\n  for (;;) {\n    if (++pos >= max) return false\n\n    const ch = state.src.charCodeAt(pos)\n\n    if (ch === 0x3C /* < */) return false\n    if (ch === 0x3E /* > */) break\n  }\n\n  const url = state.src.slice(start + 1, pos)\n\n  if (AUTOLINK_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink(url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  if (EMAIL_RE.test(url)) {\n    const fullUrl = state.md.normalizeLink('mailto:' + url)\n    if (!state.md.validateLink(fullUrl)) { return false }\n\n    if (!silent) {\n      const token_o   = state.push('link_open', 'a', 1)\n      token_o.attrs   = [['href', fullUrl]]\n      token_o.markup  = 'autolink'\n      token_o.info    = 'auto'\n\n      const token_t   = state.push('text', '', 0)\n      token_t.content = state.md.normalizeLinkText(url)\n\n      const token_c   = state.push('link_close', 'a', -1)\n      token_c.markup  = 'autolink'\n      token_c.info    = 'auto'\n    }\n\n    state.pos += url.length + 2\n    return true\n  }\n\n  return false\n}\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\nimport { decodeHTML } from 'entities'\nimport { isValidEntityCode, fromCodePoint } from '../common/utils.mjs'\n\nconst DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i\nconst NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i\n\nexport default function entity (state, silent) {\n  const pos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) return false\n\n  if (pos + 1 >= max) return false\n\n  const ch = state.src.charCodeAt(pos + 1)\n\n  if (ch === 0x23 /* # */) {\n    const match = state.src.slice(pos).match(DIGITAL_RE)\n    if (match) {\n      if (!silent) {\n        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10)\n\n        const token   = state.push('text_special', '', 0)\n        token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD)\n        token.markup  = match[0]\n        token.info    = 'entity'\n      }\n      state.pos += match[0].length\n      return true\n    }\n  } else {\n    const match = state.src.slice(pos).match(NAMED_RE)\n    if (match) {\n      const decoded = decodeHTML(match[0])\n      if (decoded !== match[0]) {\n        if (!silent) {\n          const token   = state.push('text_special', '', 0)\n          token.content = decoded\n          token.markup  = match[0]\n          token.info    = 'entity'\n        }\n        state.pos += match[0].length\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","// For each opening emphasis-like marker find a matching closing one\n//\n\nfunction processDelimiters (delimiters) {\n  const openersBottom = {}\n  const max = delimiters.length\n\n  if (!max) return\n\n  // headerIdx is the first delimiter of the current (where closer is) delimiter run\n  let headerIdx = 0\n  let lastTokenIdx = -2 // needs any value lower than -1\n  const jumps = []\n\n  for (let closerIdx = 0; closerIdx < max; closerIdx++) {\n    const closer = delimiters[closerIdx]\n\n    jumps.push(0)\n\n    // markers belong to same delimiter run if:\n    //  - they have adjacent tokens\n    //  - AND markers are the same\n    //\n    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {\n      headerIdx = closerIdx\n    }\n\n    lastTokenIdx = closer.token\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0\n\n    if (!closer.close) continue\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker, each delimiter length modulo 3,\n    // and for whether this closer can be an opener;\n    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460\n    /* eslint-disable-next-line no-prototype-builtins */\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1]\n    }\n\n    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)]\n\n    let openerIdx = headerIdx - jumps[headerIdx] - 1\n\n    let newMinOpenerIdx = openerIdx\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {\n      const opener = delimiters[openerIdx]\n\n      if (opener.marker !== closer.marker) continue\n\n      if (opener.open && opener.end < 0) {\n        let isOddMatch = false\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open\n            ? jumps[openerIdx - 1] + 1\n            : 0\n\n          jumps[closerIdx] = closerIdx - openerIdx + lastJump\n          jumps[openerIdx] = lastJump\n\n          closer.open  = false\n          opener.end   = closerIdx\n          opener.close = false\n          newMinOpenerIdx = -1\n          // treat next token as start of run,\n          // it optimizes skips in **<...>**a**<...>** pathological case\n          lastTokenIdx = -2\n          break\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx\n    }\n  }\n}\n\nexport default function link_pairs (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  processDelimiters(state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(tokens_meta[curr].delimiters)\n    }\n  }\n}\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar (ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true\n    default:\n      return false\n  }\n}\n\nexport default function text (state, silent) {\n  let pos = state.pos\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++\n  }\n\n  if (pos === state.pos) { return false }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos) }\n\n  state.pos = pos\n\n  return true\n}\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParserInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n}; */\n","// Proceess '\\n'\n\nimport { isSpace } from '../common/utils.mjs'\n\nexport default function newline (state, silent) {\n  let pos = state.pos\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false }\n\n  const pmax = state.pending.length - 1\n  const max = state.posMax\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        // Find whitespaces tail of pending chars.\n        let ws = pmax - 1\n        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--\n\n        state.pending = state.pending.slice(0, ws)\n        state.push('hardbreak', 'br', 0)\n      } else {\n        state.pending = state.pending.slice(0, -1)\n        state.push('softbreak', 'br', 0)\n      }\n    } else {\n      state.push('softbreak', 'br', 0)\n    }\n  }\n\n  pos++\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++ }\n\n  state.pos = pos\n  return true\n}\n","// Parse backticks\n\nexport default function backtick (state, silent) {\n  let pos = state.pos\n  const ch = state.src.charCodeAt(pos)\n\n  if (ch !== 0x60/* ` */) { return false }\n\n  const start = pos\n  pos++\n  const max = state.posMax\n\n  // scan marker length\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++ }\n\n  const marker = state.src.slice(start, pos)\n  const openerLength = marker.length\n\n  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {\n    if (!silent) state.pending += marker\n    state.pos += openerLength\n    return true\n  }\n\n  let matchEnd = pos\n  let matchStart\n\n  // Nothing found in the cache, scan until the end of the line (or until marker is found)\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1\n\n    // scan marker length\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++ }\n\n    const closerLength = matchEnd - matchStart\n\n    if (closerLength === openerLength) {\n      // Found matching closer length.\n      if (!silent) {\n        const token = state.push('code_inline', 'code', 0)\n        token.markup = marker\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1')\n      }\n      state.pos = matchEnd\n      return true\n    }\n\n    // Some different length found, put it in cache as upper limit of where closer can be found\n    state.backticks[closerLength] = matchStart\n  }\n\n  // Scanned through the end, didn't find anything\n  state.backticksScanned = true\n\n  if (!silent) state.pending += marker\n  state.pos += openerLength\n  return true\n}\n","// Process [link](<to> \"stuff\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function link (state, silent) {\n  let code, label, res, ref\n  let href = ''\n  let title = ''\n  let start = state.pos\n  let parseReference = true\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false }\n\n  const oldPos = state.pos\n  const max = state.posMax\n  const labelStart = state.pos + 1\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  let pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                ^^ skipping these spaces\n      start = pos\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n\n      // [link](  <href>  \"title\"  )\n      //                  ^^^^^^^ parsing link title\n      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n      if (pos < max && start !== pos && res.ok) {\n        title = res.str\n        pos = res.pos\n\n        // [link](  <href>  \"title\"  )\n        //                         ^^ skipping these spaces\n        for (; pos < max; pos++) {\n          code = state.src.charCodeAt(pos)\n          if (!isSpace(code) && code !== 0x0A) { break }\n        }\n      }\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true\n    }\n    pos++\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart\n    state.posMax = labelEnd\n\n    const token_o = state.push('link_open', 'a', 1)\n    const attrs = [['href', href]]\n    token_o.attrs  = attrs\n    if (title) {\n      attrs.push(['title', title])\n    }\n\n    state.linkLevel++\n    state.md.inline.tokenize(state)\n    state.linkLevel--\n\n    state.push('link_close', 'a', -1)\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n","// Process html tags\n\nimport { HTML_TAG_RE } from '../common/html_re.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nfunction isLetter (ch) {\n  /* eslint no-bitwise:0 */\n  const lc = ch | 0x20 // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */)\n}\n\nexport default function html_inline (state, silent) {\n  if (!state.md.options.html) { return false }\n\n  // Check start\n  const max = state.posMax\n  const pos = state.pos\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false\n  }\n\n  // Quick fail on second char\n  const ch = state.src.charCodeAt(pos + 1)\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false\n  }\n\n  const match = state.src.slice(pos).match(HTML_TAG_RE)\n  if (!match) { return false }\n\n  if (!silent) {\n    const token = state.push('html_inline', '', 0)\n    token.content = match[0]\n\n    if (isLinkOpen(token.content))  state.linkLevel++\n    if (isLinkClose(token.content)) state.linkLevel--\n  }\n  state.pos += match[0].length\n  return true\n}\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n\nexport default function fragments_join (state) {\n  let curr, last\n  let level = 0\n  const tokens = state.tokens\n  const max = state.tokens.length\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level-- // closing tag\n    tokens[curr].level = level\n    if (tokens[curr].nesting > 0) level++ // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr] }\n\n      last++\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last\n  }\n}\n","import { Any, Cc, Z, P } from 'uc.micro'\n\nexport default function (opts) {\n  const re = {}\n  opts = opts || {}\n\n  re.src_Any = Any.source\n  re.src_Cc = Cc.source\n  re.src_Z = Z.source\n  re.src_P = P.source\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  const text_separators = '[><\\uff5c]'\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?'\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?'\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))'\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n\n          // allow `I'm_king` if no pair found\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\n\n          // google has many dots in \"google search\" links (#66, #81).\n          // github has ... in commit range links,\n          // Restrict to\n          // - english\n          // - percent-encoded\n          // - parts of file path\n          // - params separator\n          // until more examples found.\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\n\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\n          (opts['---']\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            : '\\\\-+|'\n          ) +\n          // allow `,,,` in paths\n          ',(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `;` if not followed by space-like char\n          ';(?!' + re.src_ZCc + '|$)|' +\n\n          // allow `!!!` in paths, but not at the end\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\n\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\n        ')+' +\n      '|\\\\/' +\n    ')?'\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*'\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}'\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')'\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')'\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\n    ')'\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')'\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))'\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator\n\n  //\n  // Main rules\n  //\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'\n\n  return re\n}\n","import reFactory from './lib/re.mjs'\n\n//\n// Helpers\n//\n\n// Merge objects\n//\nfunction assign (obj /* from1, from2, from3, ... */) {\n  const sources = Array.prototype.slice.call(arguments, 1)\n\n  sources.forEach(function (source) {\n    if (!source) { return }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\nfunction isString (obj) { return _class(obj) === '[object String]' }\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\n\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\n\n//\n\nconst defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n}\n\nfunction isOptionsObj (obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    /* eslint-disable-next-line no-prototype-builtins */\n    return acc || defaultOptions.hasOwnProperty(k)\n  }, false)\n}\n\nconst defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http = new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        )\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length\n      }\n      return 0\n    }\n  },\n  'https:': 'http:',\n  'ftp:': 'http:',\n  '//': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http = new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        )\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\n        return tail.match(self.re.no_http)[0].length\n      }\n      return 0\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      const tail = text.slice(pos)\n\n      if (!self.re.mailto) {\n        self.re.mailto = new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        )\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length\n      }\n      return 0\n    }\n  }\n}\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\n/* eslint-disable-next-line max-len */\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|')\n\nfunction resetScanCache (self) {\n  self.__index__ = -1\n  self.__text_cache__ = ''\n}\n\nfunction createValidator (re) {\n  return function (text, pos) {\n    const tail = text.slice(pos)\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length\n    }\n    return 0\n  }\n}\n\nfunction createNormalizer () {\n  return function (match, self) {\n    self.normalize(match)\n  }\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile (self) {\n  // Load & clone RE patterns.\n  const re = self.re = reFactory(self.__opts__)\n\n  // Define dynamic patterns\n  const tlds = self.__tlds__.slice()\n\n  self.onCompile()\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re)\n  }\n  tlds.push(re.src_xn)\n\n  re.src_tlds = tlds.join('|')\n\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\n\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')\n\n  //\n  // Compile each schema\n  //\n\n  const aliases = []\n\n  self.__compiled__ = {} // Reset compiled data\n\n  function schemaError (name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    const val = self.__schemas__[name]\n\n    // skip disabled methods\n    if (val === null) { return }\n\n    const compiled = { validate: null, link: null }\n\n    self.__compiled__[name] = compiled\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate)\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate\n      } else {\n        schemaError(name, val)\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer()\n      } else {\n        schemaError(name, val)\n      }\n\n      return\n    }\n\n    if (isString(val)) {\n      aliases.push(name)\n      return\n    }\n\n    schemaError(name, val)\n  })\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize\n  })\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }\n\n  //\n  // Build schema condition\n  //\n  const slist = Object.keys(self.__compiled__)\n    .filter(function (name) {\n      // Filter disabled & fake schemas\n      return name.length > 0 && self.__compiled__[name]\n    })\n    .map(escapeRE)\n    .join('|')\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  )\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self)\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match (self, shift) {\n  const start = self.__index__\n  const end = self.__last_index__\n  const text = self.__text_cache__.slice(start, end)\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema = self.__schema__.toLowerCase()\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index = start + shift\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw = text\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text = text\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url = text\n}\n\nfunction createMatch (self, shift) {\n  const match = new Match(self, shift)\n\n  self.__compiled__[match.schema].normalize(match, self)\n\n  return match\n}\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt (schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options)\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas\n      schemas = {}\n    }\n  }\n\n  this.__opts__ = assign({}, defaultOptions, options)\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__ = -1\n  this.__last_index__ = -1 // Next scan position\n  this.__schema__ = ''\n  this.__text_cache__ = ''\n\n  this.__schemas__ = assign({}, defaultSchemas, schemas)\n  this.__compiled__ = {}\n\n  this.__tlds__ = tlds_default\n  this.__tlds_replaced__ = false\n\n  this.re = {}\n\n  compile(this)\n}\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add (schema, definition) {\n  this.__schemas__[schema] = definition\n  compile(this)\n  return this\n}\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set (options) {\n  this.__opts__ = assign(this.__opts__, options)\n  return this\n}\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) { return false }\n\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search\n    re.lastIndex = 0\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex)\n      if (len) {\n        this.__schema__ = m[2]\n        this.__index__ = m.index + m[1].length\n        this.__last_index__ = m.index + m[0].length + len\n        break\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test)\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n          shift = ml.index + ml[1].length\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__ = ''\n            this.__index__ = shift\n            this.__last_index__ = ml.index + ml[0].length\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@')\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n        shift = me.index + me[1].length\n        next = me.index + me[0].length\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__ = 'mailto:'\n          this.__index__ = shift\n          this.__last_index__ = next\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0\n}\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest (text) {\n  return this.re.pretest.test(text)\n}\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\n}\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match (text) {\n  const result = []\n  let shift = 0\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift))\n    shift = this.__last_index__\n  }\n\n  // Cut head if cache was used\n  let tail = shift ? text.slice(shift) : text\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift))\n\n    tail = tail.slice(this.__last_index__)\n    shift += this.__last_index__\n  }\n\n  if (result.length) {\n    return result\n  }\n\n  return null\n}\n\n/**\n * LinkifyIt#matchAtStart(text) -> Match|null\n *\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\n * of the string, and null otherwise.\n **/\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\n  // Reset scan cache\n  this.__text_cache__ = text\n  this.__index__ = -1\n\n  if (!text.length) return null\n\n  const m = this.re.schema_at_start.exec(text)\n  if (!m) return null\n\n  const len = this.testSchemaAt(text, m[2], m[0].length)\n  if (!len) return null\n\n  this.__schema__ = m[2]\n  this.__index__ = m.index + m[1].length\n  this.__last_index__ = m.index + m[0].length + len\n\n  return createMatch(this, 0)\n}\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\n  list = Array.isArray(list) ? list : [list]\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice()\n    this.__tlds_replaced__ = true\n    compile(this)\n    return this\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n    .sort()\n    .filter(function (el, idx, arr) {\n      return el !== arr[idx - 1]\n    })\n    .reverse()\n\n  compile(this)\n  return this\n}\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize (match) {\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url\n  }\n}\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile () {\n}\n\nexport default LinkifyIt\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Main parser class\n\nimport * as utils from './common/utils.mjs'\nimport * as helpers from './helpers/index.mjs'\nimport Renderer from './renderer.mjs'\nimport ParserCore from './parser_core.mjs'\nimport ParserBlock from './parser_block.mjs'\nimport ParserInline from './parser_inline.mjs'\nimport LinkifyIt from 'linkify-it'\nimport * as mdurl from 'mdurl'\nimport punycode from 'punycode.js'\n\nimport cfg_default from './presets/default.mjs'\nimport cfg_zero from './presets/zero.mjs'\nimport cfg_commonmark from './presets/commonmark.mjs'\n\nconst config = {\n  default: cfg_default,\n  zero: cfg_zero,\n  commonmark: cfg_commonmark\n}\n\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nconst BAD_PROTO_RE = /^(vbscript|javascript|file|data):/\nconst GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/\n\nfunction validateLink (url) {\n  // url should be normalized at this point, and existing entities are decoded\n  const str = url.trim().toLowerCase()\n\n  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true\n}\n\nconst RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:']\n\nfunction normalizeLink (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed))\n}\n\nfunction normalizeLinkText (url) {\n  const parsed = mdurl.parse(url, true)\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname)\n      } catch (er) { /**/ }\n    }\n  }\n\n  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720\n  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%')\n}\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.mjs) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.mjs) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.mjs) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre><code class=\"hljs\">' +\n *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt (presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options)\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {}\n      presetName = 'default'\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline()\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock()\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore()\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs).\n   **/\n  this.renderer = new Renderer()\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.mjs)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt()\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).\n   **/\n  this.utils = utils\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers)\n\n  this.options = {}\n  this.configure(presetName)\n\n  if (options) { this.set(options) }\n}\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options)\n  return this\n}\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you will - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  const self = this\n\n  if (utils.isString(presets)) {\n    const presetName = presets\n    presets = config[presetName]\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name') }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty') }\n\n  if (presets.options) { self.set(presets.options) }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules)\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2)\n      }\n    })\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.enable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed)\n  }\n\n  return this\n}\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  let result = []\n\n  if (!Array.isArray(list)) { list = [list] }\n\n  ['core', 'block', 'inline'].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true))\n  }, this)\n\n  result = result.concat(this.inline.ruler2.disable(list, true))\n\n  const missed = list.filter(function (name) { return result.indexOf(name) < 0 })\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed)\n  }\n  return this\n}\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  const args = [this].concat(Array.prototype.slice.call(arguments, 1))\n  plugin.apply(plugin, args)\n  return this\n}\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and return list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String')\n  }\n\n  const state = new this.core.State(src, this, env)\n\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parse(src, env), this.options, env)\n}\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  const state = new this.core.State(src, this, env)\n\n  state.inlineMode = true\n  this.core.process(state)\n\n  return state.tokens\n}\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {}\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env)\n}\n\nexport default MarkdownIt\n","// markdown-it default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 100\n  },\n\n  components: {\n    core: {},\n    block: {},\n    inline: {}\n  }\n}\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: false,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: false,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","// Commonmark default options\n\nexport default {\n  options: {\n    // Enable HTML tags in source\n    html: true,\n\n    // Use '/' to close single tags (<br />)\n    xhtmlOut: true,\n\n    // Convert '\\n' in paragraphs into <br>\n    breaks: false,\n\n    // CSS language prefix for fenced blocks\n    langPrefix: 'language-',\n\n    // autoconvert URL-like texts to links\n    linkify: false,\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer: false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    // Internal protection, recursion limit\n    maxNesting: 20\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline',\n        'text_join'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'fragments_join'\n      ]\n    }\n  }\n}\n","import React, { useState, useEffect } from 'react';\r\nimport { Card, Button, Space, Typography, message, Segmented } from 'antd';\r\nimport {\r\n  CopyOutlined,\r\n  DownloadOutlined,\r\n  FileMarkdownOutlined,\r\n  EditOutlined,\r\n} from '@ant-design/icons';\r\nimport ReactQuill from 'react-quill';\r\nimport Editor from '@monaco-editor/react';\r\nimport TurndownService from 'turndown';\r\nimport MarkdownIt from 'markdown-it';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport './styles.less';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst turndownService = new TurndownService({\r\n  headingStyle: 'atx',\r\n  hr: '---',\r\n  codeBlockStyle: 'fenced',\r\n});\r\n\r\nconst mdParser = new MarkdownIt({\r\n  html: true,\r\n  linkify: true,\r\n  typographer: true,\r\n});\r\n\r\nconst ReadmeEditorPage: React.FC = () => {\r\n  const [mode, setMode] = useState<'rich' | 'markdown'>('rich');\r\n  const [htmlContent, setHtmlContent] = useState<string>(\r\n    '<h2>Welcome to README Editor</h2><p>Start typing here...</p>',\r\n  );\r\n  const [markdownContent, setMarkdownContent] = useState<string>('');\r\n\r\n  // HTML → Markdown (for rich editor)\r\n  useEffect(() => {\r\n    if (mode === 'rich') {\r\n      setMarkdownContent(turndownService.turndown(htmlContent));\r\n    }\r\n  }, [htmlContent, mode]);\r\n\r\n  // Markdown → HTML (for markdown editor)\r\n  useEffect(() => {\r\n    if (mode === 'markdown') {\r\n      setHtmlContent(mdParser.render(markdownContent));\r\n    }\r\n  }, [markdownContent, mode]);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      const textToCopy = mode === 'rich' ? markdownContent : markdownContent;\r\n      await navigator.clipboard.writeText(textToCopy);\r\n      message.success('Copied Markdown to clipboard!');\r\n    } catch {\r\n      message.error('Failed to copy');\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' });\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = 'README.md';\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <Title level={4} style={{ margin: 0 }}>\r\n            README Editor\r\n          </Title>\r\n          <Segmented\r\n            options={[\r\n              { label: 'Rich Mode', value: 'rich', icon: <EditOutlined /> },\r\n              { label: 'Markdown Mode', value: 'markdown', icon: <FileMarkdownOutlined /> },\r\n            ]}\r\n            value={mode}\r\n            onChange={(val) => setMode(val as 'rich' | 'markdown')}\r\n          />\r\n        </Space>\r\n      }\r\n      className=\"readme-card\"\r\n    >\r\n      <div className=\"readme-container\">\r\n        {/* Left side: Editable */}\r\n        <div className=\"editor-pane\">\r\n          <Title level={5}>{mode === 'rich' ? 'Edit (Rich Text)' : 'Edit (Raw Markdown)'}</Title>\r\n\r\n          {mode === 'rich' ? (\r\n            <ReactQuill value={htmlContent} onChange={setHtmlContent} className=\"quill-editor\" />\r\n          ) : (\r\n            <Editor\r\n              height=\"600px\"\r\n              language=\"markdown\"\r\n              value={markdownContent}\r\n              onChange={(val) => setMarkdownContent(val || '')}\r\n              options={{\r\n                minimap: { enabled: false },\r\n                automaticLayout: true,\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Right side: Output */}\r\n        <div className=\"preview-pane\">\r\n          <Title level={5}>{mode === 'rich' ? 'Raw Markdown (.md)' : 'Rendered Preview'}</Title>\r\n\r\n          {mode === 'rich' ? (\r\n            <Editor\r\n              height=\"600px\"\r\n              language=\"markdown\"\r\n              value={markdownContent}\r\n              options={{\r\n                readOnly: true,\r\n                minimap: { enabled: false },\r\n                automaticLayout: true,\r\n              }}\r\n            />\r\n          ) : (\r\n            <div className=\"markdown-preview\" dangerouslySetInnerHTML={{ __html: htmlContent }} />\r\n          )}\r\n\r\n          <Space className=\"button-group\">\r\n            <Button icon={<CopyOutlined />} onClick={handleCopy}>\r\n              Copy\r\n            </Button>\r\n            <Button icon={<DownloadOutlined />} onClick={handleDownload}>\r\n              Download\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ReadmeEditorPage;\r\n"],"names":[],"mappings":"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"}